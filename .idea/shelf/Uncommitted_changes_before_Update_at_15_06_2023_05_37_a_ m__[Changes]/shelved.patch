Index: src/Restaurante.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import java.awt.*;\r\n\r\nimport javax.swing.*;\r\nimport javax.swing.border.EmptyBorder;\r\nimport javax.swing.table.DefaultTableModel;\r\nimport javax.swing.text.AttributeSet;\r\nimport javax.swing.text.BadLocationException;\r\nimport javax.swing.text.PlainDocument;\r\nimport java.awt.event.*;\r\nimport java.sql.*;\r\nimport java.util.HashMap;\r\nimport java.util.Map;\r\n\r\n\r\npublic class Restaurante extends JFrame {\r\n\r\n\tprivate JPanel contentPane;\r\n\tprivate JTextField textfieldusername;\r\n\tprivate JTextField nombreusuario;\r\n\tprivate JPasswordField contras;\r\n\tprivate JLabel lblContrasea;\r\n\r\n\tprivate Timer updateTimer;\r\n\r\n\r\n\r\n\r\n\r\n\t/**\r\n\t * Launch the application.\r\n\t */\r\n\tpublic static void main(String[] args) {\r\n\t\tmigrateTables();\r\n\r\n\t\tEventQueue.invokeLater(new Runnable() {\r\n\t\t\tpublic void run() {\r\n\t\t\t\ttry {\r\n\t\t\t\t\tRestaurante frame = new Restaurante();\r\n\t\t\t\t\tframe.setVisible(true);\r\n\t\t\t\t\tframe.setResizable(false);\r\n\t\t\t\t} catch (Exception e) {\r\n\t\t\t\t\te.printStackTrace();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\r\n\r\n\r\n\t/**\r\n\t * Create the frame.\r\n\t */\r\n\tpublic Restaurante() {\r\n\t\tsetDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\r\n\t\tsetBounds(100, 100, 977, 681);\r\n\t\tcontentPane = new JPanel();\r\n\t\tcontentPane.setBorder(new EmptyBorder(5, 5, 5, 5));\r\n\r\n\t\t//JPanel de ventanas definidos\r\n\r\n\r\n\r\n\t\tJPanel Inicio = new JPanel();\r\n\r\n\t\t//clientes\r\n\t\tJPanel EliminarClientes = new JPanel();\r\n\t\tJPanel Clientes = new JPanel();\r\n\t\tJPanel ConsultaClientes = new JPanel();\r\n\t\tJPanel EditarClientes = new JPanel();\r\n\t\tJPanel EditarTabla = new JPanel();\r\n\t\tJPanel CrearClientes = new JPanel();\r\n\t\tJPanel InfoCliente = new JPanel();\r\n\r\n\r\n\t\t//platillos\r\n\t\tJPanel Platillos = new JPanel();\r\n\t\tJPanel ConsultaPlatillos = new JPanel();\r\n\t\tJPanel EditarPlat = new JPanel();\r\n\t\tJPanel Crearplat = new JPanel();\r\n\t\tJPanel Platillosconingre = new JPanel();\r\n\t\tJPanel ElimPlatillos = new JPanel();\r\n\r\n\r\n\t\t//Ordenes\r\n\t\tJPanel Ordenes= new JPanel();\r\n\t\tJPanel ConsultarOrden = new JPanel();\r\n\t\tJPanel PanelConsultaOrden = new JPanel();\r\n\t\tJPanel CrearOrden = new JPanel();\r\n\t\tJPanel EliminarOrden= new JPanel();\r\n\t\tJPanel EditarOrden = new JPanel();\r\n\t\tJPanel PanelEditarOrden = new JPanel();\r\n\r\n\r\n\t\t//inventarios\r\n\t\tJPanel Inventario = new JPanel();\r\n\t\tJPanel ConsultaInv = new JPanel();\r\n\t\tJPanel EditarINv = new JPanel();\r\n\t\tJPanel EliminarINv = new JPanel();\r\n\t\tJPanel NuevoArticulo = new JPanel();\r\n\r\n\r\n\t\tsetContentPane(contentPane);\r\n\t\tcontentPane.setLayout(new GridLayout(0, 1, 0, 0));\r\n\r\n\t\t//--------------------------------------panel Login----------------------------------------------------\r\n\r\n\r\n\t\tJPanel login = new JPanel();\r\n\t\tcontentPane.add(login);\r\n\t\tlogin.setLayout(null);\r\n\r\n\r\n\r\n\t\tJLabel menufondito = new JLabel(new ImageIcon(\"Menufondo.png\"));\r\n\t\tmenufondito.setBounds(0, 0, 977, 681);\r\n\t\tmenufondito.setLayout(null);\r\n\t\tlogin.add(menufondito);\r\n\r\n\t\tJLabel logotipo = new JLabel(new ImageIcon(\"iconochido.gif\"));\r\n\t\tlogotipo.setBounds(410,0,120,150);\r\n\t\tmenufondito.add(logotipo);\r\n\r\n\t\tJLabel nombreLogo = new JLabel(new ImageIcon(\"tituloR (1).png\"));\r\n\t\tnombreLogo.setBounds(298,70,350,233);\r\n\t\tmenufondito.add(nombreLogo);\r\n\r\n\t\tJPanel panel_1 = new JPanel();\r\n\t\tpanel_1.setBackground(new Color(255, 255, 255));\r\n\t\tpanel_1.setBounds(273, 250, 391, 313);\r\n\t\tmenufondito.add(panel_1);\r\n\t\tpanel_1.setLayout(null);\r\n\r\n\r\n\t\tnombreusuario = new JTextField();\r\n\t\tnombreusuario.setColumns(10);\r\n\t\tnombreusuario.setBounds(30, 57, 328, 45);\r\n\t\tpanel_1.add(nombreusuario);\r\n\r\n\t\tcontras = new JPasswordField();\r\n\t\tcontras.setColumns(10);\r\n\t\tcontras.setBounds(30, 180, 328, 45);\r\n\t\tpanel_1.add(contras);\r\n\r\n\t\tJLabel lblNewLabel = new JLabel(\"Usuario\");\r\n\t\tlblNewLabel.setFont(new Font(\"Arial Black\", Font.PLAIN, 20));\r\n\t\tlblNewLabel.setBounds(30, 26, 149, 28);\r\n\t\tpanel_1.add(lblNewLabel);\r\n\r\n\t\tlblContrasea = new JLabel(\"Contrase√±a\");\r\n\t\tlblContrasea.setFont(new Font(\"Arial Black\", Font.PLAIN, 20));\r\n\t\tlblContrasea.setBounds(30, 142, 149, 28);\r\n\t\tpanel_1.add(lblContrasea);\r\n\r\n\t\tJButton btnparalogin = new JButton(\"Login\");\r\n\t\tbtnparalogin.setFont(new Font(\"Arial Black\", Font.PLAIN, 20));\r\n\t\tbtnparalogin.addActionListener(new ActionListener() {\r\n\t\t\tpublic void actionPerformed(ActionEvent e) {\r\n\t\t\t\tString username = new String(nombreusuario.getText());\r\n\t\t\t\tString password = new String(contras.getPassword());\r\n\r\n\t\t\t\t// Establish a database connection\r\n\t\t\t\ttry {\r\n\t\t\t\t\tConnection connection = DriverManager.getConnection(\"jdbc:mysql://localhost:3306/credenciales\", \"root\", \"root\");\r\n\t\t\t\t\tString query = \"SELECT * FROM iniciosesion LIMIT 1\";\r\n\t\t\t\t\tPreparedStatement preparedStatement = connection.prepareStatement(query);\r\n\t\t\t\t\tResultSet resultSet = preparedStatement.executeQuery();\r\n\r\n\t\t\t\t\tif (resultSet.next()) {\r\n\t\t\t\t\t\tString storedUsername = resultSet.getString(\"Usuario\");\r\n\t\t\t\t\t\tString storedPassword = resultSet.getString(\"Contrasena\");\r\n\r\n\t\t\t\t\t\tSystem.out.println(\"Entered Username: \" + username);\r\n\t\t\t\t\t\tSystem.out.println(\"Stored Username: \" + storedUsername);\r\n\t\t\t\t\t\tSystem.out.println(\"Entered Password: \" + password);\r\n\t\t\t\t\t\tSystem.out.println(\"Stored Password: \" + storedPassword);\r\n\r\n\t\t\t\t\t\tif (username.equals(storedUsername) && password.equals(storedPassword)) {\r\n\t\t\t\t\t\t\t// Login successful\r\n\t\t\t\t\t\t\tremove(login);\r\n\t\t\t\t\t\t\tadd(Inicio);\r\n\t\t\t\t\t\t\trepaint();\r\n\t\t\t\t\t\t\trevalidate();\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t// Login failed\r\n\t\t\t\t\t\t\tJOptionPane.showMessageDialog(login, \"Usuario incorrecto, ingrese credenciales correctas\", \"Error\", JOptionPane.ERROR_MESSAGE);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\t// No rows found in the table\r\n\t\t\t\t\t\tJOptionPane.showMessageDialog(login, \"No se encontraron registros en la tabla\", \"Error\", JOptionPane.ERROR_MESSAGE);\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tresultSet.close();\r\n\t\t\t\t\tpreparedStatement.close();\r\n\t\t\t\t\tconnection.close();\r\n\t\t\t\t} catch (SQLException ex) {\r\n\t\t\t\t\tex.printStackTrace();\r\n\t\t\t\t\tSystem.out.println(\"SQLException: \" + ex.getMessage());\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\tbtnparalogin.setBackground(new Color(255, 255, 255));\r\n\t\tbtnparalogin.setBounds(30, 236, 110, 45);\r\n\t\tpanel_1.add(btnparalogin);\r\n\r\n\r\n\t\tJButton btnCancelar = new JButton(\"Cancelar\");\r\n\t\tbtnCancelar.setFont(new Font(\"Arial Black\", Font.PLAIN, 18));\r\n\t\tbtnCancelar.setBackground(new Color(255, 255, 255));\r\n\t\tbtnCancelar.setBounds(226, 236, 130, 45);\r\n\t\tpanel_1.add(btnCancelar);\r\n\r\n\r\n\r\n\r\n\t\t//--------------------------------------panel menu inicio----------------------------------------------------\r\n\r\n\r\n\t\t//contentPane.add(Inicio);\r\n\t\tInicio.setLayout(null);\r\n\r\n\r\n\t\tJLabel menufondito2 = new JLabel(new ImageIcon(\"Menufondo.png\"));\r\n\t\tmenufondito2.setBounds(0, 0, 977, 681);\r\n\t\tmenufondito2.setLayout(null);\r\n\t\tInicio.add(menufondito2);\r\n\r\n\t\tJPanel panelmenu = new JPanel();\r\n\t\tpanelmenu.setBackground(new Color(255, 255, 255));\r\n\t\tpanelmenu.setBounds(124, 33, 692, 539);\r\n\t\tpanelmenu.setLayout(null);\r\n\t\tpanelmenu.setOpaque(false);\r\n\t\tmenufondito2.add(panelmenu);\r\n\r\n\t\tJLabel logotipoInicio = new JLabel(new ImageIcon(\"iconochido.gif\"));\r\n\t\tlogotipoInicio.setBounds(300,0,120,150);\r\n\t\tpanelmenu.add(logotipoInicio);\r\n\r\n\t\tJLabel nombreLogoInicio = new JLabel(new ImageIcon(\"tituloR (1).png\"));\r\n\t\tnombreLogoInicio.setBounds(178,90,350,233);\r\n\t\tpanelmenu.add(nombreLogoInicio);\r\n\r\n\t\tJButton btnplatillos = new JButton(\"Platillos\\r\\n\");\r\n\t\tbtnplatillos.setFont(new Font(\"Arial Black\", Font.PLAIN, 20));\r\n\t\tbtnplatillos.setFocusable(false);\r\n\t\tbtnplatillos.setBackground(new Color(255, 128, 0));\r\n\t\tbtnplatillos.setBounds(53, 300, 279, 100);\r\n\t\tpanelmenu.add(btnplatillos);\r\n\r\n\t\tbtnplatillos.addActionListener(new ActionListener() {\r\n\t\t\t@Override\r\n\t\t\tpublic void actionPerformed(ActionEvent e) {\r\n\t\t\t\tremove(Inicio);\r\n\t\t\t\tadd(Platillos);\r\n\t\t\t\trepaint();\r\n\t\t\t\trevalidate();\r\n\t\t\t}\r\n\t\t});\r\n\r\n\r\n\t\tJButton btnNewButtonclientes = new JButton(\"Clientes\\r\\n\");\r\n\t\tbtnNewButtonclientes.setFont(new Font(\"Arial Black\", Font.PLAIN, 20));\r\n\t\tbtnNewButtonclientes.setFocusable(false);\r\n\t\tbtnNewButtonclientes.setBackground(new Color(255, 128, 0));\r\n\t\tbtnNewButtonclientes.setBounds(53, 420, 279, 100);\r\n\t\tpanelmenu.add(btnNewButtonclientes);\r\n\r\n\t\tbtnNewButtonclientes.addActionListener(new ActionListener() {\r\n\t\t\t@Override\r\n\t\t\tpublic void actionPerformed(ActionEvent e) {\r\n\t\t\t\tremove(Inicio);\r\n\t\t\t\tadd(Clientes);\r\n\t\t\t\trepaint();\r\n\t\t\t\trevalidate();\r\n\t\t\t}\r\n\t\t});\r\n\r\n\r\n\r\n\t\tJButton btnentrarinventario = new JButton(\"Inventario\\r\\n\");\r\n\t\tbtnentrarinventario.setFont(new Font(\"Arial Black\", Font.PLAIN, 20));\r\n\t\tbtnentrarinventario.setBackground(new Color(255, 128, 0));\r\n\t\tbtnentrarinventario.setFocusable(false);\r\n\t\tbtnentrarinventario.setBounds(364, 420, 279, 100);\r\n\t\tpanelmenu.add(btnentrarinventario);\r\n\r\n\t\tbtnentrarinventario.addActionListener(new ActionListener() {\r\n\t\t\t@Override\r\n\t\t\tpublic void actionPerformed(ActionEvent e) {\r\n\t\t\t\tremove(Inicio);\r\n\t\t\t\tadd(Inventario);\r\n\t\t\t\trepaint();\r\n\t\t\t\trevalidate();\r\n\t\t\t}\r\n\t\t});\r\n\r\n\r\n\t\tJButton btnNewButtonOrden = new JButton(\"Ordenes\\r\\n\");\r\n\t\tbtnNewButtonOrden.setFont(new Font(\"Arial Black\", Font.PLAIN, 20));\r\n\t\tbtnNewButtonOrden.setBackground(new Color(255, 128, 0));\r\n\t\tbtnNewButtonOrden.setFocusable(false);\r\n\t\tbtnNewButtonOrden.setBounds(364, 300, 279, 100);\r\n\t\tpanelmenu.add(btnNewButtonOrden);\r\n\r\n\t\tbtnNewButtonOrden.addActionListener(new ActionListener() {\r\n\t\t\t@Override\r\n\t\t\tpublic void actionPerformed(ActionEvent e) {\r\n\t\t\t\tremove(Inicio);\r\n\t\t\t\tadd(Ordenes);\r\n\t\t\t\trepaint();\r\n\t\t\t\trevalidate();\r\n\t\t\t}\r\n\t\t});\r\n\r\n\r\n\r\n\r\n\t\t//--------------------------------------------platillos---------------------------------------------------------\r\n\r\n\r\n\t\t//----Menu principal de platillos-----\r\n\r\n\r\n//\t\tcontentPane.add(Platillos);\r\n\t\tPlatillos.setLayout(null);\r\n\r\n\t\tJPanel panel = new JPanel();\r\n\t\tpanel.setBackground(new Color(255, 255, 255));\r\n\t\tpanel.setBounds(61, 241, 827, 347);\r\n\t\tpanel.setOpaque(false);\r\n\t\tPlatillos.add(panel);\r\n\t\tpanel.setLayout(null);\r\n\r\n\t\tJButton btnconsultar = new JButton(\"Consultar\");\r\n\t\tbtnconsultar.setBackground(new Color(255, 128, 0));\r\n\t\tbtnconsultar.setFocusable(false);\r\n\t\tbtnconsultar.setFont(new Font(\"Arial Black\", Font.PLAIN, 20));\r\n\t\tbtnconsultar.setBounds(183, 94, 217, 60);\r\n\t\tpanel.add(btnconsultar);\r\n\r\n\t\tbtnconsultar.addActionListener(new ActionListener() {\r\n\t\t\t@Override\r\n\t\t\tpublic void actionPerformed(ActionEvent e) {\r\n\t\t\t\tremove(Platillos);\r\n\t\t\t\tadd(ConsultaPlatillos);\r\n\t\t\t\trepaint();\r\n\t\t\t\trevalidate();\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\tJButton btnEditar = new JButton(\"Editar\");\r\n\t\tbtnEditar.setFont(new Font(\"Arial Black\", Font.PLAIN, 20));\r\n\t\tbtnEditar.setBackground(new Color(255, 128, 0));\r\n\t\tbtnEditar.setFocusable(false);\r\n\t\tbtnEditar.setBounds(430, 94, 217, 60);\r\n\t\tpanel.add(btnEditar);\r\n\r\n\t\tbtnEditar.addActionListener(new ActionListener() {\r\n\t\t\t@Override\r\n\t\t\tpublic void actionPerformed(ActionEvent e) {\r\n\t\t\t\tremove(Platillos);\r\n\t\t\t\tadd(EditarPlat);\r\n\t\t\t\trepaint();\r\n\t\t\t\trevalidate();\r\n\t\t\t}\r\n\t\t});\r\n\r\n\r\n\t\tJButton btnIngredientes = new JButton(\"Ingredientes\");\r\n\t\tbtnIngredientes.setFont(new Font(\"Arial Black\", Font.PLAIN, 20));\r\n\t\tbtnIngredientes.setBackground(new Color(255, 128, 0));\r\n\t\tbtnIngredientes.setBounds(183, 197, 217, 60);\r\n\t\tbtnIngredientes.setFocusable(false);\r\n\t\tpanel.add(btnIngredientes);\r\n\r\n\t\tbtnIngredientes.addActionListener(new ActionListener() {\r\n\t\t\t@Override\r\n\t\t\tpublic void actionPerformed(ActionEvent e) {\r\n\t\t\t\tremove(Platillos);\r\n\t\t\t\tadd(Platillosconingre);\r\n\t\t\t\trepaint();\r\n\t\t\t\trevalidate();\r\n\t\t\t}\r\n\t\t});\r\n\r\n\r\n\t\tJButton btnCrear = new JButton(\"Crear\");\r\n\t\tbtnCrear.setFont(new Font(\"Arial Black\", Font.PLAIN, 20));\r\n\t\tbtnCrear.setBackground(new Color(255, 128, 0));\r\n\t\tbtnCrear.setFocusable(false);\r\n\t\tbtnCrear.setBounds(430, 197, 217, 60);\r\n\t\tpanel.add(btnCrear);\r\n\r\n\t\tbtnCrear.addActionListener(new ActionListener() {\r\n\t\t\t@Override\r\n\t\t\tpublic void actionPerformed(ActionEvent e) {\r\n\t\t\t\tremove(Platillos);\r\n\t\t\t\tadd(Crearplat);\r\n\t\t\t\trepaint();\r\n\t\t\t\trevalidate();\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\tJLabel lblplatillos = new JLabel(new ImageIcon(\"menuplatillos (1).png\"));\r\n\t\tlblplatillos.setBounds(301, 51, 350, 233);\r\n\t\tPlatillos.add(lblplatillos);\r\n\r\n\t\tJButton backplatillos = new JButton(new ImageIcon(\"BotonRetroceder.png\"));\r\n\t\tbackplatillos.setBounds(10, 11, 35, 33);\r\n\t\tPlatillos.add(backplatillos);\r\n\r\n\t\tbackplatillos.addActionListener(new ActionListener() {\r\n\t\t\t@Override\r\n\t\t\tpublic void actionPerformed(ActionEvent e) {\r\n\t\t\t\tremove(Platillos);\r\n\t\t\t\tadd(Inicio);\r\n\t\t\t\trepaint();\r\n\t\t\t\trevalidate();\r\n\t\t\t}\r\n\t\t});\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// ----Consultar platillos-----\r\n\r\n\t\tConsultaPlatillos.setBackground(new Color(255, 128, 0));\r\n\t\tConsultaPlatillos.setLayout(null);\r\n\r\n\t\tDefaultListModel<String> model = new DefaultListModel<>();\r\n\r\n\t\tJLabel lblconsultaplatillos = new JLabel(\"Consultar Platillos\");\r\n\t\tlblconsultaplatillos.setFont(new Font(\"Arial Black\", Font.PLAIN, 26));\r\n\t\tlblconsultaplatillos.setBounds(360, 11, 300, 52);\r\n\t\tConsultaPlatillos.add(lblconsultaplatillos);\r\n\r\n\t\tJPanel panelplati = new JPanel();\r\n\t\tpanelplati.setBounds(37, 51, 877, 570);\r\n\t\tConsultaPlatillos.add(panelplati);\r\n\t\tpanelplati.setLayout(null);\r\n\r\n\t\tJPanel panelplati_1 = new JPanel();\r\n\t\tpanelplati_1.setBackground(new Color(255, 255, 255));\r\n\t\tpanelplati_1.setBounds(433, 5, 444, 565);\r\n\t\tpanelplati.add(panelplati_1);\r\n\t\tpanelplati_1.setLayout(null);\r\n\r\n\t\tJLabel lblNewLabel_2 = new JLabel(\"Detalles del platillo\\r\\n\");\r\n\t\tlblNewLabel_2.setFont(new Font(\"Arial Black\", Font.PLAIN, 26));\r\n\t\tlblNewLabel_2.setBounds(111, 11, 300, 61);\r\n\t\tpanelplati_1.add(lblNewLabel_2);\r\n\r\n\t\tJLabel lblNewLabel_2_1 = new JLabel(\"Platillo: \\r\\n\");\r\n\t\tlblNewLabel_2_1.setFont(new Font(\"Arial Black\", Font.PLAIN, 21));\r\n\t\tlblNewLabel_2_1.setBounds(22, 111, 264, 61);\r\n\t\tpanelplati_1.add(lblNewLabel_2_1);\r\n\r\n\t\tJLabel lblNewLabel_2_1_2 = new JLabel(\"Precio: \");\r\n\t\tlblNewLabel_2_1_2.setFont(new Font(\"Arial Black\", Font.PLAIN, 20));\r\n\t\tlblNewLabel_2_1_2.setBounds(22, 389, 400, 61);\r\n\t\tpanelplati_1.add(lblNewLabel_2_1_2);\r\n\r\n\t\tJTextArea txtrDescripcinDescubreNuestro = new JTextArea();\r\n\t\ttxtrDescripcinDescubreNuestro.setFont(new Font(\"Arial Black\", Font.PLAIN, 19));\r\n\t\ttxtrDescripcinDescubreNuestro.setTabSize(10);\r\n\t\ttxtrDescripcinDescubreNuestro.setText(\"Descripci√≥n: \");\r\n\t\ttxtrDescripcinDescubreNuestro.setBounds(22, 201, 399, 177);\r\n\t\tpanelplati_1.add(txtrDescripcinDescubreNuestro);\r\n\r\n\t\tJPanel panel_3 = new JPanel();\r\n\t\tpanel_3.setBackground(new Color(255, 128, 0));\r\n\t\tpanel_3.setBounds(47, 459, 331, 70);\r\n\t\tpanelplati_1.add(panel_3);\r\n\t\tpanel_3.setLayout(null);\r\n\r\n\t\tJButton btnIngredientes2 = new JButton(\"Ingredientes\");\r\n\t\tbtnIngredientes2.setFont(new Font(\"Arial Black\", Font.PLAIN, 35));\r\n\t\tbtnIngredientes2.setBackground(new Color(255, 128, 0));\r\n\t\tbtnIngredientes2.setFocusable(false);\r\n\t\tbtnIngredientes2.setOpaque(true);\r\n\t\tbtnIngredientes2.setBounds(0, 0, 331, 70);\r\n\t\tpanel_3.add(btnIngredientes2);\r\n\r\n\r\n\r\n\t\tString[] nombrecolumns = {\"Platillo\"};\r\n\t\tObject[][] data = {\r\n\r\n\t\t};\r\n\r\n\t\tDefaultTableModel tablemodelconsultaplat = new DefaultTableModel(data, nombrecolumns);\r\n\r\n\t\ttry {\r\n\t\t\tConnection connection = DriverManager.getConnection(\"jdbc:mysql://localhost:3306/platillos\", \"root\", \"root\");\r\n\t\t\tStatement statement = connection.createStatement();\r\n\t\t\tResultSet tableResultSet = statement.executeQuery(\"SHOW TABLES\");\r\n\r\n\t\t\twhile (tableResultSet.next()) {\r\n\t\t\t\tString tableName = tableResultSet.getString(1);\r\n\t\t\t\ttablemodelconsultaplat.addRow(new Object[]{tableName});\r\n\t\t\t}\r\n\r\n\t\t\ttableResultSet.close();\r\n\t\t\tstatement.close();\r\n\t\t\tconnection.close();\r\n\t\t} catch (SQLException e) {\r\n\t\t\te.printStackTrace();\r\n\t\t}\r\n\r\n\r\n\t\tJLabel lblNewLabel_1 = new JLabel(\"Seleccione platillo\");\r\n\t\tlblNewLabel_1.setFont(new Font(\"Arial Black\", Font.PLAIN, 16));\r\n\t\tlblNewLabel_1.setBounds(100, 5, 300, 36);\r\n\t\tpanelplati.add(lblNewLabel_1);\r\n\r\n\t\tJButton btnbackconsultaplat = new JButton(new ImageIcon(\"BotonRetroceder.png\"));\r\n\t\tbtnbackconsultaplat.setBounds(10, 11, 35, 33);\r\n\t\tConsultaPlatillos.add(btnbackconsultaplat);\r\n\r\n\t\tbtnbackconsultaplat.addActionListener(new ActionListener() {\r\n\t\t\t@Override\r\n\t\t\tpublic void actionPerformed(ActionEvent e) {\r\n\t\t\t\tremove(ConsultaPlatillos);\r\n\t\t\t\tadd(Platillos);\r\n\t\t\t\trepaint();\r\n\t\t\t\trevalidate();\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\tJTable consultaplattable = new JTable(tablemodelconsultaplat);\r\n\r\n\t\tconsultaplattable.setModel(tablemodelconsultaplat);\r\n\r\n\t\tJScrollPane scrollconsultaplattable = new JScrollPane(consultaplattable);\r\n\t\tscrollconsultaplattable.setBounds(35, 40, 288, 519);\r\n\t\tpanelplati.add(scrollconsultaplattable);\r\n\r\n\r\n\t\t// ...\r\n\r\n\t\tMouseListener tableRowMouseListener = new MouseAdapter() {\r\n\t\t\t@Override\r\n\t\t\tpublic void mouseClicked(MouseEvent e) {\r\n\t\t\t\tint rowIndex = consultaplattable.getSelectedRow();\r\n\r\n\t\t\t\tif (rowIndex != -1) {\r\n\t\t\t\t\tString tableName = tablemodelconsultaplat.getValueAt(rowIndex, 0).toString();\r\n\r\n\t\t\t\t\ttry {\r\n\t\t\t\t\t\tConnection connection = DriverManager.getConnection(\"jdbc:mysql://localhost:3306/platillos\", \"root\", \"root\");\r\n\t\t\t\t\t\tStatement statement = connection.createStatement();\r\n\t\t\t\t\t\tResultSet resultSet = statement.executeQuery(\"SELECT * FROM \" + tableName);\r\n\r\n\t\t\t\t\t\tif (resultSet.next()) {\r\n\t\t\t\t\t\t\tString precio = resultSet.getString(\"precio\");\r\n\t\t\t\t\t\t\tString descripcion = resultSet.getString(\"descripcion\");\r\n\r\n\t\t\t\t\t\t\tlblNewLabel_2_1.setText(\"Platillo: \" + tableName);\r\n\t\t\t\t\t\t\tlblNewLabel_2_1_2.setText(\"Precio: \" + precio);\r\n\t\t\t\t\t\t\ttxtrDescripcinDescubreNuestro.setText(\"Descripcion: \" + descripcion);\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tresultSet.close();\r\n\t\t\t\t\t\tstatement.close();\r\n\t\t\t\t\t\tconnection.close();\r\n\t\t\t\t\t} catch (SQLException ex) {\r\n\t\t\t\t\t\tex.printStackTrace();\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\tbtnIngredientes2.addActionListener(new ActionListener() {\r\n\t\t\t@Override\r\n\t\t\tpublic void actionPerformed(ActionEvent e) {\r\n\t\t\t\tint selectedRowIndex = consultaplattable.getSelectedRow();\r\n\r\n\t\t\t\tif (selectedRowIndex != -1) {\r\n\t\t\t\t\tString tableName = tablemodelconsultaplat.getValueAt(selectedRowIndex, 0).toString();\r\n\r\n\t\t\t\t\ttry {\r\n\t\t\t\t\t\tConnection connection = DriverManager.getConnection(\"jdbc:mysql://localhost:3306/platillos\", \"root\", \"root\");\r\n\t\t\t\t\t\tStatement statement = connection.createStatement();\r\n\t\t\t\t\t\tResultSet resultSet = statement.executeQuery(\"SELECT * FROM \" + tableName);\r\n\r\n\t\t\t\t\t\tStringBuilder ingredientesBuilder = new StringBuilder();\r\n\t\t\t\t\t\twhile (resultSet.next()) {\r\n\t\t\t\t\t\t\tString ingredientes = resultSet.getString(\"Ingrediente\");\r\n\t\t\t\t\t\t\tingredientesBuilder.append(ingredientes).append(\"\\n\");\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tString allIngredientes = ingredientesBuilder.toString().trim();\r\n\r\n\t\t\t\t\t\tJFrame ingredientsFrame = new JFrame(\"Ingredientes del Platillo\");\r\n\t\t\t\t\t\tingredientsFrame.setSize(400, 300);\r\n\t\t\t\t\t\tingredientsFrame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);\r\n\t\t\t\t\t\tingredientsFrame.setLayout(new BorderLayout());\r\n\r\n\t\t\t\t\t\tJTextArea textArea = new JTextArea(allIngredientes);\r\n\t\t\t\t\t\ttextArea.setFont(new Font(\"Tahoma\", Font.PLAIN, 16));\r\n\t\t\t\t\t\ttextArea.setEditable(false);\r\n\t\t\t\t\t\tJScrollPane scrollPane = new JScrollPane(textArea);\r\n\t\t\t\t\t\tingredientsFrame.add(scrollPane, BorderLayout.CENTER);\r\n\r\n\t\t\t\t\t\tJButton btnClose = new JButton(\"Close\");\r\n\t\t\t\t\t\tbtnClose.addActionListener(new ActionListener() {\r\n\t\t\t\t\t\t\t@Override\r\n\t\t\t\t\t\t\tpublic void actionPerformed(ActionEvent e) {\r\n\t\t\t\t\t\t\t\tingredientsFrame.setVisible(false);\r\n\t\t\t\t\t\t\t\tingredientsFrame.dispose();\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t\tingredientsFrame.add(btnClose, BorderLayout.SOUTH);\r\n\r\n\t\t\t\t\t\tingredientsFrame.setVisible(true);\r\n\r\n\t\t\t\t\t\tresultSet.close();\r\n\t\t\t\t\t\tstatement.close();\r\n\t\t\t\t\t\tconnection.close();\r\n\t\t\t\t\t} catch (SQLException ex) {\r\n\t\t\t\t\t\tex.printStackTrace();\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\r\n\r\n\r\n\t\tconsultaplattable.addMouseListener(tableRowMouseListener);\r\n\r\n\t\tTimer timer = new Timer(5000, new ActionListener() {\r\n\t\t\t@Override\r\n\t\t\tpublic void actionPerformed(ActionEvent e) {\r\n\r\n\t\t\t\ttablemodelconsultaplat.setRowCount(0);\r\n\r\n\t\t\t\ttry {\r\n\t\t\t\t\tConnection connection = DriverManager.getConnection(\"jdbc:mysql://localhost:3306/platillos\", \"root\", \"root\");\r\n\t\t\t\t\tStatement statement = connection.createStatement();\r\n\t\t\t\t\tResultSet tableResultSet = statement.executeQuery(\"SHOW TABLES\");\r\n\r\n\t\t\t\t\twhile (tableResultSet.next()) {\r\n\t\t\t\t\t\tString tableName = tableResultSet.getString(1);\r\n\t\t\t\t\t\ttablemodelconsultaplat.addRow(new Object[]{tableName});\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\ttableResultSet.close();\r\n\t\t\t\t\tstatement.close();\r\n\t\t\t\t\tconnection.close();\r\n\t\t\t\t} catch (SQLException ex) {\r\n\t\t\t\t\tex.printStackTrace();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\ttimer.start();\r\n\r\n\r\n\r\n\t\t/*\r\n// Create a custom MouseListener for the table rows\r\n\t\tMouseListener tableRowMouseListener = new MouseAdapter() {\r\n\t\t\t@Override\r\n\t\t\tpublic void mouseClicked(MouseEvent e) {\r\n\t\t\t\t// Get the selected row index\r\n\t\t\t\tint rowIndex = consultaplattable.getSelectedRow();\r\n\r\n\t\t\t\t// Perform actions based on the selected row\r\n\t\t\t\tif (rowIndex != -1) {\r\n\t\t\t\t\t// Assuming the table name is stored in the first column (index 0)\r\n\t\t\t\t\tString tableName = tablemodelconsultaplat.getValueAt(rowIndex, 0).toString();\r\n\r\n\t\t\t\t\t// Fetch the details from the respective table in the database\r\n\t\t\t\t\ttry {\r\n\t\t\t\t\t\tConnection connection = DriverManager.getConnection(\"jdbc:mysql://localhost:3306/platillos\", \"root\", \"root\");\r\n\t\t\t\t\t\tStatement statement = connection.createStatement();\r\n\t\t\t\t\t\tResultSet resultSet = statement.executeQuery(\"SELECT * FROM \" + tableName);\r\n\r\n\t\t\t\t\t\t// Assuming \"precio\" and \"descripcion\" are the column names in the table\r\n\t\t\t\t\t\tif (resultSet.next()) {\r\n\t\t\t\t\t\t\tString precio = resultSet.getString(\"precio\");\r\n\t\t\t\t\t\t\tString descripcion = resultSet.getString(\"descripcion\");\r\n\r\n\t\t\t\t\t\t\t// Update the JLabels with the retrieved information\r\n\t\t\t\t\t\t\tlblNewLabel_2_1.setText(\"Platillo: \" + tableName);\r\n\t\t\t\t\t\t\tlblNewLabel_2_1_2.setText(\"Precio: \" + precio);\r\n\t\t\t\t\t\t\ttxtrDescripcinDescubreNuestro.setText(descripcion);\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tresultSet.close();\r\n\t\t\t\t\t\tstatement.close();\r\n\t\t\t\t\t\tconnection.close();\r\n\t\t\t\t\t} catch (SQLException ex) {\r\n\t\t\t\t\t\tex.printStackTrace();\r\n\t\t\t\t\t\t// Handle the exception if an error occurs while fetching data from the database\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t};\r\n\r\n// Add the custom MouseListener to the JTable\r\n\t\tconsultaplattable.addMouseListener(tableRowMouseListener);\r\n\r\n// ...\r\n*/\r\n\r\n\r\n\r\n\r\n\r\n\r\n\t\t//----Crear Platillos-----\r\n\r\n\t\tCrearplat.setBackground(new Color(255, 128, 0));\r\n\t\tCrearplat.setBounds(0, 0, 961, 642);\r\n\t\t//\tcontentPane.add(Crearplat);\r\n\t\tCrearplat.setLayout(null);\r\n\r\n\r\n\r\n\t\tJPanel panelcrearplat = new JPanel();\r\n\t\tpanelcrearplat.setBackground(new Color(255, 218, 168));\r\n\t\tpanelcrearplat.setBounds(10, 45, 930, 580);\r\n\t\tCrearplat.add(panelcrearplat);\r\n\t\tpanelcrearplat.setLayout(null);\r\n\r\n\r\n\t\tJTextField NombrePlatCrearField = new JTextField();\r\n\t\tNombrePlatCrearField.setColumns(10);\r\n\t\tNombrePlatCrearField.setBounds(23, 41, 372, 33);\r\n\t\tpanelcrearplat.add(NombrePlatCrearField);\r\n\r\n\t\tJTextField PreciocrearPlat = new JTextField();\r\n\t\tPreciocrearPlat.setColumns(10);\r\n\t\tPreciocrearPlat.setBounds(23, 495, 372, 33);\r\n\t\tpanelcrearplat.add(PreciocrearPlat);\r\n\r\n\t\tJTextArea Descripcionareacrear = new JTextArea();\r\n\t\tDescripcionareacrear.setBounds(23, 359, 372, 101);\r\n\t\tpanelcrearplat.add(Descripcionareacrear);\r\n\r\n\t\tJComboBox ingredienteboxcrear = new JComboBox();\r\n\t\tingredienteboxcrear.setBounds(23, 108, 372, 33);\r\n\t\tpanelcrearplat.add(ingredienteboxcrear);\r\n\r\n\t\tJLabel nombreplatcrearlaberl = new JLabel(\"Nombre del Platillo:\");\r\n\t\tnombreplatcrearlaberl.setFont(new Font(\"Arial Black\", Font.PLAIN, 20));\r\n\t\tnombreplatcrearlaberl.setBounds(23, 11, 242, 19);\r\n\t\tpanelcrearplat.add(nombreplatcrearlaberl);\r\n\r\n\t\tJLabel comboingredcrear = new JLabel(\"Ingredientes y unidad\\r\\n:\\r\\n\");\r\n\t\tcomboingredcrear.setFont(new Font(\"Arial Black\", Font.PLAIN, 20));\r\n\t\tcomboingredcrear.setBounds(23, 74, 265, 37);\r\n\t\tpanelcrearplat.add(comboingredcrear);\r\n\r\n\t\tJLabel Descripcioncrearplatlabel = new JLabel(\"Descripci√≥n:\");\r\n\t\tDescripcioncrearplatlabel.setFont(new Font(\"Arial Black\", Font.PLAIN, 20));\r\n\t\tDescripcioncrearplatlabel.setBounds(23, 315, 331, 33);\r\n\t\tpanelcrearplat.add(Descripcioncrearplatlabel);\r\n\r\n\t\tJLabel lblPreciocrearplat = new JLabel(\"Precio:\");\r\n\t\tlblPreciocrearplat.setFont(new Font(\"Arial Black\", Font.PLAIN, 20));\r\n\t\tlblPreciocrearplat.setBounds(23, 460, 293, 33);\r\n\t\tpanelcrearplat.add(lblPreciocrearplat);\r\n\r\n\t\tJButton btnCrearPlat = new JButton(\"Crear\");\r\n\t\tbtnCrearPlat.setFont(new Font(\"Arial Black\", Font.PLAIN, 20));\r\n\t\tbtnCrearPlat.setBackground(new Color(254, 211, 122));\r\n\t\tbtnCrearPlat.setBounds(434, 526, 150, 43);\r\n\t\tpanelcrearplat.add(btnCrearPlat);\r\n\r\n\t\tJButton btnadjuntarimagen = new JButton(\"Adjuntar Imagen\\r\\n\");\r\n\t\tbtnadjuntarimagen.setFont(new Font(\"Arial Black\", Font.PLAIN, 16));\r\n\t\tbtnadjuntarimagen.setBackground(new Color(254, 211, 122));\r\n\t\tbtnadjuntarimagen.setBounds(704, 444, 211, 43);\r\n\t\tpanelcrearplat.add(btnadjuntarimagen);\r\n\r\n\t\tJTextField cantidadingrediente2 = new JTextField();\r\n\t\tcantidadingrediente2.setColumns(10);\r\n\t\tcantidadingrediente2.setBounds(23, 177, 372, 33);\r\n\t\tpanelcrearplat.add(cantidadingrediente2);\r\n\r\n\t\tJLabel Cantidadinglbl = new JLabel(\"Cantidad del ingrediente\\r\\n\");\r\n\t\tCantidadinglbl.setFont(new Font(\"Arial Black\", Font.PLAIN, 20));\r\n\t\tCantidadinglbl.setBounds(23, 147, 300, 33);\r\n\t\tpanelcrearplat.add(Cantidadinglbl);\r\n\r\n\t\tJButton btnAadirIngrediente = new JButton(\"A√±adir ingrediente\\r\\n\");\r\n\t\tbtnAadirIngrediente.setFont(new Font(\"Arial Black\", Font.PLAIN, 16));\r\n\t\tbtnAadirIngrediente.setBackground(new Color(254, 211, 122));\r\n\t\tbtnAadirIngrediente.setBounds(23, 224, 211, 43);\r\n\t\tpanelcrearplat.add(btnAadirIngrediente);\r\n\r\n\r\n\t\tJButton btncrearplat2 = new JButton(\"Crear\");\r\n\t\tbtncrearplat2.setFont(new Font(\"Arial Black\", Font.PLAIN, 20));\r\n\t\tbtncrearplat2.setBackground(new Color(254, 211, 122));\r\n\t\tbtncrearplat2.setBounds(434, 526, 150, 43);\r\n\t\tpanelcrearplat.add(btncrearplat2);\r\n\r\n\r\n\t\tJButton btnAdjuntarImagen2 = new JButton(\"Adjuntar Imagen\\r\\n\");\r\n\t\tbtnAdjuntarImagen2.setFont(new Font(\"Arial Black\", Font.PLAIN, 16));\r\n\t\tbtnAdjuntarImagen2.setBackground(new Color(254, 211, 122));\r\n\t\tbtnAdjuntarImagen2.setBounds(704, 444, 211, 43);\r\n\t\tpanelcrearplat.add(btnAdjuntarImagen2);\r\n\r\n\t\tJLabel Crearplatlbl = new JLabel(\"Crear Platillo\");\r\n\t\tCrearplatlbl.setFont(new Font(\"Arial Black\", Font.PLAIN, 26));\r\n\t\tCrearplatlbl.setBounds(387, 0, 227, 40);\r\n\t\tCrearplat.add(Crearplatlbl);\r\n\r\n\r\n\t\tbtnCrearPlat.addActionListener(new ActionListener() {\r\n\t\t\t@Override\r\n\t\t\tpublic void actionPerformed(ActionEvent e) {\r\n\t\t\t\tString tableName = NombrePlatCrearField.getText();\r\n\t\t\t\tString precio = PreciocrearPlat.getText().isEmpty() ? null : PreciocrearPlat.getText();\r\n\t\t\t\tString[] ingredienteData = ingredienteboxcrear.getSelectedItem().toString().split(\" - \");\r\n\t\t\t\tString ingrediente = ingredienteData[0];\r\n\t\t\t\tString unidad = ingredienteData[1];\r\n\t\t\t\tString cantidad = cantidadingrediente2.getText().isEmpty() ? null : cantidadingrediente2.getText();\r\n\t\t\t\tString descripcion = Descripcionareacrear.getText();\r\n\r\n\t\t\t\tif (cantidadingrediente2.getText().isEmpty() || PreciocrearPlat.getText().isEmpty() || Descripcionareacrear.getText().isEmpty()) {\r\n\t\t\t\t\tJOptionPane.showMessageDialog(null, \"Please fill in all the required fields\");\r\n\t\t\t\t} else {\r\n\t\t\t\t\tString url = \"jdbc:mysql://localhost:3306/platillos\";\r\n\t\t\t\t\tString username = \"root\";\r\n\t\t\t\t\tString password = \"root\";\r\n\r\n\t\t\t\t\ttry (Connection connection = DriverManager.getConnection(url, username, password)) {\r\n\t\t\t\t\t\tDatabaseMetaData metaData = connection.getMetaData();\r\n\t\t\t\t\t\tResultSet resultSet = metaData.getTables(null, null, tableName, null);\r\n\r\n\t\t\t\t\t\tif (resultSet.next()) {\r\n\t\t\t\t\t\t\tJOptionPane.showMessageDialog(null, \"Para editar platillo, vaya a la secci√≥n de editar\");\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tStatement statement = connection.createStatement();\r\n\r\n\t\t\t\t\t\t\tString createTableQuery = \"CREATE TABLE IF NOT EXISTS \" + tableName + \" (Precio FLOAT, Ingrediente VARCHAR(50), Unidad VARCHAR(50), Cantidad FLOAT, Descripcion VARCHAR(255))\";\r\n\t\t\t\t\t\t\tstatement.executeUpdate(createTableQuery);\r\n\r\n\t\t\t\t\t\t\tString insertDataQuery = \"INSERT INTO \" + tableName + \" (Precio, Ingrediente, Unidad, Cantidad, Descripcion) VALUES (?, ?, ?, ?, ?)\";\r\n\t\t\t\t\t\t\tPreparedStatement preparedStatement = connection.prepareStatement(insertDataQuery);\r\n\t\t\t\t\t\t\tif (precio == null) {\r\n\t\t\t\t\t\t\t\tpreparedStatement.setNull(1, Types.FLOAT);\r\n\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\tpreparedStatement.setFloat(1, Float.parseFloat(precio));\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tpreparedStatement.setString(2, ingrediente);\r\n\t\t\t\t\t\t\tpreparedStatement.setString(3, unidad);\r\n\t\t\t\t\t\t\tif (cantidad == null) {\r\n\t\t\t\t\t\t\t\tpreparedStatement.setNull(4, Types.FLOAT);\r\n\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\tpreparedStatement.setFloat(4, Float.parseFloat(cantidad));\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tpreparedStatement.setString(5, descripcion);\r\n\t\t\t\t\t\t\tpreparedStatement.executeUpdate();\r\n\r\n\t\t\t\t\t\t\tSystem.out.println(\"Data inserted successfully!\");\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t} catch (SQLException ex) {\r\n\t\t\t\t\t\tex.printStackTrace();\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\r\n\r\n\r\n\r\n\t\tbtnAadirIngrediente.addActionListener(new ActionListener() {\r\n\t\t\t@Override\r\n\t\t\tpublic void actionPerformed(ActionEvent e) {\r\n\t\t\t\tString tableName = NombrePlatCrearField.getText();\r\n\r\n\t\t\t\tString[] ingredienteData = ingredienteboxcrear.getSelectedItem().toString().split(\" - \");\r\n\t\t\t\tString ingrediente = ingredienteData[0];\r\n\t\t\t\tString unidad = ingredienteData[1];\r\n\t\t\t\tString cantidad = cantidadingrediente2.getText();\r\n\t\t\t\tString precio = PreciocrearPlat.getText();\r\n\r\n\t\t\t\tif (!ingredientExists(tableName, ingrediente)) {\r\n\t\t\t\t\tString url = \"jdbc:mysql://localhost:3306/platillos\";\r\n\t\t\t\t\tString username = \"your-username\";\r\n\t\t\t\t\tString password = \"your-password\";\r\n\r\n\t\t\t\t\ttry (Connection connection = DriverManager.getConnection(url, username, password)) {\r\n\t\t\t\t\t\tStatement statement = connection.createStatement();\r\n\r\n\t\t\t\t\t\tString insertDataQuery = \"INSERT INTO \" + tableName + \" (Precio, Ingrediente, Unidad, Cantidad) VALUES (?, ?, ?, ?)\";\r\n\t\t\t\t\t\tPreparedStatement preparedStatement = connection.prepareStatement(insertDataQuery);\r\n\r\n\t\t\t\t\t\t// Check and handle empty values\r\n\t\t\t\t\t\tif (precio == null || precio.isEmpty()) {\r\n\t\t\t\t\t\t\tpreparedStatement.setNull(1, Types.FLOAT);\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tpreparedStatement.setFloat(1, Float.parseFloat(precio));\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tpreparedStatement.setString(2, ingrediente);\r\n\t\t\t\t\t\tpreparedStatement.setString(3, unidad);\r\n\t\t\t\t\t\tif (cantidad == null || cantidad.isEmpty()) {\r\n\t\t\t\t\t\t\tpreparedStatement.setNull(4, Types.FLOAT);\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tpreparedStatement.setFloat(4, Float.parseFloat(cantidad));\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tpreparedStatement.executeUpdate();\r\n\r\n\t\t\t\t\t\tJOptionPane.showMessageDialog(null, \"Ingrediente a√±adido correctamente\");\r\n\t\t\t\t\t} catch (SQLException ex) {\r\n\t\t\t\t\t\tex.printStackTrace();\r\n\t\t\t\t\t}\r\n\t\t\t\t} else {\r\n\t\t\t\t\tJOptionPane.showMessageDialog(null, \"Ingrediente ya existe en el platillo\");\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\r\n\r\n\r\n\r\n\r\n\t\tJButton btnbackcrearplatillos = new JButton(new ImageIcon(\"BotonRetroceder.png\"));\r\n\t\tbtnbackcrearplatillos.setBounds(10, 11, 35, 33);\r\n\t\tCrearplat.add(btnbackcrearplatillos);\r\n\r\n\r\n\t\tString url2 = \"jdbc:mysql://localhost:3306/clientes\";\r\n\t\tString username2 = \"your-username\";\r\n\t\tString password2 = \"your-password\";\r\n\r\n\t\ttry (Connection connection = DriverManager.getConnection(url2, username2, password2)) {\r\n\t\t\tStatement statement = connection.createStatement();\r\n\r\n\t\t\tString query = \"SELECT Nombre, Unidad FROM inventario\";\r\n\t\t\tResultSet resultSet = statement.executeQuery(query);\r\n\r\n\t\t\twhile (resultSet.next()) {\r\n\t\t\t\tString nombre = resultSet.getString(\"Nombre\");\r\n\t\t\t\tString unidad = resultSet.getString(\"Unidad\");\r\n\t\t\t\tString displayValue = nombre + \" - \" + unidad;\r\n\t\t\t\tingredienteboxcrear.addItem(displayValue);\r\n\t\t\t}\r\n\t\t} catch (SQLException ex) {\r\n\t\t\tex.printStackTrace();\r\n\t\t}\r\n\r\n\t\tTimer timer7 = new Timer(15000, new ActionListener() {\r\n\t\t\t@Override\r\n\t\t\tpublic void actionPerformed(ActionEvent e) {\r\n\t\t\t\t// Clear the existing items in the ingredienteboxcrear JComboBox\r\n\t\t\t\tingredienteboxcrear.removeAllItems();\r\n\r\n\t\t\t\t// Re-populate the ingredienteboxcrear JComboBox with updated data\r\n\t\t\t\ttry (Connection connection = DriverManager.getConnection(url2, username2, password2)) {\r\n\t\t\t\t\tStatement statement = connection.createStatement();\r\n\r\n\t\t\t\t\tString query = \"SELECT Nombre, Unidad FROM inventario\";\r\n\t\t\t\t\tResultSet resultSet = statement.executeQuery(query);\r\n\r\n\t\t\t\t\twhile (resultSet.next()) {\r\n\t\t\t\t\t\tString nombre = resultSet.getString(\"Nombre\");\r\n\t\t\t\t\t\tString unidad = resultSet.getString(\"Unidad\");\r\n\t\t\t\t\t\tString displayValue = nombre + \" - \" + unidad;\r\n\t\t\t\t\t\tingredienteboxcrear.addItem(displayValue);\r\n\t\t\t\t\t}\r\n\t\t\t\t} catch (SQLException ex) {\r\n\t\t\t\t\tex.printStackTrace();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\ttimer7.start();\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\t\tbtnbackcrearplatillos.addActionListener(new ActionListener() {\r\n\t\t\t@Override\r\n\t\t\tpublic void actionPerformed(ActionEvent e) {\r\n\t\t\t\tremove(Crearplat);\r\n\t\t\t\tadd(Platillos);\r\n\t\t\t\trepaint();\r\n\t\t\t\trevalidate();\r\n\t\t\t}\r\n\t\t});\r\n\r\n\r\n\r\n\t\t//----Editar Platillos-----\r\n\r\n\r\n\t\tEditarPlat.setBackground(new Color(255, 128, 64));\r\n\t\tEditarPlat.setBounds(0, 0, 961, 642);\r\n\t\t//\tcontentPane.add(EditarPlat);\r\n\t\tEditarPlat.setLayout(null);\r\n\r\n\r\n\r\n\r\n\t\tJPanel paneledplat = new JPanel();\r\n\t\tpaneledplat.setBackground(new Color(255, 218, 168));\r\n\t\tpaneledplat.setBounds(10, 59, 930, 572);\r\n\t\tEditarPlat.add(paneledplat);\r\n\t\tpaneledplat.setLayout(null);\r\n\r\n\r\n\t\tJTextField NombrePlatEdField = new JTextField();\r\n\t\tNombrePlatEdField.setColumns(10);\r\n\t\tNombrePlatEdField.setBounds(23, 112, 372, 33);\r\n\t\tpaneledplat.add(NombrePlatEdField);\r\n\r\n\t\tJTextField PrecioEdPlat = new JTextField();\r\n\t\tPrecioEdPlat.setColumns(10);\r\n\t\tPrecioEdPlat.setBounds(23, 504, 372, 33);\r\n\t\tpaneledplat.add(PrecioEdPlat);\r\n\r\n\t\tJTextArea Descripcionareaediplat = new JTextArea();\r\n\t\tDescripcionareaediplat.setBounds(23, 374, 372, 101);\r\n\t\tpaneledplat.add(Descripcionareaediplat);\r\n\r\n\t\tJComboBox ingredientebox = new JComboBox();\r\n\t\tingredientebox.setBounds(23, 179, 372, 33);\r\n\t\tpaneledplat.add(ingredientebox);\r\n\r\n\t\tJLabel nombreplatedilbl = new JLabel(\"Nombre del Platillo:\");\r\n\t\tnombreplatedilbl.setFont(new Font(\"Arial Black\", Font.PLAIN, 20));\r\n\t\tnombreplatedilbl.setBounds(23, 92, 242, 19);\r\n\t\tpaneledplat.add(nombreplatedilbl);\r\n\r\n\t\tJLabel lblIngredientes = new JLabel(\"Ingredientes del platillo:\\r\\n\");\r\n\t\tlblIngredientes.setFont(new Font(\"Arial Black\", Font.PLAIN, 20));\r\n\t\tlblIngredientes.setBounds(23, 145, 300, 37);\r\n\t\tpaneledplat.add(lblIngredientes);\r\n\r\n\t\tJLabel lblDescripcin = new JLabel(\"Descripci√≥n:\");\r\n\t\tlblDescripcin.setFont(new Font(\"Arial Black\", Font.PLAIN, 20));\r\n\t\tlblDescripcin.setBounds(23, 341, 331, 33);\r\n\t\tpaneledplat.add(lblDescripcin);\r\n\r\n\t\tJLabel lblPrecio = new JLabel(\"Precio:\");\r\n\t\tlblPrecio.setFont(new Font(\"Arial Black\", Font.PLAIN, 20));\r\n\t\tlblPrecio.setBounds(23, 470, 293, 33);\r\n\t\tpaneledplat.add(lblPrecio);\r\n\r\n\t\tJButton btnEditarPlat = new JButton(\"Editar\\r\\n\");\r\n\t\tbtnEditarPlat.setFont(new Font(\"Arial Black\", Font.PLAIN, 20));\r\n\t\tbtnEditarPlat.setBackground(new Color(254, 211, 122));\r\n\t\tbtnEditarPlat.setBounds(404, 536, 150, 33);\r\n\t\tpaneledplat.add(btnEditarPlat);\r\n\r\n\t\tJButton btnAdjuntarImagen = new JButton(\"Adjuntar Imagen\\r\\n\");\r\n\t\tbtnAdjuntarImagen.setFont(new Font(\"Arial Black\", Font.PLAIN, 16));\r\n\t\tbtnAdjuntarImagen.setBackground(new Color(254, 211, 122));\r\n\t\tbtnAdjuntarImagen.setBounds(553, 391, 211, 43);\r\n\t\tpaneledplat.add(btnAdjuntarImagen);\r\n\r\n\t\tJComboBox Platilloaeditarbox = new JComboBox();\r\n\t\tPlatilloaeditarbox.setBounds(23, 48, 372, 33);\r\n\t\tpaneledplat.add(Platilloaeditarbox);\r\n\r\n\t\tJLabel seleccionediplat = new JLabel(\"Escoja platillo a editar\\r\\n\");\r\n\t\tseleccionediplat.setFont(new Font(\"Arial Black\", Font.PLAIN, 20));\r\n\t\tseleccionediplat.setBounds(23, 18, 300, 33);\r\n\t\tpaneledplat.add(seleccionediplat);\r\n\r\n\t\tJButton btnEliminarIngredienteedi = new JButton(\"Eliminar ingrediente\\r\\n\");\r\n\t\tbtnEliminarIngredienteedi.setFont(new Font(\"Arial Black\", Font.PLAIN, 16));\r\n\t\tbtnEliminarIngredienteedi.setBackground(new Color(254, 211, 122));\r\n\t\tbtnEliminarIngredienteedi.setBounds(23, 249, 230, 43);\r\n\t\tpaneledplat.add(btnEliminarIngredienteedi);\r\n\r\n\t\tJComboBox ingredientebox_1 = new JComboBox();\r\n\t\tingredientebox_1.setBounds(475, 149, 372, 33);\r\n\t\tpaneledplat.add(ingredientebox_1);\r\n\r\n\t\tJButton btnediAadirIngrediente = new JButton(\"A√±adir ingrediente\\r\\n\");\r\n\t\tbtnediAadirIngrediente.setFont(new Font(\"Arial Black\", Font.PLAIN, 16));\r\n\t\tbtnediAadirIngrediente.setBackground(new Color(254, 211, 122));\r\n\t\tbtnediAadirIngrediente.setBounds(475, 281, 211, 43);\r\n\t\tpaneledplat.add(btnediAadirIngrediente);\r\n\r\n\t\tJLabel comoingreeditarplat = new JLabel(\"Ingredientes y unidad\\r\\n:\\r\\n\");\r\n\t\tcomoingreeditarplat.setFont(new Font(\"Arial Black\", Font.PLAIN, 20));\r\n\t\tcomoingreeditarplat.setBounds(475, 105, 265, 37);\r\n\t\tpaneledplat.add(comoingreeditarplat);\r\n\r\n\t\ttextfieldusername = new JTextField();\r\n\t\ttextfieldusername.setColumns(10);\r\n\t\ttextfieldusername.setBounds(475, 224, 372, 33);\r\n\t\tpaneledplat.add(textfieldusername);\r\n\r\n\t\tJLabel Cantidadingreedilbl = new JLabel(\"Cantidad del ingrediente\\r\\n\");\r\n\t\tCantidadingreedilbl.setFont(new Font(\"Arial Black\", Font.PLAIN, 20));\r\n\t\tCantidadingreedilbl.setBounds(475, 190, 300, 33);\r\n\t\tpaneledplat.add(Cantidadingreedilbl);\r\n\r\n\t\tJLabel editarplatlbl = new JLabel(\"Editar Platillo\\r\\n\");\r\n\t\teditarplatlbl.setFont(new Font(\"Arial Black\", Font.PLAIN, 27));\r\n\t\teditarplatlbl.setBounds(390, 11, 234, 38);\r\n\t\tEditarPlat.add(editarplatlbl);\r\n\r\n\t\tJButton btnEliminarPlatillo = new JButton(\"Eliminar platillo\");\r\n\t\tbtnEliminarPlatillo.setFont(new Font(\"Arial Black\", Font.PLAIN, 20));\r\n\t\tbtnEliminarPlatillo.setBackground(new Color(254, 211, 122));\r\n\t\tbtnEliminarPlatillo.setBounds(475, 48, 211, 33);\r\n\t\tpaneledplat.add(btnEliminarPlatillo);\r\n\r\n\t\tJButton btnbackeditarplatillos = new JButton(new ImageIcon(\"BotonRetroceder.png\"));\r\n\t\tbtnbackeditarplatillos.setBounds(10, 11, 35, 33);\r\n\t\tEditarPlat.add(btnbackeditarplatillos);\r\n\r\n\r\n\t\tbtnEliminarPlatillo.addActionListener(new ActionListener() {\r\n\t\t\t@Override\r\n\t\t\tpublic void actionPerformed(ActionEvent e) {\r\n\t\t\t\tint confirm = JOptionPane.showConfirmDialog(null, \"Are you sure you want to delete the table?\", \"Confirmation\", JOptionPane.YES_NO_OPTION);\r\n\r\n\t\t\t\tif (confirm == JOptionPane.YES_OPTION) {\r\n\t\t\t\t\ttry {\r\n\t\t\t\t\t\tConnection connection = DriverManager.getConnection(\"jdbc:mysql://localhost/platillos\", \"root\", \"root\");\r\n\r\n\t\t\t\t\t\tString selectedTable = (String) Platilloaeditarbox.getSelectedItem();\r\n\r\n\t\t\t\t\t\tString deleteQuery = \"DROP TABLE IF EXISTS \" + selectedTable;\r\n\t\t\t\t\t\tPreparedStatement deleteStatement = connection.prepareStatement(deleteQuery);\r\n\t\t\t\t\t\tdeleteStatement.executeUpdate();\r\n\t\t\t\t\t\tdeleteStatement.close();\r\n\r\n\t\t\t\t\t\tJOptionPane.showMessageDialog(null, \"Table deleted successfully\");\r\n\r\n\t\t\t\t\t\tconnection.close();\r\n\t\t\t\t\t} catch (SQLException ex) {\r\n\t\t\t\t\t\tex.printStackTrace();\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\r\n\r\n\t\tPlatilloaeditarbox.addActionListener(new ActionListener() {\r\n\t\t\t@Override\r\n\t\t\tpublic void actionPerformed(ActionEvent e) {\r\n\t\t\t\ttry {\r\n\t\t\t\t\tConnection connection = DriverManager.getConnection(\"jdbc:mysql://localhost/clientes\", \"username\", \"password\");\r\n\r\n\t\t\t\t\tStatement statement = connection.createStatement();\r\n\r\n\t\t\t\t\tString selectedTable = (String) Platilloaeditarbox.getSelectedItem();\r\n\r\n\t\t\t\t\tResultSet resultSet = statement.executeQuery(\"SELECT Nombre, Unidad FROM inventario\");\r\n\r\n\t\t\t\t\tingredientebox_1.removeAllItems();\r\n\r\n\t\t\t\t\twhile (resultSet.next()) {\r\n\t\t\t\t\t\tString nombre = resultSet.getString(\"Nombre\");\r\n\t\t\t\t\t\tString unidad = resultSet.getString(\"Unidad\");\r\n\t\t\t\t\t\tString combinedValue = nombre + \" - \" + unidad;\r\n\t\t\t\t\t\tingredientebox_1.addItem(combinedValue);\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tresultSet.close();\r\n\t\t\t\t\tstatement.close();\r\n\t\t\t\t\tconnection.close();\r\n\t\t\t\t} catch (SQLException ex) {\r\n\t\t\t\t\tex.printStackTrace();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\r\n\r\n\r\n\t\tPlatilloaeditarbox.addActionListener(new ActionListener() {\r\n\t\t\t@Override\r\n\t\t\tpublic void actionPerformed(ActionEvent e) {\r\n\t\t\t\ttry {\r\n\t\t\t\t\tString selectedTable = (String) Platilloaeditarbox.getSelectedItem();\r\n\t\t\t\t\tif (selectedTable != null && !selectedTable.isEmpty()) {\r\n\t\t\t\t\t\tConnection connection = DriverManager.getConnection(\"jdbc:mysql://localhost/platillos\", \"username\", \"password\");\r\n\t\t\t\t\t\tStatement statement = connection.createStatement();\r\n\r\n\t\t\t\t\t\tResultSet resultSet = statement.executeQuery(\"SELECT Ingrediente, Unidad, Cantidad, Precio, Descripcion FROM \" + selectedTable);\r\n\r\n\t\t\t\t\t\tingredientebox.removeAllItems();\r\n\r\n\t\t\t\t\t\tif (resultSet.next()) {\r\n\t\t\t\t\t\t\tString ingrediente = resultSet.getString(\"Ingrediente\");\r\n\t\t\t\t\t\t\tString unidad = resultSet.getString(\"Unidad\");\r\n\t\t\t\t\t\t\tString cantidad = resultSet.getString(\"Cantidad\");\r\n\t\t\t\t\t\t\tString combinedValue = ingrediente + \" - \" + unidad + \" - \" + cantidad;\r\n\t\t\t\t\t\t\tingredientebox.addItem(combinedValue);\r\n\r\n\t\t\t\t\t\t\tPrecioEdPlat.setText(resultSet.getString(\"Precio\"));\r\n\t\t\t\t\t\t\tDescripcionareaediplat.setText(resultSet.getString(\"Descripcion\"));\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tresultSet.close();\r\n\t\t\t\t\t\tstatement.close();\r\n\t\t\t\t\t\tconnection.close();\r\n\t\t\t\t\t}\r\n\t\t\t\t} catch (SQLException ex) {\r\n\t\t\t\t\tex.printStackTrace();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\tTimer timer2 = new Timer(30000, new ActionListener() {\r\n\t\t\t@Override\r\n\t\t\tpublic void actionPerformed(ActionEvent e) {\r\n\t\t\t\ttry {\r\n\t\t\t\t\tConnection connection = DriverManager.getConnection(\"jdbc:mysql://localhost/platillos\", \"root\", \"root\");\r\n\t\t\t\t\tStatement statement = connection.createStatement();\r\n\r\n\t\t\t\t\tResultSet resultSet = statement.executeQuery(\"SHOW TABLES\");\r\n\r\n\t\t\t\t\tPlatilloaeditarbox.removeAllItems();\r\n\r\n\t\t\t\t\twhile (resultSet.next()) {\r\n\t\t\t\t\t\tString tableName = resultSet.getString(1);\r\n\t\t\t\t\t\tPlatilloaeditarbox.addItem(tableName);\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tresultSet.close();\r\n\t\t\t\t\tstatement.close();\r\n\t\t\t\t\tconnection.close();\r\n\t\t\t\t} catch (SQLException ex) {\r\n\t\t\t\t\tex.printStackTrace();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\ttimer2.start();\r\n\r\n\t\ttry {\r\n\t\t\tConnection connection = DriverManager.getConnection(\"jdbc:mysql://localhost/platillos\", \"username\", \"password\");\r\n\r\n\t\t\tStatement statement = connection.createStatement();\r\n\r\n\t\t\tResultSet resultSet = statement.executeQuery(\"SHOW TABLES\");\r\n\r\n\t\t\tPlatilloaeditarbox.removeAllItems();\r\n\r\n\t\t\twhile (resultSet.next()) {\r\n\t\t\t\tString tableName = resultSet.getString(1);\r\n\t\t\t\tPlatilloaeditarbox.addItem(tableName);\r\n\t\t\t}\r\n\r\n\t\t\tresultSet.close();\r\n\t\t\tstatement.close();\r\n\t\t\tconnection.close();\r\n\t\t} catch (SQLException e) {\r\n\t\t\te.printStackTrace();\r\n\t\t}\r\n\t\tTimer ingredientUpdateTimer = new Timer(30000, new ActionListener() {\r\n\t\t\t@Override\r\n\t\t\tpublic void actionPerformed(ActionEvent e) {\r\n\t\t\t\ttry {\r\n\t\t\t\t\tString selectedTable = (String) Platilloaeditarbox.getSelectedItem();\r\n\t\t\t\t\tif (selectedTable != null && !selectedTable.isEmpty()) {\r\n\t\t\t\t\t\tConnection connection = DriverManager.getConnection(\"jdbc:mysql://localhost/platillos\", \"username\", \"password\");\r\n\t\t\t\t\t\tStatement statement = connection.createStatement();\r\n\r\n\t\t\t\t\t\tResultSet resultSet = statement.executeQuery(\"SELECT Ingrediente, Unidad, Cantidad, Precio, Descripcion FROM \" + selectedTable);\r\n\r\n\t\t\t\t\t\tingredientebox.removeAllItems();\r\n\r\n\t\t\t\t\t\twhile (resultSet.next()) {\r\n\t\t\t\t\t\t\tString ingrediente = resultSet.getString(\"Ingrediente\");\r\n\t\t\t\t\t\t\tString unidad = resultSet.getString(\"Unidad\");\r\n\t\t\t\t\t\t\tString cantidad = resultSet.getString(\"Cantidad\");\r\n\t\t\t\t\t\t\tString combinedValue = ingrediente + \" - \" + unidad + \" - \" + cantidad;\r\n\t\t\t\t\t\t\tingredientebox.addItem(combinedValue);\r\n\r\n\t\t\t\t\t\t\tPrecioEdPlat.setText(resultSet.getString(\"Precio\"));\r\n\t\t\t\t\t\t\tDescripcionareaediplat.setText(resultSet.getString(\"Descripcion\"));\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tresultSet.close();\r\n\t\t\t\t\t\tstatement.close();\r\n\t\t\t\t\t\tconnection.close();\r\n\t\t\t\t\t}\r\n\t\t\t\t} catch (SQLException ex) {\r\n\t\t\t\t\tex.printStackTrace();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\tingredientUpdateTimer.start();\r\n\r\n\r\n\r\n\t\tbtnediAadirIngrediente.addActionListener(new ActionListener() {\r\n\t\t\t@Override\r\n\t\t\tpublic void actionPerformed(ActionEvent e) {\r\n\t\t\t\ttry {\r\n\t\t\t\t\tConnection connection = DriverManager.getConnection(\"jdbc:mysql://localhost/platillos\", \"root\", \"root\");\r\n\r\n\t\t\t\t\tString selectedTable = (String) Platilloaeditarbox.getSelectedItem();\r\n\r\n\t\t\t\t\tString selectedIngredient_1 = (String) ingredientebox_1.getSelectedItem();\r\n\t\t\t\t\tString[] ingredientParts_1 = selectedIngredient_1.split(\" - \");\r\n\t\t\t\t\tString nombre_1 = ingredientParts_1[0];\r\n\t\t\t\t\tString unidad_1 = ingredientParts_1[1];\r\n\r\n\t\t\t\t\tString cantidad = textfieldusername.getText();\r\n\r\n\t\t\t\t\tString query = \"INSERT INTO \" + selectedTable + \"(Ingrediente, Unidad, Cantidad) VALUES (?, ?, ?)\";\r\n\t\t\t\t\tPreparedStatement statement = connection.prepareStatement(query);\r\n\t\t\t\t\tstatement.setString(1, nombre_1);\r\n\t\t\t\t\tstatement.setString(2, unidad_1);\r\n\t\t\t\t\tstatement.setString(3, cantidad);\r\n\r\n\t\t\t\t\tstatement.executeUpdate();\r\n\r\n\t\t\t\t\tstatement.close();\r\n\t\t\t\t\tconnection.close();\r\n\t\t\t\t} catch (SQLException ex) {\r\n\t\t\t\t\tex.printStackTrace();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\r\n\r\n\r\n\t\tbtnEliminarIngredienteedi.addActionListener(new ActionListener() {\r\n\t\t\t@Override\r\n\t\t\tpublic void actionPerformed(ActionEvent e) {\r\n\t\t\t\ttry {\r\n\t\t\t\t\tConnection connection = DriverManager.getConnection(\"jdbc:mysql://localhost/platillos\", \"root\", \"root\");\r\n\r\n\t\t\t\t\tString selectedTable = (String) Platilloaeditarbox.getSelectedItem();\r\n\t\t\t\t\tString selectedIngredient = (String) ingredientebox.getSelectedItem();\r\n\t\t\t\t\tString[] ingredientParts = selectedIngredient.split(\" - \");\r\n\t\t\t\t\tString ingredientName = ingredientParts[0];\r\n\r\n\t\t\t\t\tString deleteQuery = \"DELETE FROM \" + selectedTable + \" WHERE Ingrediente = ?\";\r\n\t\t\t\t\tPreparedStatement deleteStatement = connection.prepareStatement(deleteQuery);\r\n\t\t\t\t\tdeleteStatement.setString(1, ingredientName);\r\n\t\t\t\t\tdeleteStatement.executeUpdate();\r\n\t\t\t\t\tdeleteStatement.close();\r\n\r\n\t\t\t\t\tingredientebox.removeItem(selectedIngredient);\r\n\r\n\t\t\t\t\tJOptionPane.showMessageDialog(null, \"Ingrediente eliminado correctamente\");\r\n\r\n\t\t\t\t\tconnection.close();\r\n\t\t\t\t} catch (SQLException ex) {\r\n\t\t\t\t\tex.printStackTrace();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\r\n\r\n\r\n\t\tbtnbackeditarplatillos.addActionListener(new ActionListener() {\r\n\t\t\t@Override\r\n\t\t\tpublic void actionPerformed(ActionEvent e) {\r\n\t\t\t\tremove(EditarPlat);\r\n\t\t\t\tadd(Platillos);\r\n\t\t\t\trepaint();\r\n\t\t\t\trevalidate();\r\n\t\t\t}\r\n\t\t});\r\n\r\n\r\n\r\n\t\tbtnEditarPlat.addActionListener(new ActionListener() {\r\n\t\t\t@Override\r\n\t\t\tpublic void actionPerformed(ActionEvent e) {\r\n\t\t\t\ttry {\r\n\t\t\t\t\tConnection connection = DriverManager.getConnection(\"jdbc:mysql://localhost/platillos\", \"root\", \"root\");\r\n\r\n\t\t\t\t\tString selectedTable = (String) Platilloaeditarbox.getSelectedItem();\r\n\t\t\t\t\tString newTableName = NombrePlatEdField.getText();\r\n\r\n\t\t\t\t\tif (!newTableName.isEmpty()) {\r\n\t\t\t\t\t\tString query = \"ALTER TABLE \" + selectedTable + \" RENAME TO \" + newTableName;\r\n\t\t\t\t\t\tPreparedStatement statement = connection.prepareStatement(query);\r\n\t\t\t\t\t\tstatement.executeUpdate();\r\n\t\t\t\t\t\tstatement.close();\r\n\r\n\t\t\t\t\t\tselectedTable = newTableName;\r\n\r\n\t\t\t\t\t\tJOptionPane.showMessageDialog(null, \"Nombre del ingrediente actualizado\");\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tJOptionPane.showMessageDialog(null, \"No se puede dejar espacio de nombre vacio\");\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tString precioValue = PrecioEdPlat.getText();\r\n\t\t\t\t\tif (!precioValue.isEmpty()) {\r\n\t\t\t\t\t\tfloat precio = Float.parseFloat(precioValue);\r\n\t\t\t\t\t\tString updateQuery = \"UPDATE \" + selectedTable + \" SET Precio = ? LIMIT 1\";\r\n\t\t\t\t\t\tPreparedStatement updateStatement = connection.prepareStatement(updateQuery);\r\n\t\t\t\t\t\tupdateStatement.setFloat(1, precio);\r\n\t\t\t\t\t\tupdateStatement.executeUpdate();\r\n\t\t\t\t\t\tupdateStatement.close();\r\n\r\n\t\t\t\t\t\tJOptionPane.showMessageDialog(null, \"Precio actualizado correctamente\");\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tString descripcionValue = Descripcionareaediplat.getText();\r\n\t\t\t\t\tif (!descripcionValue.isEmpty()) {\r\n\t\t\t\t\t\tResultSet resultSet = connection.getMetaData().getColumns(null, null, selectedTable, \"Descripcion\");\r\n\t\t\t\t\t\tif (!resultSet.next()) {\r\n\t\t\t\t\t\t\tString alterQuery = \"ALTER TABLE \" + selectedTable + \" ADD Descripcion TEXT\";\r\n\t\t\t\t\t\t\tPreparedStatement alterStatement = connection.prepareStatement(alterQuery);\r\n\t\t\t\t\t\t\talterStatement.executeUpdate();\r\n\t\t\t\t\t\t\talterStatement.close();\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tString updateQuery = \"UPDATE \" + selectedTable + \" SET Descripcion = ? LIMIT 1\";\r\n\t\t\t\t\t\tPreparedStatement updateStatement = connection.prepareStatement(updateQuery);\r\n\t\t\t\t\t\tupdateStatement.setString(1, descripcionValue);\r\n\t\t\t\t\t\tupdateStatement.executeUpdate();\r\n\t\t\t\t\t\tupdateStatement.close();\r\n\r\n\t\t\t\t\t\tJOptionPane.showMessageDialog(null, \"Descripci√≥n actualizada correctamente\");\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tconnection.close();\r\n\t\t\t\t} catch (SQLException ex) {\r\n\t\t\t\t\tex.printStackTrace();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\r\n\r\n\r\n\r\n\r\n\r\n\t\t//----Platillos ingredientes-----\r\n\r\n\r\n\t\tPlatillosconingre.setBackground(new Color(255, 128, 0));\r\n\t\t//\tcontentPane.add(Platillosconingre);\r\n\t\tPlatillosconingre.setLayout(null);\r\n\r\n\t\tDefaultListModel<String> model2 = new DefaultListModel<>();\r\n\t\tmodel2.addElement(\"Sushi empanizado\");\r\n\t\tmodel2.addElement(\"Hamburguesa\");\r\n\t\tmodel2.addElement(\"Lasagna\");\r\n\t\tmodel2.addElement(\"Pizza\");\r\n\t\tmodel2.addElement(\"Alitas\");\r\n\r\n\r\n\t\tJLabel lblingredientes = new JLabel(\"Ingredientes\");\r\n\t\tlblingredientes.setFont(new Font(\"Arial Black\", Font.PLAIN, 26));\r\n\t\tlblingredientes.setBounds(403, 0, 316, 52);\r\n\t\tPlatillosconingre.add(lblingredientes);\r\n\r\n\t\tJPanel panelcrearingre = new JPanel();\r\n\t\tpanelcrearingre.setBounds(37, 62, 877, 559);\r\n\t\tPlatillosconingre.add(panelcrearingre);\r\n\t\tpanelcrearingre.setLayout(null);\r\n\r\n\r\n\t\tJPanel panellista = new JPanel();\r\n\t\tpanellista.setBackground(new Color(255, 255, 255));\r\n\t\tpanellista.setBounds(433, 5, 444, 565);\r\n\t\tpanelcrearingre.add(panellista);\r\n\t\tpanellista.setLayout(null);\r\n\r\n\t\tJLabel Detallesingrelbl = new JLabel(\"Platillos con el ingrediente\");\r\n\t\tDetallesingrelbl.setFont(new Font(\"Arial Black\", Font.PLAIN, 20));\r\n\t\tDetallesingrelbl.setBounds(50, 11, 390, 61);\r\n\t\tpanellista.add(Detallesingrelbl);\r\n\r\n\t\tJLabel Tipoingredientelbl = new JLabel(\"Platillos: \");\r\n\t\tTipoingredientelbl.setFont(new Font(\"Arial Black\", Font.PLAIN, 19));\r\n\t\tTipoingredientelbl.setBounds(20, 90, 450, 450);\r\n\t\tpanellista.add(Tipoingredientelbl);\r\n\r\n\r\n\t\tJPanel panelconsultadeingredientes = new JPanel();\r\n\t\tpanelconsultadeingredientes.setBackground(new Color(255, 128, 0));\r\n\t\tpanelconsultadeingredientes.setBounds(35, 40, 288, 519);\r\n\t\tpanelcrearingre.add(panelconsultadeingredientes);\r\n\t\tpanelconsultadeingredientes.setLayout(null);\r\n\r\n\t\tJTable ingredientTable = new JTable();\r\n\t\tingredientTable.setModel(new DefaultTableModel());\r\n\r\n\t\tJScrollPane ingredientScrollPane = new JScrollPane(ingredientTable);\r\n\t\tingredientScrollPane.setBounds(0, 0, panelconsultadeingredientes.getWidth(), panelconsultadeingredientes.getHeight());\r\n\t\tpanelconsultadeingredientes.add(ingredientScrollPane);\r\n\t\tDefaultTableModel ingredientTableModel = new DefaultTableModel();\r\n\r\n\r\n\t\ttry {\r\n\t\t\tConnection connection = DriverManager.getConnection(\"jdbc:mysql://localhost:3306/clientes\", \"root\", \"root\");\r\n\t\t\tStatement statement = connection.createStatement();\r\n\t\t\tResultSet resultSet = statement.executeQuery(\"SELECT Nombre FROM inventario\");\r\n\r\n\t\t\tingredientTableModel.addColumn(\"Nombre\");\r\n\t\t\tingredientTable.setModel(ingredientTableModel);\r\n\r\n\t\t\twhile (resultSet.next()) {\r\n\t\t\t\tString nombre = resultSet.getString(\"Nombre\");\r\n\t\t\t\tingredientTableModel.addRow(new Object[]{nombre});\r\n\t\t\t}\r\n\r\n\t\t\tresultSet.close();\r\n\t\t\tstatement.close();\r\n\t\t\tconnection.close();\r\n\t\t} catch (SQLException ex) {\r\n\t\t\tex.printStackTrace();\r\n\t\t}\r\n\r\n\r\n\r\n\t\tingredientTable.setRowSelectionAllowed(false);\r\n\t\tingredientTable.setColumnSelectionAllowed(false);\r\n\r\n\t\tingredientTable.addMouseListener(new MouseAdapter() {\r\n\t\t\t@Override\r\n\t\t\tpublic void mouseClicked(MouseEvent e) {\r\n\t\t\t\tint rowIndex = ingredientTable.rowAtPoint(e.getPoint());\r\n\r\n\t\t\t\tif (rowIndex != -1) {\r\n\t\t\t\t\tString ingredientName = ingredientTable.getValueAt(rowIndex, 0).toString();\r\n\t\t\t\t\tStringBuilder matchingTables = new StringBuilder();\r\n\r\n\t\t\t\t\ttry {\r\n\t\t\t\t\t\tConnection connection = DriverManager.getConnection(\"jdbc:mysql://localhost:3306/platillos\", \"root\", \"root\");\r\n\t\t\t\t\t\tStatement statement = connection.createStatement();\r\n\t\t\t\t\t\tResultSet resultSet = statement.executeQuery(\"SHOW TABLES\");\r\n\r\n\t\t\t\t\t\twhile (resultSet.next()) {\r\n\t\t\t\t\t\t\tString tableName = resultSet.getString(1);\r\n\t\t\t\t\t\t\tStatement innerStatement = connection.createStatement();\r\n\t\t\t\t\t\t\tResultSet tableData = innerStatement.executeQuery(\"SELECT * FROM \" + tableName);\r\n\r\n\t\t\t\t\t\t\twhile (tableData.next()) {\r\n\t\t\t\t\t\t\t\tString ingredient = tableData.getString(\"Ingrediente\");\r\n\r\n\t\t\t\t\t\t\t\tif (ingredient.equals(ingredientName)) {\r\n\t\t\t\t\t\t\t\t\tmatchingTables.append(tableName).append(\", \");\r\n\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\ttableData.close();\r\n\t\t\t\t\t\t\tinnerStatement.close();\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tresultSet.close();\r\n\t\t\t\t\t\tstatement.close();\r\n\t\t\t\t\t\tconnection.close();\r\n\t\t\t\t\t} catch (SQLException ex) {\r\n\t\t\t\t\t\tex.printStackTrace();\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tString tablesText = matchingTables.toString();\r\n\t\t\t\t\tif (!tablesText.isEmpty()) {\r\n\t\t\t\t\t\ttablesText = tablesText.substring(0, tablesText.length() - 2);\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\ttablesText = \"No hay platillos \\n\" +\r\n\t\t\t\t\t\t\t\t\"con el ingrediente.\";\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tTipoingredientelbl.setText(\"Platillos: \" + tablesText);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\r\n\r\n\t\tTimer timer4 = new Timer(15000, new ActionListener() {\r\n\t\t\t@Override\r\n\t\t\tpublic void actionPerformed(ActionEvent e) {\r\n\t\t\t\ttry {\r\n\t\t\t\t\tConnection connection = DriverManager.getConnection(\"jdbc:mysql://localhost:3306/clientes\", \"root\", \"root\");\r\n\t\t\t\t\tStatement statement = connection.createStatement();\r\n\t\t\t\t\tResultSet resultSet = statement.executeQuery(\"SELECT Nombre FROM inventario\");\r\n\r\n\t\t\t\t\tingredientTableModel.setRowCount(0);\r\n\r\n\t\t\t\t\twhile (resultSet.next()) {\r\n\t\t\t\t\t\tString nombre = resultSet.getString(\"Nombre\");\r\n\t\t\t\t\t\tingredientTableModel.addRow(new Object[]{nombre});\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tresultSet.close();\r\n\t\t\t\t\tstatement.close();\r\n\t\t\t\t\tconnection.close();\r\n\t\t\t\t} catch (SQLException ex) {\r\n\t\t\t\t\tex.printStackTrace();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\ttimer4.start();\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\t\tJLabel lblPlatillosconingre = new JLabel(\"Platillos con el ingrediente\");\r\n\t\tlblPlatillosconingre.setFont(new Font(\"Tahoma\", Font.PLAIN, 18));\r\n\t\tlblPlatillosconingre.setBounds(72, 5, 213, 36);\r\n\t\tpanelcrearingre.add(lblPlatillosconingre);\r\n\r\n\t\tJButton btnbackingredientes = new JButton(new ImageIcon(\"BotonRetroceder.png\"));\r\n\t\tbtnbackingredientes.setBounds(10, 11, 35, 33);\r\n\t\tPlatillosconingre.add(btnbackingredientes);\r\n\r\n\t\tbtnbackingredientes.addActionListener(new ActionListener() {\r\n\t\t\t@Override\r\n\t\t\tpublic void actionPerformed(ActionEvent e) {\r\n\t\t\t\tremove(Platillosconingre);\r\n\t\t\t\tadd(Platillos);\r\n\r\n\t\t\t\trepaint();\r\n\t\t\t\trevalidate();\r\n\t\t\t}\r\n\t\t});\r\n\r\n\r\n\t\t//----Eliminar Platillos-----\r\n\r\n\r\n\t\tElimPlatillos.setBackground(new Color(255, 128, 0));\r\n\t\tElimPlatillos.setBounds(0, 0, 961, 642);\r\n\t\t//  contentPane.add(ElimPlatillos);\r\n\t\tElimPlatillos.setLayout(null);\r\n\r\n\t\tJLabel lblEliminarPlatillos = new JLabel(\"Eliminar Platillos\");\r\n\t\tlblEliminarPlatillos.setFont(new Font(\"Tahoma\", Font.PLAIN, 26));\r\n\t\tlblEliminarPlatillos.setBounds(359, 80, 223, 50);\r\n\t\tElimPlatillos.add(lblEliminarPlatillos);\r\n\r\n\t\tJList list = new JList();\r\n\t\tlist.setBounds(230, 234, 463, 228);\r\n\t\tElimPlatillos.add(list);\r\n\r\n\t\tJLabel platilloAEliminar = new JLabel(\"Platillo a Eliminar\");\r\n\t\tplatilloAEliminar.setFont(new Font(\"Tahoma\", Font.PLAIN, 22));\r\n\t\tplatilloAEliminar.setBounds(376, 200, 279, 43);\r\n\t\tElimPlatillos.add(platilloAEliminar);\r\n\r\n\t\tJButton backbtneliminarplat = new JButton(\"Back\");\r\n\t\tbackbtneliminarplat.setBounds(10, 11, 80, 29);\r\n\t\tElimPlatillos.add(backbtneliminarplat);\r\n\r\n\t\tbackbtneliminarplat.addActionListener(new ActionListener() {\r\n\t\t\t@Override\r\n\t\t\tpublic void actionPerformed(ActionEvent e) {\r\n\t\t\t\tremove(ElimPlatillos);\r\n\t\t\t\tadd(Platillos);\r\n\t\t\t\trepaint();\r\n\t\t\t\trevalidate();\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\tJLabel platilloIcon = new JLabel(new ImageIcon(\"Platillosfondo.png\"));\r\n\t\tplatilloIcon.setBounds(0, 0, 977, 681);\r\n\t\tplatilloIcon.setVisible(true);\r\n\t\tplatilloIcon.setOpaque(true);\r\n\t\tPlatillos.add(platilloIcon);\r\n\t\trepaint();\r\n\t\trevalidate();\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\t\t//--------------------------------------------ordenes-----------------------------------------------------------\r\n\r\n\t\tOrdenes.setLayout(null);\r\n\t\tOrdenes.repaint();\r\n\t\tOrdenes.revalidate();\r\n\r\n\t\tJPanel panelOrdenes = new JPanel();\r\n\t\tpanelOrdenes.setBounds(0, 0, 977, 681);\r\n\t\tpanelOrdenes.setFont(new Font(\"Tahoma\", Font.PLAIN, 20));\r\n\t\tOrdenes.add(panelOrdenes);\r\n\t\tpanelOrdenes.revalidate();\r\n\t\tpanelOrdenes.repaint();\r\n\t\tpanelOrdenes.setLayout(null);\r\n\r\n\t\tJPanel panelMenuOrdenes = new JPanel();\r\n\t\tpanelMenuOrdenes .setLayout(null);\r\n\t\tpanelMenuOrdenes .setBackground(Color.WHITE);\r\n\t\tpanelMenuOrdenes .setOpaque(false);\r\n\t\tpanelMenuOrdenes .setBounds(60, 241, 827, 347);\r\n\t\tpanelOrdenes.add(panelMenuOrdenes );\r\n\r\n\r\n\r\n\t\tJPanel panelMiniOrden = new JPanel();\r\n\t\tpanelMiniOrden.setLayout(null);\r\n\t\tpanelMiniOrden.setBackground(Color.WHITE);\r\n\t\tpanelMiniOrden.setOpaque(false);\r\n\t\tpanelMiniOrden.setBounds(60, 241, 827, 347);\r\n\t\tpanelOrdenes.add(panelMiniOrden);\r\n\r\n\t\tJLabel IconOrden = new JLabel(new ImageIcon(\"ordenes.jpg\"));\r\n\t\tIconOrden.setBounds(0, 0, 951, 631);\r\n\t\tIconOrden.setVisible(true);\r\n\t\tIconOrden.setOpaque(true);\r\n\t\tpanelOrdenes.add(IconOrden);\r\n\r\n\t\tJLabel logoOrdenes = new JLabel(new ImageIcon(\"menuordenes.png\"));\r\n\t\tlogoOrdenes.setBounds(300,30,350,233);\r\n\t\tIconOrden.add(logoOrdenes);\r\n\r\n\r\n\t\tJButton btnEditarOrdenes = new JButton(\"Editar\");\r\n\t\tbtnEditarOrdenes.setFont(new Font(\"Arial Black\", Font.PLAIN, 20));\r\n\t\tbtnEditarOrdenes.setBackground(new Color(255, 128, 0));\r\n\t\tbtnEditarOrdenes.setFocusable(false);\r\n\t\tbtnEditarOrdenes.setBounds(112, 198, 217, 60);\r\n\t\tbtnEditarOrdenes.addActionListener(new ActionListener() {\r\n\t\t\t@Override\r\n\t\t\tpublic void actionPerformed(ActionEvent e) {\r\n\t\t\t\tremove(Ordenes);\r\n\t\t\t\tadd( EditarOrden);\r\n\t\t\t\trepaint();\r\n\t\t\t\trevalidate();\r\n\r\n\t\t\t}\r\n\t\t});\r\n\t\tpanelMiniOrden.add(btnEditarOrdenes);\r\n\r\n\t\tJButton btnEliminarOrden = new JButton(\"Eliminar\");\r\n\t\tbtnEliminarOrden.setFont(new Font(\"Arial Black\", Font.PLAIN, 20));\r\n\t\tbtnEliminarOrden.setBackground(new Color(255, 128, 0));\r\n\t\tbtnEliminarOrden.setFocusable(false);\r\n\t\tbtnEliminarOrden.setBounds(490, 198, 217, 60);\r\n\t\tbtnEliminarOrden.addActionListener(new ActionListener() {\r\n\t\t\t@Override\r\n\t\t\tpublic void actionPerformed(ActionEvent e) {\r\n\t\t\t\tremove(Ordenes);\r\n\t\t\t\tadd(EliminarOrden);\r\n\t\t\t\trepaint();\r\n\t\t\t\trevalidate();\r\n\r\n\t\t\t}\r\n\t\t});\r\n\t\tpanelMiniOrden.add(btnEliminarOrden);\r\n\r\n\t\tJButton btnCrearOrden = new JButton(\"Crear\");\r\n\t\tbtnCrearOrden.setFont(new Font(\"Arial Black\", Font.PLAIN, 20));\r\n\t\tbtnCrearOrden.setBackground(new Color(255, 128, 0));\r\n\t\tbtnCrearOrden.setFocusable(false);\r\n\t\tbtnCrearOrden.setBounds(490, 95, 217, 60);\r\n\t\tpanelMiniOrden.add(btnCrearOrden);\r\n\r\n\t\tbtnCrearOrden.addActionListener(new ActionListener() {\r\n\t\t\t@Override\r\n\t\t\tpublic void actionPerformed(ActionEvent e) {\r\n\t\t\t\tremove(Ordenes);\r\n\t\t\t\tadd(CrearOrden);\r\n\t\t\t\trepaint();\r\n\t\t\t\trevalidate();\r\n\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\tJButton backOrdenes = new JButton(new ImageIcon(\"BotonRetroceder.png\"));\r\n\t\tbackOrdenes.setBounds(10, 11, 35, 33);\r\n\t\tbackOrdenes.repaint();\r\n\t\tbackOrdenes.revalidate();\r\n\t\tbackOrdenes.addActionListener(new ActionListener() {\r\n\t\t\t@Override\r\n\t\t\tpublic void actionPerformed(ActionEvent e) {\r\n\t\t\t\tremove(Ordenes);\r\n\t\t\t\tadd(Inicio);\r\n\t\t\t\trepaint();\r\n\t\t\t\trevalidate();\r\n\t\t\t}\r\n\t\t});\r\n\t\tIconOrden.add(backOrdenes);\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\t\t//-----pantalla creacion Ordenes-----\r\n\t\tCrearOrden.setLayout(null);\r\n\r\n\t\tJLabel crearOrdenes = new JLabel(\"Crear Ordenes\");\r\n\t\tcrearOrdenes.setFont(new Font(\"Arial Black\", Font.PLAIN, 30));\r\n\t\tcrearOrdenes.setBounds(350, 40, 351, 50);\r\n\t\tCrearOrden.add( crearOrdenes);\r\n\r\n\t\tJPanel FondoCrearorden = new JPanel();\r\n\t\tFondoCrearorden .setBounds(0, 0, 977, 681);\r\n\t\tFondoCrearorden .setBackground(new Color(255, 128, 0));\r\n\t\tFondoCrearorden .setLayout(null);\r\n\t\tCrearOrden.add(FondoCrearorden );\r\n\r\n\r\n\t\tJPanel panelCrearOrden = new JPanel();\r\n\t\tpanelCrearOrden.setBounds(100, 100, 750, 426);\r\n\t\tFondoCrearorden.add(panelCrearOrden);\r\n\t\tpanelCrearOrden.setLayout(null);\r\n\r\n\t\t//labels de compra\r\n\r\n\t\tJLabel clienteaelegirlbl = new JLabel(\"Seleccione al cliente para la orden\");\r\n\t\tclienteaelegirlbl.setForeground(new Color(0, 0, 0));\r\n\t\tclienteaelegirlbl.setFont(new Font(\"Tahoma\", Font.BOLD, 17));\r\n\t\tclienteaelegirlbl.setBounds(10, 10, 360, 32);\r\n\t\tpanelCrearOrden.add(clienteaelegirlbl);\r\n\r\n\t\tJLabel platilloaelegirlbl = new JLabel(\"Seleccione los platillos para la orden\");\r\n\t\tplatilloaelegirlbl.setForeground(new Color(0, 0, 0));\r\n\t\tplatilloaelegirlbl.setFont(new Font(\"Tahoma\", Font.BOLD, 17));\r\n\t\tplatilloaelegirlbl.setBounds(10, 110, 360, 32);\r\n\t\tpanelCrearOrden.add(platilloaelegirlbl);\r\n\r\n\t\tJLabel platilloaremover = new JLabel(\"Seleccione los platillos a remover\");\r\n\t\tplatilloaremover.setForeground(new Color(0, 0, 0));\r\n\t\tplatilloaremover.setFont(new Font(\"Tahoma\", Font.BOLD, 17));\r\n\t\tplatilloaremover.setBounds(10, 210, 360, 32);\r\n\t\tpanelCrearOrden.add(platilloaremover);\r\n\r\n\t\tJLabel Totalporcompralbl = new JLabel(\"Total \");\r\n\t\tTotalporcompralbl.setForeground(new Color(0, 0, 0));\r\n\t\tTotalporcompralbl.setFont(new Font(\"Tahoma\", Font.BOLD, 17));\r\n\t\tTotalporcompralbl.setBounds(10, 350, 360, 32);\r\n\t\tpanelCrearOrden.add(Totalporcompralbl);\r\n\r\n\r\n\r\n\t\t//JBUttons\r\n\r\n\t\tJButton platilloaremoverbtn = new JButton(\"Remover platillo\");\r\n\t\tplatilloaremoverbtn.setFont(new Font(\"Tahoma\", Font.BOLD, 17));\r\n\t\tplatilloaremoverbtn.setBounds(10, 300, 270, 32);\r\n\t\tpanelCrearOrden.add(platilloaremoverbtn);\r\n\r\n\r\n\t\tJButton Agregarplatilloaordenbtn = new JButton(\"A√±adir platillo a orden\");\r\n\t\tAgregarplatilloaordenbtn.setBounds(390, 150, 340, 32);\r\n\t\tAgregarplatilloaordenbtn.setFont(new Font(\"Tahoma\", Font.BOLD, 17));\r\n\t\tpanelCrearOrden.add(Agregarplatilloaordenbtn);\r\n\r\n\r\n\r\n\t\tJButton CrearOrdenn = new JButton(\"Crear Orden\");\r\n\t\tCrearOrdenn.setForeground(new Color(0, 0, 0));\r\n\t\tCrearOrdenn.setFont(new Font(\"Tahoma\", Font.BOLD, 11));\r\n\t\tCrearOrdenn.setBounds(350, 383, 113, 32);\r\n\t\tpanelCrearOrden.add(CrearOrdenn);\r\n\r\n\t\tJButton cancelarordenbtn = new JButton(\"Cancelar orden\");\r\n\t\tcancelarordenbtn.setForeground(new Color(0, 0, 0));\r\n\t\tcancelarordenbtn.setFont(new Font(\"Tahoma\", Font.BOLD, 11));\r\n\t\tcancelarordenbtn.setBounds(600, 383, 113, 32);\r\n\t\tpanelCrearOrden.add(cancelarordenbtn);\r\n\r\n\t\t//comboboxes\r\n\r\n\t\tJComboBox<String> clienteaelegirbox = new JComboBox<>();\r\n\t\tclienteaelegirbox.setFont(new Font(\"Tahoma\", Font.BOLD, 17));\r\n\t\tclienteaelegirbox.setBounds(10, 50, 360, 32);\r\n\t\tpanelCrearOrden.add(clienteaelegirbox);\r\n\r\n\t\tJComboBox<String> platilloaelegirlbox = new JComboBox<>();\r\n\t\tplatilloaelegirlbox.setFont(new Font(\"Tahoma\", Font.BOLD, 17));\r\n\t\tplatilloaelegirlbox.setBounds(10, 150, 360, 32);\r\n\t\tpanelCrearOrden.add(platilloaelegirlbox);\r\n\r\n\t\tJComboBox<String> platilloaremoverbox = new JComboBox<>();\r\n\t\tplatilloaremoverbox.setFont(new Font(\"Tahoma\", Font.BOLD, 17));\r\n\t\tplatilloaremoverbox.setBounds(10, 250, 360, 32);\r\n\t\tpanelCrearOrden.add(platilloaremoverbox);\r\n\r\n\t\tJTable platillosenordentable = new JTable();\r\n\t\tplatillosenordentable.setBounds(390, 210, 340, 160);\r\n\r\n\t\tpanelCrearOrden.add(platillosenordentable);\r\n\r\n\t\ttry {\r\n\t\t\tConnection connection = DriverManager.getConnection(\"jdbc:mysql://localhost:3306/clientes\", \"root\", \"root\");\r\n\t\t\tStatement statement = connection.createStatement();\r\n\t\t\tString query = \"SELECT Nombre, Apellidos FROM clientes\";\r\n\t\t\tResultSet resultSet = statement.executeQuery(query);\r\n\r\n\t\t\twhile (resultSet.next()) {\r\n\t\t\t\tString nombre = resultSet.getString(\"Nombre\");\r\n\t\t\t\tString apellidos = resultSet.getString(\"Apellidos\");\r\n\t\t\t\tString clienteData = nombre + \" \" + apellidos;\r\n\t\t\t\tclienteaelegirbox.addItem(clienteData);\r\n\t\t\t}\r\n\r\n\t\t\tresultSet.close();\r\n\t\t\tstatement.close();\r\n\t\t\tconnection.close();\r\n\t\t} catch (SQLException ex) {\r\n\t\t\tex.printStackTrace();\r\n\t\t}\r\n\r\n\r\n\t\ttry {\r\n\t\t\tConnection connection = DriverManager.getConnection(\"jdbc:mysql://localhost:3306/platillos\", \"root\", \"root\");\r\n\t\t\tStatement statement = connection.createStatement();\r\n\t\t\tString query = \"SHOW TABLES\";\r\n\t\t\tResultSet resultSet = statement.executeQuery(query);\r\n\r\n\t\t\twhile (resultSet.next()) {\r\n\t\t\t\tString tableName = resultSet.getString(1);\r\n\r\n\t\t\t\tString price = \"\";\r\n\t\t\t\tString getPriceQuery = \"SELECT Precio FROM \" + tableName + \" LIMIT 1\";\r\n\t\t\t\tStatement getPriceStatement = connection.createStatement();\r\n\t\t\t\tResultSet getPriceResult = getPriceStatement.executeQuery(getPriceQuery);\r\n\t\t\t\tif (getPriceResult.next()) {\r\n\t\t\t\t\tprice = getPriceResult.getString(\"Precio\");\r\n\t\t\t\t}\r\n\t\t\t\tgetPriceResult.close();\r\n\t\t\t\tgetPriceStatement.close();\r\n\r\n\t\t\t\tString itemData = tableName + \" - Precio: \" + price;\r\n\t\t\t\tplatilloaelegirlbox.addItem(itemData);\r\n\t\t\t}\r\n\r\n\t\t\tresultSet.close();\r\n\t\t\tstatement.close();\r\n\t\t\tconnection.close();\r\n\t\t} catch (SQLException ex) {\r\n\t\t\tex.printStackTrace();\r\n\t\t}\r\n\r\n\r\n\r\n\t\tDefaultTableModel tablemodeltablaorden = new DefaultTableModel();\r\n\t\ttablemodeltablaorden.addColumn(\"Platillo\");\r\n\t\ttablemodeltablaorden.addColumn(\"Precio\");\r\n\t\tplatillosenordentable.setModel(tablemodeltablaorden);\r\n\r\n\r\n\r\n\r\n//jbutton actionlisteners\r\n\t\tAgregarplatilloaordenbtn.addActionListener(new ActionListener() {\r\n\t\t\tpublic void actionPerformed(ActionEvent e) {\r\n\t\t\t\tString selectedPlatillo = (String) platilloaelegirlbox.getSelectedItem();\r\n\t\t\t\tplatilloaremoverbox.addItem(selectedPlatillo);\r\n\r\n\t\t\t\tString tableName = selectedPlatillo.substring(0, selectedPlatillo.indexOf(\" - \"));\r\n\t\t\t\tdouble price = 0.0;\r\n\r\n\t\t\t\ttry {\r\n\t\t\t\t\tConnection connection = DriverManager.getConnection(\"jdbc:mysql://localhost:3306/platillos\", \"root\", \"root\");\r\n\t\t\t\t\tStatement statement = connection.createStatement();\r\n\t\t\t\t\tString getPriceQuery = \"SELECT Precio FROM \" + tableName + \" LIMIT 1\";\r\n\t\t\t\t\tResultSet getPriceResult = statement.executeQuery(getPriceQuery);\r\n\t\t\t\t\tif (getPriceResult.next()) {\r\n\t\t\t\t\t\tprice = getPriceResult.getDouble(\"Precio\");\r\n\t\t\t\t\t}\r\n\t\t\t\t\tgetPriceResult.close();\r\n\t\t\t\t\tstatement.close();\r\n\t\t\t\t\tconnection.close();\r\n\t\t\t\t} catch (SQLException ex) {\r\n\t\t\t\t\tex.printStackTrace();\r\n\t\t\t\t}\r\n\r\n\t\t\t\tDefaultTableModel model = (DefaultTableModel) platillosenordentable.getModel();\r\n\t\t\t\tmodel.addRow(new Object[]{tableName, price});\r\n\r\n\t\t\t\tdouble total = 0.0;\r\n\t\t\t\tfor (int i = 0; i < model.getRowCount(); i++) {\r\n\t\t\t\t\tString rowPrice = model.getValueAt(i, 1).toString();\r\n\t\t\t\t\ttotal += Double.parseDouble(rowPrice);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tTotalporcompralbl.setText(\"Total: \" + total);\r\n\r\n\t\t\t\tmodel.fireTableDataChanged();\r\n\t\t\t\tplatillosenordentable.repaint();\r\n\t\t\t}\r\n\t\t});\r\n\r\n\r\n\r\n\t\tplatilloaremoverbtn.addActionListener(new ActionListener() {\r\n\t\t\tpublic void actionPerformed(ActionEvent e) {\r\n\t\t\t\tint selectedIndex = platilloaremoverbox.getSelectedIndex();\r\n\t\t\t\tif (selectedIndex != -1) {\r\n\t\t\t\t\tplatilloaremoverbox.removeItemAt(selectedIndex);\r\n\r\n\t\t\t\t\tDefaultTableModel tableModel = (DefaultTableModel) platillosenordentable.getModel();\r\n\t\t\t\t\tdouble removedPrice = Double.parseDouble(tableModel.getValueAt(selectedIndex, 1).toString());\r\n\r\n\t\t\t\t\ttableModel.removeRow(selectedIndex);\r\n\r\n\t\t\t\t\tdouble total = 0.0;\r\n\t\t\t\t\tfor (int i = 0; i < tableModel.getRowCount(); i++) {\r\n\t\t\t\t\t\tString rowPrice = tableModel.getValueAt(i, 1).toString();\r\n\t\t\t\t\t\ttotal += Double.parseDouble(rowPrice);\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tTotalporcompralbl.setText(\"Total: \" + total);\r\n\r\n\t\t\t\t\ttableModel.fireTableDataChanged();\r\n\t\t\t\t\tplatillosenordentable.repaint();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\r\n\r\n\t\tcancelarordenbtn.addActionListener(new ActionListener() {\r\n\t\t\tpublic void actionPerformed(ActionEvent e) {\r\n\t\t\t\tDefaultTableModel model = (DefaultTableModel) platillosenordentable.getModel();\r\n\t\t\t\tmodel.setRowCount(0);\r\n\r\n\t\t\t\tplatilloaremoverbox.removeAllItems();\r\n\r\n\t\t\t\tTotalporcompralbl.setText(\"Total: 0\");\r\n\t\t\t}\r\n\t\t});\r\n\r\n\r\n\r\n\r\n\r\n\r\n\t\tCrearOrdenn.addActionListener(new ActionListener() {\r\n\t\t\tpublic void actionPerformed(ActionEvent arg0) {\r\n\t\t\t\tString selectedPlatillo = platillosenordentable.getValueAt(0, 0).toString();\r\n\r\n\t\t\t\tint quantity = tablemodeltablaorden.getRowCount();\r\n\r\n\t\t\t\tMap<String, Float> ingredientesCantidadMap = new HashMap<>();\r\n\r\n\t\t\t\ttry {\r\n\t\t\t\t\tConnection connection = DriverManager.getConnection(\"jdbc:mysql://localhost:3306/platillos\", \"root\", \"root\");\r\n\t\t\t\t\tStatement statement = connection.createStatement();\r\n\r\n\t\t\t\t\tString tableName = selectedPlatillo;\r\n\t\t\t\t\tString query = \"SELECT Ingrediente, Cantidad FROM \" + tableName;\r\n\t\t\t\t\tResultSet resultSet = statement.executeQuery(query);\r\n\r\n\t\t\t\t\twhile (resultSet.next()) {\r\n\t\t\t\t\t\tString ingrediente = resultSet.getString(\"Ingrediente\");\r\n\t\t\t\t\t\tfloat cantidad = resultSet.getFloat(\"Cantidad\");\r\n\r\n\t\t\t\t\t\tcantidad *= quantity;\r\n\r\n\t\t\t\t\t\tingredientesCantidadMap.put(ingrediente, cantidad);\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tresultSet.close();\r\n\t\t\t\t\tstatement.close();\r\n\t\t\t\t\tconnection.close();\r\n\t\t\t\t} catch (SQLException ex) {\r\n\t\t\t\t\tex.printStackTrace();\r\n\t\t\t\t}\r\n\r\n\t\t\t\ttry {\r\n\t\t\t\t\tConnection connection = DriverManager.getConnection(\"jdbc:mysql://localhost:3306/clientes\", \"root\", \"root\");\r\n\t\t\t\t\tStatement statement = connection.createStatement();\r\n\r\n\t\t\t\t\tString tableName = \"inventario\";\r\n\t\t\t\t\tfor (Map.Entry<String, Float> entry : ingredientesCantidadMap.entrySet()) {\r\n\t\t\t\t\t\tString ingrediente = entry.getKey();\r\n\t\t\t\t\t\tfloat cantidad = entry.getValue();\r\n\r\n\t\t\t\t\t\tString updateQuery = \"UPDATE \" + tableName + \" SET Cantidad = Cantidad - \" + cantidad + \" WHERE Nombre = '\" + ingrediente + \"'\";\r\n\t\t\t\t\t\tstatement.executeUpdate(updateQuery);\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tstatement.close();\r\n\t\t\t\t\tconnection.close();\r\n\t\t\t\t} catch (SQLException ex) {\r\n\t\t\t\t\tex.printStackTrace();\r\n\t\t\t\t}\r\n\r\n\t\t\t\tint confirmation = JOptionPane.showConfirmDialog(null, \"¬øEst√° seguro de realizar esta orden?\", \"Confirmaci√≥n\", JOptionPane.YES_NO_OPTION);\r\n\r\n\t\t\t\tif (confirmation == JOptionPane.YES_OPTION) {\r\n\t\t\t\t\tString selectedCliente = clienteaelegirbox.getSelectedItem().toString();\r\n\t\t\t\t\tString selectedDireccion = \"\";\r\n\r\n\t\t\t\t\ttry {\r\n\t\t\t\t\t\tConnection connection = DriverManager.getConnection(\"jdbc:mysql://localhost:3306/clientes\", \"root\", \"root\");\r\n\t\t\t\t\t\tStatement statement = connection.createStatement();\r\n\r\n\t\t\t\t\t\tString query = \"SELECT Direcci√≥n FROM clientes WHERE Nombre = '\" + selectedCliente + \"'\";\r\n\t\t\t\t\t\tResultSet resultSet = statement.executeQuery(query);\r\n\r\n\t\t\t\t\t\tif (resultSet.next()) {\r\n\t\t\t\t\t\t\tselectedDireccion = resultSet.getObject(\"Direcci√≥n\").toString();\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tresultSet.close();\r\n\t\t\t\t\t\tstatement.close();\r\n\t\t\t\t\t\tconnection.close();\r\n\t\t\t\t\t} catch (SQLException ex) {\r\n\t\t\t\t\t\tex.printStackTrace();\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tDefaultTableModel platillosTableModel = (DefaultTableModel) platillosenordentable.getModel();\r\n\t\t\t\t\tdouble total = 0.0;\r\n\r\n\t\t\t\t\tStringBuilder platillosBuilder = new StringBuilder();\r\n\t\t\t\t\tStringBuilder precioBuilder = new StringBuilder();\r\n\r\n\t\t\t\t\tfor (int i = 0; i < platillosTableModel.getRowCount(); i++) {\r\n\t\t\t\t\t\tString platillo = platillosTableModel.getValueAt(i, 0).toString();\r\n\t\t\t\t\t\tString precio = platillosTableModel.getValueAt(i, 1).toString();\r\n\r\n\t\t\t\t\t\tplatillosBuilder.append(platillo);\r\n\t\t\t\t\t\tprecioBuilder.append(precio);\r\n\r\n\t\t\t\t\t\tif (i < platillosTableModel.getRowCount() - 1) {\r\n\t\t\t\t\t\t\tplatillosBuilder.append(\", \");\r\n\t\t\t\t\t\t\tprecioBuilder.append(\", \");\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\ttotal += Double.parseDouble(precio);\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tint orderId = 1;\r\n\t\t\t\t\ttry {\r\n\t\t\t\t\t\tConnection connection = DriverManager.getConnection(\"jdbc:mysql://localhost:3306/ordenes\", \"root\", \"root\");\r\n\t\t\t\t\t\tStatement statement = connection.createStatement();\r\n\r\n\t\t\t\t\t\tString tableName = \"ordenes\";\r\n\t\t\t\t\t\tString query = \"SELECT MAX(ID) FROM \" + tableName;\r\n\t\t\t\t\t\tResultSet resultSet = statement.executeQuery(query);\r\n\r\n\t\t\t\t\t\tif (resultSet.next()) {\r\n\t\t\t\t\t\t\torderId = resultSet.getInt(1) + 1;\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tresultSet.close();\r\n\t\t\t\t\t\tstatement.close();\r\n\t\t\t\t\t\tconnection.close();\r\n\t\t\t\t\t} catch (SQLException ex) {\r\n\t\t\t\t\t\tex.printStackTrace();\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tString tableName = orderId + \"_\" + selectedCliente.replace(\" \", \"_\");\r\n\r\n\t\t\t\t\ttry {\r\n\t\t\t\t\t\tConnection connection = DriverManager.getConnection(\"jdbc:mysql://localhost:3306/ordenes\", \"root\", \"root\");\r\n\t\t\t\t\t\tStatement statement = connection.createStatement();\r\n\r\n\t\t\t\t\t\tString createTableQuery = \"CREATE TABLE IF NOT EXISTS ordenes \" +\r\n\t\t\t\t\t\t\t\t\"(ID INT AUTO_INCREMENT, Nombre VARCHAR(255), Direccion VARCHAR(255), Platillos VARCHAR(255), Precio VARCHAR(255), Total DOUBLE, PRIMARY KEY (ID))\";\r\n\t\t\t\t\t\tstatement.executeUpdate(createTableQuery);\r\n\r\n\t\t\t\t\t\t// Insert the data\r\n\t\t\t\t\t\tString insertQuery = \"INSERT INTO \" + tableName + \"(Nombre, Direccion, Platillos, Precio, Total) \" +\r\n\t\t\t\t\t\t\t\t\"VALUES ('\" + selectedCliente + \"', '\" + selectedDireccion + \"', '\" + platillosBuilder.toString() + \"', '\" +\r\n\t\t\t\t\t\t\t\tprecioBuilder.toString() + \"', \" + total + \")\";\r\n\t\t\t\t\t\tstatement.executeUpdate(insertQuery);\r\n\r\n\t\t\t\t\t\tstatement.close();\r\n\t\t\t\t\t\tconnection.close();\r\n\r\n\t\t\t\t\t\tJOptionPane.showMessageDialog(null, \"Orden creada\", \"√âxito\", JOptionPane.INFORMATION_MESSAGE);\r\n\t\t\t\t\t} catch (SQLException ex) {\r\n\t\t\t\t\t\tex.printStackTrace();\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tplatillosTableModel.setRowCount(0);\r\n\r\n\t\t\t\t\tplatilloaelegirlbox.setSelectedIndex(-1);\r\n\t\t\t\t\tplatilloaremoverbox.setSelectedIndex(-1);\r\n\t\t\t\t\tplatilloaremoverbox.removeAllItems();\r\n\t\t\t\t\tTotalporcompralbl.setText(\"Total: 0\");\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\t\tJButton backCCord = new JButton(new ImageIcon(\"BotonRetroceder.png\"));\r\n\t\tbackCCord.setBounds(10, 11, 35, 33);\r\n\t\tbackCCord.addActionListener(new ActionListener() {\r\n\t\t\t@Override\r\n\t\t\tpublic void actionPerformed(ActionEvent e) {\r\n\t\t\t\tremove(CrearOrden);\r\n\t\t\t\tadd(Ordenes);\r\n\t\t\t\trepaint();\r\n\t\t\t\trevalidate();\r\n\t\t\t}\r\n\t\t});\r\n\t\tFondoCrearorden.add(backCCord);\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\t\t//------pantalla edicion de Orden------\r\n\r\n\t\tEditarOrden.setLayout(null);\r\n\r\n\t\tJPanel EditarOrdenes = new JPanel();\r\n\t\tEditarOrdenes.setBounds(0, 0, 977, 681);\r\n\t\tEditarOrdenes.setBackground(new Color(255, 128, 0));\r\n\t\tEditarOrdenes.setLayout(null);\r\n\t\tEditarOrden.add(EditarOrdenes);\r\n\r\n\t\tString[] columnNamesEditarOrd = {\"ID\",\"Nombre\",\"Platillos\",\"Total\"};\r\n\t\tDefaultTableModel tableModelEditarOrd = new DefaultTableModel(columnNamesEditarOrd, 0);\r\n\t\tJTable tablaEditarOrd = new JTable(tableModelEditarOrd);\r\n\r\n\t\ttablaEditarOrd.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);\r\n\r\n\t\tJScrollPane scrollPaneEditarOrd = new JScrollPane(tablaEditarOrd);\r\n\t\tscrollPaneEditarOrd.setBounds(131, 257, 606, 300);\r\n\t\tEditarOrdenes.add(scrollPaneEditarOrd);\r\n\r\n\t\tDefaultComboBoxModel<String> comboBoxModelEditarOrd = new DefaultComboBoxModel<>();\r\n\t\tJComboBox<String> comboBoxEditarOrd = new JComboBox<>(comboBoxModelEditarOrd);\r\n\t\tcomboBoxEditarOrd.setBounds(757, 257, 160, 30);\r\n\t\tEditarOrdenes.add(comboBoxEditarOrd);\r\n\r\n\r\n\r\n\t\tJButton btnEditarTablaOrd = new JButton(\"Editar Orden\");\r\n\t\tbtnEditarTablaOrd.setFocusable(false);\r\n\t\tbtnEditarTablaOrd.setBounds(757, 383, 160, 32);\r\n\t\tEditarOrdenes.add(btnEditarTablaOrd);\r\n\t\tbtnEditarTablaOrd.addActionListener(new ActionListener() {\r\n\t\t\t@Override\r\n\t\t\tpublic void actionPerformed(ActionEvent e) {\r\n\t\t\t\tremove(EditarOrden);\r\n\t\t\t\tadd(PanelEditarOrden);\r\n\t\t\t\trepaint();\r\n\t\t\t\trevalidate();\r\n\t\t\t}\r\n\t\t});\r\n\t\tEditarOrdenes.add(btnEditarTablaOrd);\r\n\r\n\r\n\r\n\t\tJPanel panelEditarOrd2 = new JPanel();\r\n\t\tpanelEditarOrd2.setBackground(Color.GRAY);\r\n\t\tpanelEditarOrd2.setBounds(131, 215, 606, 42);\r\n\t\tEditarOrdenes.add(panelEditarOrd2);\r\n\t\tpanelEditarOrd2.setLayout(null);\r\n\r\n\t\tJLabel tituloEditOrd = new JLabel(\"Orden a Editar\");\r\n\t\ttituloEditOrd .setFont(new Font(\"Arial Black\", Font.PLAIN, 16));\r\n\t\ttituloEditOrd .setBounds(250, 11, 190, 20);\r\n\t\tpanelEditarOrd2.add(tituloEditOrd );\r\n\r\n\t\tJLabel Editartitulo = new JLabel(\"Editar Ordenes\");\r\n\t\tEditartitulo .setFont(new Font(\"Arial Black\", Font.PLAIN, 30));\r\n\t\tEditartitulo .setBounds(330, 137, 300, 50);\r\n\t\tEditarOrdenes.add(Editartitulo );\r\n\r\n\r\n\t\tJButton backETOrd = new JButton(new ImageIcon(\"BotonRetroceder.png\"));\r\n\t\tbackETOrd.setBounds(10, 11, 35, 33);\r\n\t\tbackETOrd.addActionListener(new ActionListener() {\r\n\t\t\t@Override\r\n\t\t\tpublic void actionPerformed(ActionEvent e) {\r\n\t\t\t\tremove( EditarOrden);\r\n\t\t\t\tadd(Ordenes);\r\n\t\t\t\trepaint();\r\n\t\t\t\trevalidate();\r\n\t\t\t}\r\n\t\t});\r\n\t\tEditarOrdenes.add(backETOrd);\r\n\r\n\r\n//tabla conecta base de datos\r\n\t\t\ttry {\r\n\t\t\tConnection connection = DriverManager.getConnection(\"jdbc:mysql://localhost:3306/ordenes\", \"root\", \"root\");\r\n\t\t\tStatement statement = connection.createStatement();\r\n\r\n\t\t\tString selectQuery = \"SELECT ID, Nombre, Platillos, Total FROM historialbueno\";\r\n\t\t\tResultSet resultSet = statement.executeQuery(selectQuery);\r\n\r\n\t\t\ttableModelEditarOrd.setRowCount(0);\r\n\r\n\t\t\twhile (resultSet.next()) {\r\n\t\t\t\tint id = resultSet.getInt(\"ID\");\r\n\t\t\t\tString nombre = resultSet.getString(\"Nombre\");\r\n\t\t\t\tString platillos = resultSet.getString(\"Platillos\");\r\n\t\t\t\tdouble total = resultSet.getDouble(\"Total\");\r\n\r\n\t\t\t\tObject[] rowData = {id, nombre, platillos, total};\r\n\t\t\t\ttableModelEditarOrd.addRow(rowData);\r\n\t\t\t}\r\n\r\n\t\t\tresultSet.close();\r\n\t\t\tstatement.close();\r\n\t\t\tconnection.close();\r\n\t\t} catch (SQLException ex) {\r\n\t\t\tex.printStackTrace();\r\n\t\t}\r\n\r\n//conecta el combobox con la base de datos\r\n\t\tcomboBoxModelEditarOrd.removeAllElements();\r\n\r\n\t\ttry {\r\n\t\t\tConnection connection = DriverManager.getConnection(\"jdbc:mysql://localhost:3306/ordenes\", \"root\", \"root\");\r\n\t\t\tStatement statement = connection.createStatement();\r\n\r\n\t\t\tString selectQuery = \"SELECT ID, Nombre FROM historialbueno\";\r\n\t\t\tResultSet resultSet = statement.executeQuery(selectQuery);\r\n\r\n\t\t\twhile (resultSet.next()) {\r\n\t\t\t\tint id = resultSet.getInt(\"ID\");\r\n\t\t\t\tString nombre = resultSet.getString(\"Nombre\");\r\n\r\n\t\t\t\tString item = id + \" - \" + nombre;\r\n\t\t\t\tcomboBoxModelEditarOrd.addElement(item);\r\n\t\t\t}\r\n\r\n\t\t\tresultSet.close();\r\n\t\t\tstatement.close();\r\n\t\t\tconnection.close();\r\n\t\t} catch (SQLException ex) {\r\n\t\t\tex.printStackTrace();\r\n\t\t}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\t\t//-----panel editar Ordenes-----\r\n\t\tPanelEditarOrden.setLayout(null);\r\n\r\n\t\tJPanel EditOrdenes1 = new JPanel();\r\n\t\tEditOrdenes1.setBounds(0, 0, 977, 681);\r\n\t\tEditOrdenes1.setBackground(new Color(255, 128, 0));\r\n\t\tEditOrdenes1.setLayout(null);\r\n\t\tPanelEditarOrden.add(EditOrdenes1);\r\n\r\n\t\tJPanel EditOrdenes2 = new JPanel();\r\n\t\tEditOrdenes2.setBounds(100, 100, 750, 426);\r\n\t\tEditOrdenes1.add(EditOrdenes2);\r\n\t\tEditOrdenes2.setLayout(null);\r\n\r\n\r\n\r\n\t\tJLabel clienteaelegirlbl2 = new JLabel(\"Seleccione al cliente para la orden\");\r\n\t\tclienteaelegirlbl2.setForeground(new Color(0, 0, 0));\r\n\t\tclienteaelegirlbl2.setFont(new Font(\"Tahoma\", Font.BOLD, 17));\r\n\t\tclienteaelegirlbl2.setBounds(10, 10, 360, 32);\r\n\t\tEditOrdenes2.add(clienteaelegirlbl2);\r\n\r\n\t\tJLabel platilloaelegirlbl2 = new JLabel(\"Seleccione los platillos para la orden\");\r\n\t\tplatilloaelegirlbl2.setForeground(new Color(0, 0, 0));\r\n\t\tplatilloaelegirlbl2.setFont(new Font(\"Tahoma\", Font.BOLD, 17));\r\n\t\tplatilloaelegirlbl2.setBounds(10, 110, 360, 32);\r\n\t\tEditOrdenes2.add(platilloaelegirlbl2);\r\n\r\n\t\tJLabel platilloaremover2 = new JLabel(\"Seleccione los platillos a remover\");\r\n\t\tplatilloaremover2.setForeground(new Color(0, 0, 0));\r\n\t\tplatilloaremover2.setFont(new Font(\"Tahoma\", Font.BOLD, 17));\r\n\t\tplatilloaremover2.setBounds(10, 210, 360, 32);\r\n\t\tEditOrdenes2.add(platilloaremover2);\r\n\r\n\t\tJLabel Totalporcompralbl2 = new JLabel(\"Total \");\r\n\t\tTotalporcompralbl2.setForeground(new Color(0, 0, 0));\r\n\t\tTotalporcompralbl2.setFont(new Font(\"Tahoma\", Font.BOLD, 17));\r\n\t\tTotalporcompralbl2.setBounds(10, 350, 360, 32);\r\n\t\tEditOrdenes2.add(Totalporcompralbl2);\r\n\r\n// JButtons\r\n\r\n\t\tJButton platilloaremoverbtn2 = new JButton(\"Remover platillo\");\r\n\t\tplatilloaremoverbtn2.setFont(new Font(\"Tahoma\", Font.BOLD, 17));\r\n\t\tplatilloaremoverbtn2.setBounds(10, 300, 270, 32);\r\n\t\tEditOrdenes2.add(platilloaremoverbtn2);\r\n\r\n\t\tJButton Agregarplatilloaordenbtn2 = new JButton(\"A√±adir platillo a orden\");\r\n\t\tAgregarplatilloaordenbtn2.setBounds(390, 150, 340, 32);\r\n\t\tAgregarplatilloaordenbtn2.setFont(new Font(\"Tahoma\", Font.BOLD, 17));\r\n\t\tEditOrdenes2.add(Agregarplatilloaordenbtn2);\r\n\r\n\t\tJButton CrearOrdenn2 = new JButton(\"Editar Orden\");\r\n\t\tCrearOrdenn2.setForeground(new Color(0, 0, 0));\r\n\t\tCrearOrdenn2.setFont(new Font(\"Tahoma\", Font.BOLD, 11));\r\n\t\tCrearOrdenn2.setBounds(350, 383, 113, 32);\r\n\t\tEditOrdenes2.add(CrearOrdenn2);\r\n\r\n\t\tJButton cancelarordenbtn2 = new JButton(\"Cancelar orden\");\r\n\t\tcancelarordenbtn2.setForeground(new Color(0, 0, 0));\r\n\t\tcancelarordenbtn2.setFont(new Font(\"Tahoma\", Font.BOLD, 11));\r\n\t\tcancelarordenbtn2.setBounds(600, 383, 113, 32);\r\n\t\tEditOrdenes2.add(cancelarordenbtn2);\r\n\r\n// ComboBoxes\r\n\r\n\t\tJComboBox<String> clienteaelegirbox2 = new JComboBox<>();\r\n\t\tclienteaelegirbox2.setFont(new Font(\"Tahoma\", Font.BOLD, 17));\r\n\t\tclienteaelegirbox2.setBounds(10, 50, 360, 32);\r\n\t\tEditOrdenes2.add(clienteaelegirbox2);\r\n\r\n\t\tJComboBox<String> platilloaelegirlbox2 = new JComboBox<>();\r\n\t\tplatilloaelegirlbox2.setFont(new Font(\"Tahoma\", Font.BOLD, 17));\r\n\t\tplatilloaelegirlbox2.setBounds(10, 150, 360, 32);\r\n\t\tEditOrdenes2.add(platilloaelegirlbox2);\r\n\r\n\t\tJComboBox<String> platilloaremoverbox2 = new JComboBox<>();\r\n\t\tplatilloaremoverbox2.setFont(new Font(\"Tahoma\", Font.BOLD, 17));\r\n\t\tplatilloaremoverbox2.setBounds(10, 250, 360, 32);\r\n\t\tEditOrdenes2.add(platilloaremoverbox2);\r\n\r\n\r\n\r\n\r\n\r\n\t\tJLabel OrdenesEdiTitulo = new JLabel(\"Editar Orden\");\r\n\t\tOrdenesEdiTitulo.setFont(new Font(\"Arial Black\", Font.PLAIN, 30));\r\n\t\tOrdenesEdiTitulo.setBounds(350, 55, 300, 50);\r\n\t\tEditOrdenes1.add(OrdenesEdiTitulo);\r\n\r\n\r\n\r\n\r\n/*\r\n\t\tbtnEditarTablaOrd.addActionListener(new ActionListener() {\r\n\t\t\t@Override\r\n\t\t\tpublic void actionPerformed(ActionEvent e) {\r\n\t\t\t\tString selectedRow = (String) comboBoxEditarOrd.getSelectedItem();\r\n\t\t\t\tif (selectedRow != null) {\r\n\t\t\t\t\tString[] rowParts = selectedRow.split(\" - \");\r\n\t\t\t\t\tint id = Integer.parseInt(rowParts[0]);\r\n\t\t\t\t\tString nombre = rowParts[1];\r\n\r\n\t\t\t\t\t// Retrieve values from the database for the selected row\r\n\t\t\t\t\ttry {\r\n\t\t\t\t\t\tConnection connection = DriverManager.getConnection(\"jdbc:mysql://localhost:3306/ordenes\", \"root\", \"root\");\r\n\t\t\t\t\t\tStatement statement = connection.createStatement();\r\n\r\n\t\t\t\t\t\tString selectQuery = \"SELECT Nombre, Platillos, Total FROM historialbueno WHERE ID = \" + id;\r\n\t\t\t\t\t\tResultSet resultSet = statement.executeQuery(selectQuery);\r\n\r\n\t\t\t\t\t\tif (resultSet.next()) {\r\n\t\t\t\t\t\t\tString nombreDB = resultSet.getString(\"Nombre\");\r\n\t\t\t\t\t\t\tString platillos = resultSet.getString(\"Platillos\");\r\n\t\t\t\t\t\t\tdouble total = resultSet.getDouble(\"Total\");\r\n\r\n\t\t\t\t\t\t\t// Update the combobox and labels with the retrieved values\r\n\t\t\t\t\t\t\tclienteaelegirbox2.setSelectedItem(nombreDB);\r\n\r\n\t\t\t\t\t\t\t// Clear the existing items in the platilloaelegirbox2 combobox\r\n\t\t\t\t\t\t\tplatilloaelegirlbox2.removeAllItems();\r\n\r\n\t\t\t\t\t\t\t// Retrieve the values from the \"platillos\" table and add them to the combobox\r\n\t\t\t\t\t\t\tString selectPlatillosQuery = \"SELECT Nombre FROM platillos\";\r\n\t\t\t\t\t\t\tResultSet platillosResultSet = statement.executeQuery(selectPlatillosQuery);\r\n\t\t\t\t\t\t\twhile (platillosResultSet.next()) {\r\n\t\t\t\t\t\t\t\tString platillo = platillosResultSet.getString(\"Nombre\");\r\n\t\t\t\t\t\t\t\tplatilloaelegirlbox2.addItem(platillo);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tplatillosResultSet.close();\r\n\r\n\t\t\t\t\t\t\tplatilloaremoverbox2.removeAllItems();\r\n\t\t\t\t\t\t\tplatilloaremoverbox2.addItem(platillos);\r\n\t\t\t\t\t\t\tTotalporcompralbl2.setText(\"Total: \" + total);\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tresultSet.close();\r\n\t\t\t\t\t\tstatement.close();\r\n\t\t\t\t\t\tconnection.close();\r\n\t\t\t\t\t} catch (SQLException ex) {\r\n\t\t\t\t\t\tex.printStackTrace();\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tremove(EditarOrden);\r\n\t\t\t\tadd(PanelEditarOrden);\r\n\t\t\t\trepaint();\r\n\t\t\t\trevalidate();\r\n\t\t\t}\r\n\t\t});\r\n\r\n*/\r\n\r\n\r\n\t\t//CONECTORES\r\n\r\n\r\n\t\ttry {\r\n\t\t\tConnection connection = DriverManager.getConnection(\"jdbc:mysql://localhost:3306/clientes\", \"root\", \"root\");\r\n\t\t\tStatement statement = connection.createStatement();\r\n\t\t\tString query = \"SELECT Nombre, Apellidos FROM clientes\";\r\n\t\t\tResultSet resultSet = statement.executeQuery(query);\r\n\r\n\t\t\twhile (resultSet.next()) {\r\n\t\t\t\tString nombre = resultSet.getString(\"Nombre\");\r\n\t\t\t\tString apellidos = resultSet.getString(\"Apellidos\");\r\n\t\t\t\tString clienteData = nombre + \" \" + apellidos;\r\n\t\t\t\tclienteaelegirbox2.addItem(clienteData);\r\n\t\t\t}\r\n\r\n\t\t\tresultSet.close();\r\n\t\t\tstatement.close();\r\n\t\t\tconnection.close();\r\n\t\t} catch (SQLException ex) {\r\n\t\t\tex.printStackTrace();\r\n\t\t}\r\n\r\n\r\n\t\ttry {\r\n\t\t\tConnection connection = DriverManager.getConnection(\"jdbc:mysql://localhost:3306/platillos\", \"root\", \"root\");\r\n\t\t\tStatement statement = connection.createStatement();\r\n\t\t\tString query = \"SHOW TABLES\";\r\n\t\t\tResultSet resultSet = statement.executeQuery(query);\r\n\r\n\t\t\twhile (resultSet.next()) {\r\n\t\t\t\tString tableName = resultSet.getString(1);\r\n\r\n\t\t\t\tString price = \"\";\r\n\t\t\t\tString getPriceQuery = \"SELECT Precio FROM \" + tableName + \" LIMIT 1\";\r\n\t\t\t\tStatement getPriceStatement = connection.createStatement();\r\n\t\t\t\tResultSet getPriceResult = getPriceStatement.executeQuery(getPriceQuery);\r\n\t\t\t\tif (getPriceResult.next()) {\r\n\t\t\t\t\tprice = getPriceResult.getString(\"Precio\");\r\n\t\t\t\t}\r\n\t\t\t\tgetPriceResult.close();\r\n\t\t\t\tgetPriceStatement.close();\r\n\r\n\t\t\t\tString itemData = tableName + \" - Precio: \" + price;\r\n\t\t\t\tplatilloaelegirlbox2.addItem(itemData);\r\n\t\t\t}\r\n\r\n\t\t\tresultSet.close();\r\n\t\t\tstatement.close();\r\n\t\t\tconnection.close();\r\n\t\t} catch (SQLException ex) {\r\n\t\t\tex.printStackTrace();\r\n\t\t}\r\n\r\n\r\n\r\n\t\tJTable platillosenordentable2 = new JTable();\r\n\t\tplatillosenordentable2.setBounds(390, 210, 340, 160);\r\n\r\n\t\tDefaultTableModel tablemodeltablaorden2 = new DefaultTableModel();\r\n\t\ttablemodeltablaorden2.addColumn(\"Platillo\");\r\n\t\ttablemodeltablaorden2.addColumn(\"Precio\");\r\n\t\tplatillosenordentable2.setModel(tablemodeltablaorden2);\r\n\r\n\t\tJScrollPane scrollPane231 = new JScrollPane(platillosenordentable2);\r\n\t\tscrollPane231.setBounds(390, 210, 340, 160);\r\n\t\tEditOrdenes2.add(scrollPane231);\r\n\r\n\r\n//jbutton actionlisteners\r\n\t\tAgregarplatilloaordenbtn2.addActionListener(new ActionListener() {\r\n\t\t\tpublic void actionPerformed(ActionEvent e) {\r\n\t\t\t\tString selectedPlatillo = (String) platilloaelegirlbox2.getSelectedItem();\r\n\t\t\t\tplatilloaremoverbox2.addItem(selectedPlatillo);\r\n\r\n\t\t\t\tString tableName = selectedPlatillo.substring(0, selectedPlatillo.indexOf(\" - \"));\r\n\t\t\t\tdouble price = 0.0;\r\n\r\n\t\t\t\ttry {\r\n\t\t\t\t\tConnection connection = DriverManager.getConnection(\"jdbc:mysql://localhost:3306/platillos\", \"root\", \"root\");\r\n\t\t\t\t\tStatement statement = connection.createStatement();\r\n\t\t\t\t\tString getPriceQuery = \"SELECT Precio FROM \" + tableName + \" LIMIT 1\";\r\n\t\t\t\t\tResultSet getPriceResult = statement.executeQuery(getPriceQuery);\r\n\t\t\t\t\tif (getPriceResult.next()) {\r\n\t\t\t\t\t\tprice = getPriceResult.getDouble(\"Precio\");\r\n\t\t\t\t\t}\r\n\t\t\t\t\tgetPriceResult.close();\r\n\t\t\t\t\tstatement.close();\r\n\t\t\t\t\tconnection.close();\r\n\t\t\t\t} catch (SQLException ex) {\r\n\t\t\t\t\tex.printStackTrace();\r\n\t\t\t\t}\r\n\r\n\t\t\t\tDefaultTableModel model = (DefaultTableModel) platillosenordentable2.getModel();\r\n\t\t\t\tmodel.addRow(new Object[]{tableName, price});\r\n\r\n\t\t\t\tdouble total = 0.0;\r\n\t\t\t\tfor (int i = 0; i < model.getRowCount(); i++) {\r\n\t\t\t\t\tString rowPrice = model.getValueAt(i, 1).toString();\r\n\t\t\t\t\ttotal += Double.parseDouble(rowPrice);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tTotalporcompralbl2.setText(\"Total: \" + total);\r\n\r\n\t\t\t\tmodel.fireTableDataChanged();\r\n\t\t\t\tplatillosenordentable2.repaint();\r\n\t\t\t}\r\n\t\t});\r\n\r\n\r\n\t\tplatilloaremoverbtn2.addActionListener(new ActionListener() {\r\n\t\t\tpublic void actionPerformed(ActionEvent e) {\r\n\t\t\t\tint selectedIndex = platilloaremoverbox2.getSelectedIndex();\r\n\t\t\t\tif (selectedIndex != -1) {\r\n\t\t\t\t\tplatilloaremoverbox2.removeItemAt(selectedIndex);\r\n\r\n\t\t\t\t\tDefaultTableModel tableModel = (DefaultTableModel) platillosenordentable2.getModel();\r\n\t\t\t\t\tdouble removedPrice = Double.parseDouble(tableModel.getValueAt(selectedIndex, 1).toString());\r\n\r\n\t\t\t\t\ttableModel.removeRow(selectedIndex);\r\n\r\n\t\t\t\t\tdouble total = 0.0;\r\n\t\t\t\t\tfor (int i = 0; i < tableModel.getRowCount(); i++) {\r\n\t\t\t\t\t\tString rowPrice = tableModel.getValueAt(i, 1).toString();\r\n\t\t\t\t\t\ttotal += Double.parseDouble(rowPrice);\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tTotalporcompralbl2.setText(\"Total: \" + total);\r\n\r\n\t\t\t\t\ttableModel.fireTableDataChanged();\r\n\t\t\t\t\tplatillosenordentable2.repaint();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\t\tJButton backEditOrd = new JButton(new ImageIcon(\"BotonRetroceder.png\"));\r\n\t\tbackEditOrd .setBounds(10, 11, 35, 33);\r\n\t\tbackEditOrd .addActionListener(new ActionListener() {\r\n\t\t\t@Override\r\n\t\t\tpublic void actionPerformed(ActionEvent e) {\r\n\t\t\t\tremove( PanelEditarOrden);\r\n\t\t\t\tadd(EditarOrden);\r\n\t\t\t\trepaint();\r\n\t\t\t\trevalidate();\r\n\t\t\t}\r\n\t\t});\r\n\t\tEditOrdenes1.add(backEditOrd);\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\t\t//----pantalla eliminar Ordenes----\r\n\t\tEliminarOrden.setLayout(null);\r\n\r\n\t\tJPanel eliminarOrders = new JPanel();\r\n\t\teliminarOrders.setBounds(0, 0, 977, 681);\r\n\t\teliminarOrders.setBackground(new Color(255, 128, 0));\r\n\t\teliminarOrders.setLayout(null);\r\n\t\tEliminarOrden.add(eliminarOrders);\r\n\r\n\t\tString[] columnNamesEliminarOrd = {\"Ordenes\"};\r\n\t\tDefaultTableModel tableModelEliminarOrd = new DefaultTableModel(columnNamesEliminarOrd, 0);\r\n\t\tJTable tablaEliminarOrd = new JTable(tableModelEliminarOrd);\r\n\r\n\t\ttablaEliminarOrd.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);\r\n\r\n\t\tJScrollPane scrollPaneEliminarOrd = new JScrollPane(tablaEliminarOrd);\r\n\t\tscrollPaneEliminarOrd.setBounds(131, 257, 606, 300);\r\n\t\teliminarOrders.add(scrollPaneEliminarOrd);\r\n\r\n\t\tDefaultComboBoxModel<String> comboBoxModelEliminarOrd = new DefaultComboBoxModel<>();\r\n\t\tJComboBox<String> comboBoxEliminarOrd = new JComboBox<>(comboBoxModelEliminarOrd );\r\n\t\tcomboBoxEliminarOrd.setBounds(757, 257, 160, 30);\r\n\t\teliminarOrders.add(comboBoxEliminarOrd);\r\n\r\n\t\tJButton btnEliminarTablaOrd = new JButton(\"Eliminar Orden\");\r\n\t\tbtnEliminarTablaOrd.setFocusable(false);\r\n\t\tbtnEliminarTablaOrd.setBounds(757, 297, 160, 30);\r\n\t\teliminarOrders.add(btnEliminarTablaOrd);\r\n\r\n\t\tJPanel panelEliminarOrd2 = new JPanel();\r\n\t\tpanelEliminarOrd2.setBackground(Color.GRAY);\r\n\t\tpanelEliminarOrd2.setBounds(131, 215, 606, 42);\r\n\t\teliminarOrders.add(panelEliminarOrd2);\r\n\t\tpanelEliminarOrd2.setLayout(null);\r\n\r\n\t\tJLabel tituloDeleteOrd = new JLabel(\"Orden a Eliminar\");\r\n\t\ttituloDeleteOrd.setFont(new Font(\"Arial Black\", Font.PLAIN, 16));\r\n\t\ttituloDeleteOrd.setBounds(230, 11, 190, 20);\r\n\t\tpanelEliminarOrd2.add(tituloDeleteOrd);\r\n\r\n\t\tJLabel Deletestitulo = new JLabel(\"Eliminar Ordenes\");\r\n\t\tDeletestitulo .setFont(new Font(\"Arial Black\", Font.PLAIN, 30));\r\n\t\tDeletestitulo .setBounds(300, 137, 300, 50);\r\n\t\teliminarOrders.add(Deletestitulo );\r\n\r\n\r\n\t\tJButton backEliminarOrdenn = new JButton(new ImageIcon(\"BotonRetroceder.png\"));\r\n\t\tbackEliminarOrdenn.setBounds(10, 11, 35, 33);\r\n\t\tbackEliminarOrdenn.addActionListener(new ActionListener() {\r\n\t\t\t@Override\r\n\t\t\tpublic void actionPerformed(ActionEvent e) {\r\n\t\t\t\tremove(EliminarOrden);\r\n\t\t\t\tadd(Ordenes);\r\n\t\t\t\trepaint();\r\n\t\t\t\trevalidate();\r\n\t\t\t}\r\n\t\t});\r\n\t\teliminarOrders.add(backEliminarOrdenn);\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\t\t//--------------------------------------------inventario--------------------------------------------------------\r\n\r\n\r\n\r\n\r\n\t\t//-----Menu inventario------\r\n\r\n\t\t//\tcontentPane.add(Inventario);\r\n\t\tInventario.setLayout(null);\r\n\r\n\t\tJPanel Panelinventario = new JPanel();\r\n\t\tPanelinventario.setLayout(null);\r\n\t\tPanelinventario.setBackground(Color.WHITE);\r\n\t\tPanelinventario.setOpaque(false);\r\n\t\tPanelinventario.setBounds(59, 241, 827, 347);\r\n\t\tInventario.add(Panelinventario);\r\n\r\n\t\tJButton Consultarinventario = new JButton(\"Consultar\");\r\n\t\tConsultarinventario.setFont(new Font(\"Arial Black\", Font.PLAIN, 20));\r\n\t\tConsultarinventario.setBackground(new Color(255, 128, 0));\r\n\t\tConsultarinventario.setBounds(112, 95, 217, 60);\r\n\t\tPanelinventario.add(Consultarinventario);\r\n\r\n\t\tConsultarinventario.addActionListener(new ActionListener() {\r\n\t\t\t@Override\r\n\t\t\tpublic void actionPerformed(ActionEvent e) {\r\n\t\t\t\tremove(Inventario);\r\n\t\t\t\tadd(ConsultaInv);\r\n\t\t\t\trepaint();\r\n\t\t\t\trevalidate();\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\tJButton EditarInventario = new JButton(\"Editar\");\r\n\t\tEditarInventario.setFont(new Font(\"Arial Black\", Font.PLAIN, 20));\r\n\t\tEditarInventario.setBackground(new Color(255, 128, 0));\r\n\t\tEditarInventario.setBounds(112, 198, 217, 60);\r\n\t\tPanelinventario.add(EditarInventario);\r\n\r\n\t\tEditarInventario.addActionListener(new ActionListener() {\r\n\t\t\t@Override\r\n\t\t\tpublic void actionPerformed(ActionEvent e) {\r\n\t\t\t\tremove(Inventario);\r\n\t\t\t\tadd(EditarINv);\r\n\t\t\t\trepaint();\r\n\t\t\t\trevalidate();\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\tJButton EliminarInventario = new JButton(\"Eliminar\");\r\n\t\tEliminarInventario.setFont(new Font(\"Arial Black\", Font.PLAIN, 20));\r\n\t\tEliminarInventario.setBackground(new Color(255, 128, 0));\r\n\t\tEliminarInventario.setBounds(490, 198, 217, 60);\r\n\t\tPanelinventario.add(EliminarInventario);\r\n\r\n\t\tEliminarInventario.addActionListener(new ActionListener() {\r\n\t\t\t@Override\r\n\t\t\tpublic void actionPerformed(ActionEvent e) {\r\n\t\t\t\tremove(Inventario);\r\n\t\t\t\tadd(EliminarINv);\r\n\t\t\t\trepaint();\r\n\t\t\t\trevalidate();\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\tJButton CrearInventario = new JButton(\"Crear\");\r\n\t\tCrearInventario.setFont(new Font(\"Arial Black\", Font.PLAIN, 20));\r\n\t\tCrearInventario.setBackground(new Color(255, 128, 0));\r\n\t\tCrearInventario.setBounds(490, 95, 217, 60);\r\n\t\tPanelinventario.add(CrearInventario);\r\n\r\n\t\tCrearInventario.addActionListener(new ActionListener() {\r\n\t\t\t@Override\r\n\t\t\tpublic void actionPerformed(ActionEvent e) {\r\n\t\t\t\tremove(Inventario);\r\n\t\t\t\tadd(NuevoArticulo);\r\n\t\t\t\trepaint();\r\n\t\t\t\trevalidate();\r\n\t\t\t}\r\n\t\t});\r\n\r\n\r\n\t\tJLabel TituloInventario = new JLabel(new ImageIcon(\"menuinventario.png\"));\r\n\t\tTituloInventario.setBounds(300, 20, 350, 233);\r\n\t\tInventario.add(TituloInventario);\r\n\r\n\r\n\t\tJButton btnbackinventario = new JButton(new ImageIcon(\"BotonRetroceder.png\"));\r\n\t\tbtnbackinventario.setBounds(10, 11, 35, 33);\r\n\t\tInventario.add(btnbackinventario);\r\n\t\tbtnbackinventario.addActionListener(new ActionListener() {\r\n\t\t\t@Override\r\n\t\t\tpublic void actionPerformed(ActionEvent e) {\r\n\t\t\t\tremove(Inventario);\r\n\t\t\t\tadd(Inicio);\r\n\t\t\t\trepaint();\r\n\t\t\t\trevalidate();\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\tJLabel InventarioIcon = new JLabel(new ImageIcon(\"Inventariofondo.png\"));\r\n\t\tInventarioIcon.setBounds(0, 0, 977, 681);\r\n\t\tInventarioIcon.setVisible(true);\r\n\t\tInventarioIcon.setOpaque(true);\r\n\t\tInventario.add(InventarioIcon);\r\n\t\trepaint();\r\n\t\trevalidate();\r\n\r\n\r\n\r\n\r\n\t\t//----Consultar inventario-----\r\n\r\n\r\n\t\tConsultaInv.setBackground(new Color(255, 128, 0));\r\n// contentPane.add(ConsultaInv);\r\n\t\tConsultaInv.setLayout(null);\r\n\r\n\t\tJLabel consultarInventario = new JLabel(\"Consultar Inventario\");\r\n\t\tconsultarInventario.setFont(new Font(\"Arial Black\", Font.PLAIN, 24));\r\n\t\tconsultarInventario.setBackground(new Color(128, 128, 0));\r\n\t\tconsultarInventario.setForeground(new Color(0, 0, 0));\r\n\t\tconsultarInventario.setBounds(331, 23, 300, 58);\r\n\t\tConsultaInv.add(consultarInventario);\r\n\r\n\t\tJLabel lblArticulosporacabar = new JLabel(\"Articulos por agotarse\\r\\n\");\r\n\t\tlblArticulosporacabar.setForeground(new Color(255, 255, 255));\r\n\t\tlblArticulosporacabar.setFont(new Font(\"Arial Black\", Font.PLAIN, 20));\r\n\t\tlblArticulosporacabar.setBounds(354, 74, 279, 29);\r\n\t\tConsultaInv.add(lblArticulosporacabar);\r\n\r\n\t\tJPanel widget1 = new JPanel();\r\n\t\twidget1.setBounds(34, 129, 197, 58);\r\n\t\tConsultaInv.add(widget1);\r\n\r\n\t\tJPanel widget2 = new JPanel();\r\n\t\twidget2.setBounds(265, 129, 197, 58);\r\n\t\tConsultaInv.add(widget2);\r\n\r\n\t\tJPanel widget3 = new JPanel();\r\n\t\twidget3.setBounds(729, 129, 197, 58);\r\n\t\tConsultaInv.add(widget3);\r\n\r\n\t\tJPanel widget4 = new JPanel();\r\n\t\twidget4.setBounds(498, 129, 197, 58);\r\n\t\tConsultaInv.add(widget4);\r\n\r\n\t\tJPanel paneldetablainventario = new JPanel();\r\n\t\tpaneldetablainventario.setBounds(34, 277, 892, 35);\r\n\t\tpaneldetablainventario.setBackground(Color.gray);\r\n\t\tpaneldetablainventario.setLayout(null);\r\n\t\tConsultaInv.add(paneldetablainventario);\r\n\r\n\t\tJLabel articulodeinventario = new JLabel(\"Articulo\");\r\n\t\tarticulodeinventario.setFont(new Font(\"Arial Black\", Font.PLAIN, 20));\r\n\t\tarticulodeinventario.setBounds(110,-5,100,50);\r\n\t\tpaneldetablainventario.add(articulodeinventario);\r\n\r\n\t\tJLabel tipodeunidadlbl = new JLabel(\"Unidad\");\r\n\t\ttipodeunidadlbl.setFont(new Font(\"Arial Black\", Font.PLAIN, 20));\r\n\t\ttipodeunidadlbl.setBounds(400,-5,100,50);\r\n\t\tpaneldetablainventario.add(tipodeunidadlbl);\r\n\r\n\t\tJLabel cantidadeninvlbl = new JLabel(\"Cantidad\");\r\n\t\tcantidadeninvlbl.setFont(new Font(\"Arial Black\", Font.PLAIN, 20));\r\n\t\tcantidadeninvlbl.setBounds(695,-5,100,50);\r\n\t\tpaneldetablainventario.add(cantidadeninvlbl);\r\n\r\n\r\n\r\n\t\tJPanel panel_4 = new JPanel();\r\n\t\tpanel_4.setBackground(new Color(255, 218, 168));\r\n\t\tpanel_4.setBounds(34, 312, 892, 257);\r\n\t\tConsultaInv.add(panel_4);\r\n\t\tpanel_4.setLayout(new BorderLayout());\r\n\r\n\t\tJTable consultainvtable = new JTable();\r\n\t\tDefaultTableModel tableModel = new DefaultTableModel();\r\n\t\ttableModel.addColumn(\"Nombre\");\r\n\t\ttableModel.addColumn(\"Unidad\");\r\n\t\ttableModel.addColumn(\"Cantidad\");\r\n\t\tconsultainvtable.setModel(tableModel);\r\n\r\n\t\tJScrollPane scrollPane = new JScrollPane(consultainvtable);\r\n\t\tpanel_4.add(scrollPane, BorderLayout.CENTER);\r\n\r\n\r\n\t\ttry {\r\n\t\t\tString url = \"jdbc:mysql://localhost:3306/clientes\";\r\n\t\t\tString username = \"your-username\";\r\n\t\t\tString password = \"your-password\";\r\n\t\t\tConnection connection = DriverManager.getConnection(url, username, password);\r\n\r\n\t\t\tStatement statement = connection.createStatement();\r\n\t\t\tString query = \"SELECT Nombre, Unidad, Cantidad FROM inventario\";\r\n\t\t\tResultSet resultSet = statement.executeQuery(query);\r\n\r\n\t\t\twhile (resultSet.next()) {\r\n\t\t\t\tString nombre = resultSet.getString(\"Nombre\");\r\n\t\t\t\tString unidad = resultSet.getString(\"Unidad\");\r\n\t\t\t\tint cantidad = resultSet.getInt(\"Cantidad\");\r\n\t\t\t\ttableModel.addRow(new Object[]{nombre, unidad, cantidad});\r\n\t\t\t}\r\n\r\n\t\t\tresultSet.close();\r\n\t\t\tstatement.close();\r\n\t\t\tconnection.close();\r\n\t\t} catch (SQLException e) {\r\n\t\t\te.printStackTrace();\r\n\t\t}\r\n\r\n\r\n\r\n\t\tJButton btnbackinvconsultar = new JButton(new ImageIcon(\"BotonRetroceder.png\"));\r\n\t\tbtnbackinvconsultar.setBounds(10, 11, 35, 33);\r\n\t\tConsultaInv.add(btnbackinvconsultar);\r\n\r\n\r\n\t\tbtnbackinvconsultar.addActionListener(new ActionListener() {\r\n\t\t\t@Override\r\n\t\t\tpublic void actionPerformed(ActionEvent e) {\r\n\t\t\t\tremove(ConsultaInv);\r\n\t\t\t\tadd(Inventario);\r\n\t\t\t\trepaint();\r\n\t\t\t\trevalidate();\r\n\t\t\t}\r\n\t\t});\r\n\r\n\r\n\r\n\r\n\t\t//----Editar inventario-----\r\n\r\n\r\n\t\tEditarINv.setBackground(new Color(255, 128, 0));\r\n\t\tEditarINv.setBounds(0, 0, 961, 642);\r\n\t\t//    contentPane.add(EditarINv);\r\n\t\tEditarINv.setLayout(null);\r\n\r\n\r\n\t\tJLabel Editarinvlbl = new JLabel(\"Editar Inventario\\r\\n\");\r\n\t\tEditarinvlbl.setFont(new Font(\"Arial Black\", Font.PLAIN, 30));\r\n\t\tEditarinvlbl.setBounds(300, 40, 350, 115);\r\n\t\tEditarINv.add(Editarinvlbl);\r\n\r\n\t\tJPanel Articuledipan = new JPanel();\r\n\t\tArticuledipan.setBackground(new Color(255, 218, 168));\r\n\t\tArticuledipan.setBounds(76, 203, 679, 381);\r\n\t\tEditarINv.add(Articuledipan);\r\n\r\n\t\tDefaultTableModel tablamodelinvconsulta = new DefaultTableModel(\r\n\t\t\t\tnew Object[]{\"Nombre\",\"Unidad\",\"Color\",\"Cantidad\"\t}, 0);\r\n\r\n\t\tJTable tablaeditarart = new JTable(tablamodelinvconsulta);\r\n\r\n\t\tJScrollPane scrollPaneediart = new JScrollPane(tablaeditarart);\r\n\t\tArticuledipan.setLayout(new BorderLayout());\r\n\t\tArticuledipan.add(scrollPaneediart, BorderLayout.CENTER);\r\n\r\n\r\n\t\tJPanel panel_1EDI = new JPanel();\r\n\t\tpanel_1EDI.setBounds(76, 155, 679, 48);\r\n\t\tpanel_1EDI.setBackground(Color.gray);\r\n\t\tEditarINv.add(panel_1EDI);\r\n\t\tpanel_1EDI.setLayout(null);\r\n\r\n\t\tJLabel Ediartlbl2 = new JLabel(\"Articulo a Editar\");\r\n\t\tEdiartlbl2.setFont(new Font(\"Arial Black\", Font.PLAIN, 20));\r\n\t\tEdiartlbl2.setBounds(262, 0, 250, 43);\r\n\t\tpanel_1EDI.add(Ediartlbl2);\r\n\r\n\t\tJButton btneditarart = new JButton(\"Editar\");\r\n\t\tbtneditarart.setBounds(770, 224, 166, 30);\r\n\t\tEditarINv.add(btneditarart);\r\n\r\n\t\tJComboBox editarartbox = new JComboBox();\r\n\t\teditarartbox.setBounds(770, 170, 160, 30);\r\n\t\tEditarINv.add(editarartbox);\r\n\r\n\t\tJButton btnbackeditarinv = new JButton(new ImageIcon(\"BotonRetroceder.png\"));\r\n\t\tbtnbackeditarinv.setBounds(10, 11, 35, 33);\r\n\t\tEditarINv.add(btnbackeditarinv);\r\n\r\n\t\t//-----Edicion--------\r\n\r\n\t\tJPanel editingPanel = new JPanel();\r\n\t\teditingPanel.setBackground(new Color(255, 128, 0));\r\n\t\teditingPanel.setBounds(0, 0, 961, 642);\r\n\t\teditingPanel.setLayout(null);\r\n\r\n\t\tJLabel tituloEditardentro = new JLabel(\"Editar Articulo\");\r\n\t\ttituloEditardentro.setBounds(380,50,300,50);\r\n\t\ttituloEditardentro.setFont(new Font(\"Arial Black\", Font.PLAIN, 30));\r\n\t\teditingPanel.add(tituloEditardentro);\r\n\r\n\t\tJPanel panel2 = new JPanel();\r\n\t\tpanel2.setBackground(new Color(255, 218, 168));\r\n\t\tpanel2.setBounds(10, 104, 932, 473);\r\n\t\tNuevoArticulo.add(panel2);\r\n\t\tpanel2.setLayout(null);\r\n\r\n\t\tJPanel editarInventario2 = new JPanel();\r\n\t\teditarInventario2.setBackground(new Color(255, 218, 168));\r\n\t\teditarInventario2.setBounds(10, 104, 932, 473);\r\n\t\teditarInventario2.setLayout(null);\r\n\t\teditingPanel.add(editarInventario2);\r\n\r\n\t\tJLabel lblnombrearticulonuevoinv2 = new JLabel(\"Nombre del articulo:\");\r\n\t\tlblnombrearticulonuevoinv2.setFont(new Font(\"Arial Black\", Font.PLAIN, 20));\r\n\t\tlblnombrearticulonuevoinv2.setBounds(358, 23, 300, 43);\r\n\t\teditarInventario2.add(lblnombrearticulonuevoinv2);\r\n\r\n\t\tJTextField textField3 = new JTextField();\r\n\t\ttextField3.setBounds(358, 62, 238, 33);\r\n\t\teditarInventario2.add(textField3);\r\n\t\ttextField3.setColumns(10);\r\n\r\n\r\n\t\tJLabel unidadartbox4 = new JLabel(\"Tipo de unidad:\");\r\n\t\tunidadartbox4.setFont(new Font(\"Arial Black\", Font.PLAIN, 20));\r\n\t\tunidadartbox4.setBounds(358, 100, 250, 43);\r\n\t\teditarInventario2.add(unidadartbox4);\r\n\r\n\r\n\t\tJComboBox<String> comboBoxunidad2 = new JComboBox<>();\r\n\t\tcomboBoxunidad2.setBounds(358, 143, 238, 30);\r\n\t\teditarInventario2.add(comboBoxunidad2);\r\n\r\n\t\tcomboBoxunidad2.addItem(\"kg\");\r\n\t\tcomboBoxunidad2.addItem(\"L\");\r\n\t\tcomboBoxunidad2.addItem(\"4L\");\r\n\t\tcomboBoxunidad2.addItem(\"2L\");\r\n\r\n\r\n\r\n\t\tJLabel colorwidgetbox2 = new JLabel(\"Color del widget:\");\r\n\t\tcolorwidgetbox2.setFont(new Font(\"Arial Black\", Font.PLAIN, 20));\r\n\t\tcolorwidgetbox2.setBounds(358, 182, 250, 43);\r\n\t\teditarInventario2.add(colorwidgetbox2);\r\n\r\n\t\tJComboBox<String> comboboxcolor2 = new JComboBox<>();\r\n\t\tcomboboxcolor2.setBounds(358, 221, 238, 30);\r\n\t\teditarInventario2.add(comboboxcolor2);\r\n\r\n\t\tcomboboxcolor2.addItem(\"Blanco\");\r\n\t\tcomboboxcolor2.addItem(\"Amarillo\");\r\n\t\tcomboboxcolor2.addItem(\"Azul\");\r\n\t\tcomboboxcolor2.addItem(\"Verde\");\r\n\t\tcomboboxcolor2.addItem(\"Rojo\");\r\n\t\tcomboboxcolor2.addItem(\"Beige\");\r\n\t\tcomboboxcolor2.addItem(\"Morado\");\r\n\r\n\t\tJLabel cantidaddelarticulo2 = new JLabel(\"Cantidad de articulo:\");\r\n\t\tcantidaddelarticulo2.setFont(new Font(\"Arial Black\", Font.PLAIN, 20));\r\n\t\tcantidaddelarticulo2.setBounds(358, 272, 250, 43);\r\n\t\teditarInventario2.add(cantidaddelarticulo2);\r\n\r\n\t\tJTextField textField_21 = new JTextField();\r\n\t\ttextField_21.setColumns(10);\r\n\t\ttextField_21.setBounds(358, 315, 238, 33);\r\n\t\teditarInventario2.add(textField_21);\r\n\r\n\t\tJButton editararticulobtn = new JButton(\"Editar\");\r\n\t\teditararticulobtn.setBackground(new Color(255, 128, 64));\r\n\t\teditararticulobtn.setFont(new Font(\"Arial Black\", Font.PLAIN, 18));\r\n\t\teditararticulobtn.setBounds(411, 419, 124, 43);\r\n\t\teditarInventario2.add(editararticulobtn);\r\n\r\n\r\n\r\n\t\teditararticulobtn.addActionListener(new ActionListener() {\r\n\t\t\t@Override\r\n\t\t\tpublic void actionPerformed(ActionEvent e) {\r\n\t\t\t\tif (editarartbox.getSelectedIndex() != -1) {\r\n\t\t\t\t\tString selectedArticulo = (String) editarartbox.getSelectedItem();\r\n\t\t\t\t\tString nombre = selectedArticulo;\r\n\r\n\t\t\t\t\tint option = JOptionPane.showConfirmDialog(null, \"¬øDesea editar el art√≠culo seleccionado?\", \"Confirmar\", JOptionPane.OK_CANCEL_OPTION);\r\n\t\t\t\t\tif (option == JOptionPane.OK_OPTION) {\r\n\t\t\t\t\t\ttry {\r\n\t\t\t\t\t\t\tConnection connection = DriverManager.getConnection(\"jdbc:mysql://localhost:3306/clientes\", \"root\", \"\");\r\n\r\n\t\t\t\t\t\t\tString nuevoNombre = textField3.getText();\r\n\t\t\t\t\t\t\tString nuevaUnidad = (String) comboBoxunidad2.getSelectedItem();\r\n\t\t\t\t\t\t\tString nuevoColor = (String) comboboxcolor2.getSelectedItem();\r\n\t\t\t\t\t\t\tString nuevaCantidad = textField_21.getText();\r\n\r\n\t\t\t\t\t\t\tString query = \"UPDATE inventario SET Nombre=?, Unidad=?, Color=?, Cantidad=? WHERE Nombre=?\";\r\n\t\t\t\t\t\t\tPreparedStatement statement = connection.prepareStatement(query);\r\n\t\t\t\t\t\t\tstatement.setString(1, nuevoNombre);\r\n\t\t\t\t\t\t\tstatement.setString(2, nuevaUnidad);\r\n\t\t\t\t\t\t\tstatement.setString(3, nuevoColor);\r\n\t\t\t\t\t\t\tstatement.setString(4, nuevaCantidad);\r\n\t\t\t\t\t\t\tstatement.setString(5, nombre);\r\n\t\t\t\t\t\t\tstatement.executeUpdate();\r\n\r\n\t\t\t\t\t\t\tstatement.close();\r\n\t\t\t\t\t\t\tconnection.close();\r\n\r\n\t\t\t\t\t\t\ttablamodelinvconsulta.setRowCount(0);\r\n\r\n\t\t\t\t\t\t\tconnection = DriverManager.getConnection(\"jdbc:mysql://localhost:3306/clientes\", \"root\", \"\");\r\n\t\t\t\t\t\t\tstatement = connection.prepareStatement(\"SELECT Nombre, Unidad, Color, Cantidad FROM inventario\");\r\n\t\t\t\t\t\t\tResultSet resultSet = statement.executeQuery();\r\n\r\n\t\t\t\t\t\t\twhile (resultSet.next()) {\r\n\t\t\t\t\t\t\t\tString updatedNombre = resultSet.getString(\"Nombre\");\r\n\t\t\t\t\t\t\t\tString unidad = resultSet.getString(\"Unidad\");\r\n\t\t\t\t\t\t\t\tString color = resultSet.getString(\"Color\");\r\n\t\t\t\t\t\t\t\tString cantidad = resultSet.getString(\"Cantidad\");\r\n\r\n\t\t\t\t\t\t\t\tObject[] rowData = {updatedNombre, unidad, color, cantidad};\r\n\t\t\t\t\t\t\t\ttablamodelinvconsulta.addRow(rowData);\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\tstatement.close();\r\n\t\t\t\t\t\t\tconnection.close();\r\n\t\t\t\t\t\t} catch (SQLException ex) {\r\n\t\t\t\t\t\t\tex.printStackTrace();\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tint selectedRow = tablaeditarart.getSelectedRow();\r\n\r\n\t\t\t\t\t\teditarartbox.removeItem(selectedArticulo);\r\n\t\t\t\t\t\teditarartbox.setSelectedIndex(-1);\r\n\r\n\t\t\t\t\t\tif (selectedRow != -1) {\r\n\t\t\t\t\t\t\ttablaeditarart.setValueAt(textField3.getText(), selectedRow, 0);\r\n\t\t\t\t\t\t\ttablaeditarart.setValueAt(comboBoxunidad2.getSelectedItem(), selectedRow, 1);\r\n\t\t\t\t\t\t\ttablaeditarart.setValueAt(comboboxcolor2.getSelectedItem(), selectedRow, 2);\r\n\t\t\t\t\t\t\ttablaeditarart.setValueAt(textField_21.getText(), selectedRow, 3);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\r\n\r\n\t\tJButton backButton = new JButton(new ImageIcon(\"BotonRetroceder.png\"));\r\n\t\tbackButton.setBounds(10, 11, 35, 33);\r\n\t\teditingPanel.add(backButton);\r\n\t\tbtneditarart.addActionListener(new ActionListener() {\r\n\t\t\t@Override\r\n\t\t\tpublic void actionPerformed(ActionEvent e) {\r\n\t\t\t\tremove(EditarINv);\r\n\t\t\t\tadd(editingPanel);\r\n\r\n\t\t\t\trepaint();\r\n\t\t\t\trevalidate();\r\n\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\tbackButton.addActionListener(new ActionListener() {\r\n\t\t\t@Override\r\n\t\t\tpublic void actionPerformed(ActionEvent e) {\r\n\t\t\t\tremove(editingPanel);\r\n\t\t\t\tadd(EditarINv);\r\n\r\n\t\t\t\trepaint();\r\n\t\t\t\trevalidate();\r\n\r\n\t\t\t}\r\n\t\t});\r\n\r\n\r\n\r\n\t\t//Combobox\r\n\t\ttry {\r\n\t\t\tConnection connection = DriverManager.getConnection(\"jdbc:mysql://localhost:3306/clientes\", \"root\", \"\");\r\n\r\n\t\t\tStatement statement = connection.createStatement();\r\n\t\t\tResultSet resultSet = statement.executeQuery(\"SELECT Nombre, Unidad, Color, Cantidad FROM inventario\");\r\n\r\n\t\t\twhile (resultSet.next()) {\r\n\t\t\t\tString nombre = resultSet.getString(\"Nombre\");\r\n\t\t\t\teditarartbox.addItem(nombre);\r\n\t\t\t}\r\n\r\n\t\t\tstatement.close();\r\n\t\t\tconnection.close();\r\n\t\t} catch (SQLException ex) {\r\n\t\t\tex.printStackTrace();\r\n\t\t}\r\n\r\n\r\n\r\n\t\t//tabla\r\n\r\n\t\ttry {\r\n\t\t\tConnection connection = DriverManager.getConnection(\"jdbc:mysql://localhost:3306/clientes\", \"root\", \"\");\r\n\r\n\t\t\tStatement statement = connection.createStatement();\r\n\t\t\tResultSet resultSet = statement.executeQuery(\"SELECT Nombre, Unidad, Color, Cantidad FROM inventario\");\r\n\r\n\t\t\twhile (resultSet.next()) {\r\n\t\t\t\tString nombre = resultSet.getString(\"Nombre\");\r\n\t\t\t\tString unidad = resultSet.getString(\"Unidad\");\r\n\t\t\t\tString color = resultSet.getString(\"Color\");\r\n\t\t\t\tString cantidad = resultSet.getString(\"Cantidad\");\r\n\r\n\t\t\t\tObject[] rowData = {nombre, unidad, color, cantidad};\r\n\t\t\t\ttablamodelinvconsulta.addRow(rowData);\r\n\t\t\t}\r\n\r\n\t\t\tstatement.close();\r\n\t\t\tconnection.close();\r\n\t\t} catch (SQLException ex) {\r\n\t\t\tex.printStackTrace();\r\n\t\t}\r\n\r\n\r\n\r\n\t\tbtnbackeditarinv.addActionListener(new ActionListener() {\r\n\t\t\t@Override\r\n\t\t\tpublic void actionPerformed(ActionEvent e) {\r\n\t\t\t\tremove(EditarINv);\r\n\t\t\t\tadd(Inventario);\r\n\t\t\t\trepaint();\r\n\t\t\t\trevalidate();\r\n\t\t\t}\r\n\t\t});\r\n\r\n\r\n\r\n\r\n\r\n\t\t//----Eliminar inventario------\r\n\r\n\r\n\t\tEliminarINv.setBackground(new Color(255, 128, 0));\r\n\t\tEliminarINv.setBounds(0, 0, 961, 642);\r\n//\t\tcontentPane.add(EliminarINv);\r\n\t\tEliminarINv.setLayout(null);\r\n\r\n\r\n\t\tJPanel panel2eliminv = new JPanel();\r\n\t\tpanel2eliminv.setBounds(76, 155, 679, 48);\r\n\t\tpanel2eliminv.setBackground(Color.gray);\r\n\t\tEliminarINv.add(panel2eliminv);\r\n\t\tpanel2eliminv.setLayout(null);\r\n\r\n\t\tJLabel lblarticuloinv = new JLabel(\"Articulo a Eliminar\");\r\n\t\tlblarticuloinv.setFont(new Font(\"Arial Black\", Font.PLAIN, 20));\r\n\t\tlblarticuloinv.setBounds(260, 5, 210, 43);\r\n\t\tpanel2eliminv.add(lblarticuloinv);\r\n\r\n\t\tJComboBox eliminarartbox = new JComboBox();\r\n\t\teliminarartbox.setBounds(770, 175, 160, 30);\r\n\t\tEliminarINv.add(eliminarartbox);\r\n\r\n\t\tJButton btneliminarart = new JButton(\"Eliminar\\r\\n\");\r\n\t\tbtneliminarart.setBounds(770, 224, 160, 30);\r\n\t\tEliminarINv.add(btneliminarart);\r\n\r\n\r\n\t\tJLabel Eliminarinvlbl = new JLabel(\"Eliminar Inventario\\r\\n\");\r\n\t\tEliminarinvlbl.setFont(new Font(\"Arial Black\", Font.PLAIN, 30));\r\n\t\tEliminarinvlbl.setBounds(290, 40, 350, 115);\r\n\t\tEliminarINv.add(Eliminarinvlbl);\r\n\r\n\t\tJPanel eliminarinvpnl2 = new JPanel();\r\n\t\teliminarinvpnl2.setBackground(new Color(255, 218, 168));\r\n\t\teliminarinvpnl2.setBounds(76, 203, 679, 381);\r\n\t\tEliminarINv.add(eliminarinvpnl2);\r\n\t\teliminarinvpnl2.setLayout(null);\r\n\r\n\t\tDefaultTableModel modelo = new DefaultTableModel(\r\n\t\t\t\tnew Object[]{\"Nombre\", \"Unidad\", \"Color\", \"Cantidad\"}, 0);\r\n\t\tJTable tablaeliminventario = new JTable(modelo);\r\n\r\n\t\tJScrollPane scrollpaneelminv = new JScrollPane(tablaeliminventario);\r\n\t\tscrollpaneelminv.setBounds(0, 0, eliminarinvpnl2.getWidth(), eliminarinvpnl2.getHeight());\r\n\t\teliminarinvpnl2.add(scrollpaneelminv);\r\n\r\n\r\n\r\n\t\tbtneliminarart.addActionListener(new ActionListener() {\r\n\t\t\t@Override\r\n\t\t\tpublic void actionPerformed(ActionEvent e) {\r\n\t\t\t\tString selectedArticulo = (String) eliminarartbox.getSelectedItem();\r\n\t\t\t\tString nombre = selectedArticulo;\r\n\r\n\t\t\t\tint option = JOptionPane.showConfirmDialog(null, \"¬øDesea eliminar el art√≠culo seleccionado?\", \"Confirmar\", JOptionPane.OK_CANCEL_OPTION);\r\n\t\t\t\tif (option == JOptionPane.OK_OPTION) {\r\n\t\t\t\t\ttry {\r\n\t\t\t\t\t\tConnection connection = DriverManager.getConnection(\"jdbc:mysql://localhost:3306/clientes\", \"root\", \"\");\r\n\r\n\t\t\t\t\t\tString query = \"DELETE FROM inventario WHERE Nombre = ?\";\r\n\t\t\t\t\t\tPreparedStatement statement = connection.prepareStatement(query);\r\n\t\t\t\t\t\tstatement.setString(1, nombre);\r\n\t\t\t\t\t\tstatement.executeUpdate();\r\n\r\n\t\t\t\t\t\tstatement.close();\r\n\t\t\t\t\t\tconnection.close();\r\n\t\t\t\t\t} catch (SQLException ex) {\r\n\t\t\t\t\t\tex.printStackTrace();\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tint rowCount = modelo.getRowCount();\r\n\t\t\t\t\tfor (int i = 0; i < rowCount; i++) {\r\n\t\t\t\t\t\tString tableNombre = (String) modelo.getValueAt(i, 0);\r\n\t\t\t\t\t\tif (tableNombre.equals(nombre)) {\r\n\t\t\t\t\t\t\tmodelo.removeRow(i);\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\teliminarartbox.removeItem(selectedArticulo);\r\n\t\t\t\t\teliminarartbox.setSelectedIndex(-1);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\r\n\r\n\r\n\t\tEliminarINv.add(eliminarartbox);\r\n\r\n\t\t//combobox\r\n\r\n\t\ttry {\r\n\t\t\tConnection connection = DriverManager.getConnection(\"jdbc:mysql://localhost:3306/clientes\", \"root\", \"\");\r\n\r\n\t\t\tStatement statement = connection.createStatement();\r\n\t\t\tResultSet resultSet = statement.executeQuery(\"SELECT Nombre, Unidad, Color, Cantidad FROM inventario\");\r\n\r\n\t\t\twhile (resultSet.next()) {\r\n\t\t\t\tString nombre = resultSet.getString(\"Nombre\");\r\n\t\t\t\teliminarartbox.addItem(nombre);\r\n\t\t\t}\r\n\r\n\t\t\tstatement.close();\r\n\t\t\tconnection.close();\r\n\t\t} catch (SQLException ex) {\r\n\t\t\tex.printStackTrace();\r\n\t\t}\r\n\r\n\r\n\r\n//tabla\r\n\r\n\t\ttry {\r\n\t\t\tConnection connection = DriverManager.getConnection(\"jdbc:mysql://localhost:3306/clientes\", \"root\", \"\");\r\n\r\n\t\t\tStatement statement = connection.createStatement();\r\n\t\t\tResultSet resultSet = statement.executeQuery(\"SELECT Nombre, Unidad, Color, Cantidad FROM inventario\");\r\n\r\n\t\t\twhile (resultSet.next()) {\r\n\t\t\t\tString nombre = resultSet.getString(\"Nombre\");\r\n\t\t\t\tString unidad = resultSet.getString(\"Unidad\");\r\n\t\t\t\tString color = resultSet.getString(\"Color\");\r\n\t\t\t\tString cantidad = resultSet.getString(\"Cantidad\");\r\n\r\n\t\t\t\tObject[] rowData = {nombre, unidad, color, cantidad};\r\n\t\t\t\tmodelo.addRow(rowData);\r\n\t\t\t}\r\n\r\n\t\t\tstatement.close();\r\n\t\t\tconnection.close();\r\n\t\t} catch (SQLException ex) {\r\n\t\t\tex.printStackTrace();\r\n\t\t}\r\n\r\n\r\n\r\n\t\tJButton btnbackeliminarinventario = new JButton(new ImageIcon(\"BotonRetroceder.png\"));\r\n\t\tbtnbackeliminarinventario.setBounds(10, 11, 35, 33);\r\n\t\tEliminarINv.add(btnbackeliminarinventario);\r\n\r\n\t\tbtnbackeliminarinventario.addActionListener(new ActionListener() {\r\n\t\t\t@Override\r\n\t\t\tpublic void actionPerformed(ActionEvent e) {\r\n\t\t\t\tremove(EliminarINv);\r\n\t\t\t\tadd(Inventario);\r\n\t\t\t\trepaint();\r\n\t\t\t\trevalidate();\r\n\t\t\t}\r\n\t\t});\r\n\r\n\r\n\r\n\r\n\r\n\t\t//----A√±adir al inventario ------\r\n\r\n\r\n\t\tNuevoArticulo.setBackground(new Color(255, 128, 0));\r\n\t\tNuevoArticulo.setBounds(0, 0, 961, 642);\r\n\t\t//\tcontentPane.add(NuevoArticulo);\r\n\t\tNuevoArticulo.setLayout(null);\r\n\r\n\r\n\t\tJLabel lblnuevoarticulo = new JLabel(\"Nuevo Articulo\\r\\n\");\r\n\t\tlblnuevoarticulo.setFont(new Font(\"Arial Black\", Font.PLAIN, 30));\r\n\t\tlblnuevoarticulo.setBounds(370, 25, 311, 48);\r\n\t\tNuevoArticulo.add(lblnuevoarticulo);\r\n\r\n\t\tJPanel panelInventarioCrear = new JPanel();\r\n\t\tpanelInventarioCrear.setBackground(new Color(255, 218, 168));\r\n\t\tpanelInventarioCrear.setBounds(10, 104, 932, 473);\r\n\t\tNuevoArticulo.add(panelInventarioCrear);\r\n\t\tpanelInventarioCrear.setLayout(null);\r\n\r\n\t\tJLabel lblnombrearticulonuevoinv = new JLabel(\"Nombre del articulo:\");\r\n\t\tlblnombrearticulonuevoinv.setFont(new Font(\"Arial Black\", Font.PLAIN, 20));\r\n\t\tlblnombrearticulonuevoinv.setBounds(358, 23, 250, 43);\r\n\t\tpanel2.add(lblnombrearticulonuevoinv);\r\n\r\n\t\tJTextField textField = new JTextField();\r\n\t\ttextField.setBounds(358, 62, 238, 33);\r\n\t\tpanel2.add(textField);\r\n\t\ttextField.setColumns(10);\r\n\r\n\r\n\t\tJLabel unidadartbox = new JLabel(\"Tipo de unidad:\");\r\n\t\tunidadartbox.setFont(new Font(\"Arial Black\", Font.PLAIN, 20));\r\n\t\tunidadartbox.setBounds(358, 100, 250, 43);\r\n\t\tpanel2.add(unidadartbox);\r\n\r\n\r\n\t\tJComboBox<String> comboBoxunidad = new JComboBox<>();\r\n\t\tcomboBoxunidad.setBounds(358, 143, 238, 30);\r\n\t\tpanel2.add(comboBoxunidad);\r\n\r\n\t\tcomboBoxunidad.addItem(\"kg\");\r\n\t\tcomboBoxunidad.addItem(\"L\");\r\n\t\tcomboBoxunidad.addItem(\"4L\");\r\n\t\tcomboBoxunidad.addItem(\"2L\");\r\n\r\n\r\n\t\tJLabel colorwidgetbox = new JLabel(\"Color del widget:\");\r\n\t\tcolorwidgetbox.setFont(new Font(\"Arial Black\", Font.PLAIN, 20));\r\n\t\tcolorwidgetbox.setBounds(358, 182, 250, 43);\r\n\t\tpanel2.add(colorwidgetbox);\r\n\r\n\t\tJComboBox<String> comboboxcolor = new JComboBox<>();\r\n\t\tcomboboxcolor.setBounds(358, 221, 238, 30);\r\n\t\tpanel2.add(comboboxcolor);\r\n\r\n\t\tcomboboxcolor.addItem(\"Blanco\");\r\n\t\tcomboboxcolor.addItem(\"Amarillo\");\r\n\t\tcomboboxcolor.addItem(\"Azul\");\r\n\t\tcomboboxcolor.addItem(\"Verde\");\r\n\t\tcomboboxcolor.addItem(\"Rojo\");\r\n\t\tcomboboxcolor.addItem(\"Beige\");\r\n\t\tcomboboxcolor.addItem(\"Morado\");\r\n\r\n\t\tJLabel cantidaddelarticulo = new JLabel(\"Cantidad de articulo:\");\r\n\t\tcantidaddelarticulo.setFont(new Font(\"Arial Black\", Font.PLAIN, 20));\r\n\t\tcantidaddelarticulo.setBounds(358, 272, 350, 43);\r\n\t\tpanel2.add(cantidaddelarticulo);\r\n\r\n\t\tJTextField textField_1 = new JTextField();\r\n\t\ttextField_1.setColumns(10);\r\n\t\ttextField_1.setBounds(358, 315, 238, 33);\r\n\t\tpanel2.add(textField_1);\r\n\r\n\t\tJButton Creararticulobtn = new JButton(\"Crear\");\r\n\t\tCreararticulobtn.setBackground(new Color(255, 128, 64));\r\n\t\tCreararticulobtn.setFont(new Font(\"Arial Black\", Font.PLAIN, 16));\r\n\t\tCreararticulobtn.setBounds(405, 419, 124, 43);\r\n\t\tpanel2.add(Creararticulobtn);\r\n\r\n\t\tCreararticulobtn.addActionListener(new ActionListener() {\r\n\t\t\t@Override\r\n\t\t\tpublic void actionPerformed(ActionEvent e) {\r\n\t\t\t\tint confirmResult = JOptionPane.showConfirmDialog(null, \"¬øEst√° seguro de crear un nuevo art√≠culo en el inventario?\", \"Confirmaci√≥n\", JOptionPane.YES_NO_OPTION);\r\n\t\t\t\tif (confirmResult == JOptionPane.YES_OPTION) {\r\n\t\t\t\t\tString nombre = textField.getText();\r\n\t\t\t\t\tString unidad = (String) comboBoxunidad.getSelectedItem();\r\n\t\t\t\t\tString color = (String) comboboxcolor.getSelectedItem();\r\n\t\t\t\t\tString cantidad = textField_1.getText();\r\n\r\n\t\t\t\t\tif (nombre.isEmpty() || unidad.isEmpty() || color.isEmpty() || cantidad.isEmpty()) {\r\n\t\t\t\t\t\tJOptionPane.showMessageDialog(null, \"Por favor, complete todos los campos.\", \"Campos incompletos\", JOptionPane.ERROR_MESSAGE);\r\n\t\t\t\t\t\treturn;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\ttry {\r\n\t\t\t\t\t\tConnection connection = DriverManager.getConnection(\"jdbc:mysql://localhost:3306/clientes\", \"root\", \"root\");\r\n\r\n\t\t\t\t\t\tString query = \"INSERT INTO inventario (Nombre, Unidad, Color, Cantidad) VALUES (?, ?, ?, ?)\";\r\n\t\t\t\t\t\tPreparedStatement statement = connection.prepareStatement(query);\r\n\r\n\t\t\t\t\t\tstatement.setString(1, nombre);\r\n\t\t\t\t\t\tstatement.setString(2, unidad);\r\n\t\t\t\t\t\tstatement.setString(3, color);\r\n\t\t\t\t\t\tstatement.setString(4, cantidad);\r\n\r\n\t\t\t\t\t\tint rowsAffected = statement.executeUpdate();\r\n\r\n\t\t\t\t\t\tif (rowsAffected > 0) {\r\n\t\t\t\t\t\t\tSystem.out.println(\"New row added to the inventory\");\r\n\t\t\t\t\t\t\ttextField.setText(\"\");\r\n\t\t\t\t\t\t\tcomboBoxunidad.setSelectedIndex(0);\r\n\t\t\t\t\t\t\tcomboboxcolor.setSelectedIndex(0);\r\n\t\t\t\t\t\t\ttextField_1.setText(\"\");\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tstatement.close();\r\n\t\t\t\t\t\tconnection.close();\r\n\t\t\t\t\t} catch (SQLException ex) {\r\n\t\t\t\t\t\tex.printStackTrace();\r\n\t\t\t\t\t}\r\n\t\t\t\t} else {\r\n\t\t\t\t\ttextField.setText(\"\");\r\n\t\t\t\t\tcomboBoxunidad.setSelectedIndex(0);\r\n\t\t\t\t\tcomboboxcolor.setSelectedIndex(0);\r\n\t\t\t\t\ttextField_1.setText(\"\");\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\r\n\r\n\r\n\t\tJButton btnbackcreararticuloinv = new JButton(new ImageIcon(\"BotonRetroceder.png\"));\r\n\t\tbtnbackcreararticuloinv.setBounds(10, 11, 35, 33);\r\n\t\tNuevoArticulo.add(btnbackcreararticuloinv);\r\n\r\n\t\tbtnbackcreararticuloinv.addActionListener(new ActionListener() {\r\n\t\t\t@Override\r\n\t\t\tpublic void actionPerformed(ActionEvent e) {\r\n\t\t\t\tremove(NuevoArticulo);\r\n\t\t\t\tadd(Inventario);\r\n\t\t\t\trepaint();\r\n\t\t\t\trevalidate();\r\n\t\t\t}\r\n\t\t});\r\n\r\n\r\n\r\n\r\n\t\t//--------------------------------------------clientes----------------------------------------------------------\r\n\t\t//-----pantalla clientes principal-----\r\n\r\n\t\tClientes.setLayout(null);\r\n\t\tClientes.repaint();\r\n\t\tClientes.revalidate();\r\n\r\n\t\tJPanel panelClientes = new JPanel();\r\n\t\tpanelClientes.setBounds(0, 0, 977, 681);\r\n\t\tpanelClientes.setFont(new Font(\"Arial Black\", Font.PLAIN, 20));\r\n\t\tClientes.add(panelClientes);\r\n\t\tpanelClientes.revalidate();\r\n\t\tpanelClientes.repaint();\r\n\t\tpanelClientes.setLayout(null);\r\n\r\n\t\tJPanel panelMenuClientes = new JPanel();\r\n\t\tpanelMenuClientes.setLayout(null);\r\n\t\tpanelMenuClientes.setBackground(Color.WHITE);\r\n\t\tpanelMenuClientes.setOpaque(false);\r\n\t\tpanelMenuClientes.setBounds(60, 241, 827, 347);\r\n\t\tpanelClientes.add(panelMenuClientes);\r\n\r\n\t\tJPanel panelMini = new JPanel();\r\n\t\tpanelMini.setLayout(null);\r\n\t\tpanelMini.setBackground(Color.WHITE);\r\n\t\tpanelMini.setOpaque(false);\r\n\t\tpanelMini.setBounds(20, 241, 900, 347);\r\n\t\tpanelClientes.add(panelMini);\r\n\r\n\t\tJLabel clienteIcon = new JLabel(new ImageIcon(\"clientelogo2.jpeg\"));\r\n\t\tclienteIcon.setBounds(0, 0, 951, 631);\r\n\t\tclienteIcon.setVisible(true);\r\n\t\tclienteIcon.setOpaque(true);\r\n\t\tpanelClientes.add(clienteIcon);\r\n\r\n\t\tJLabel menuClientesLogo = new JLabel(new ImageIcon(\"menuclientes().png\"));\r\n\t\tmenuClientesLogo.setBounds(300,0,350,233);\r\n\t\tclienteIcon.add(menuClientesLogo);\r\n\r\n\r\n\t\tJButton btnConsultar = new JButton(\"Consultar\");\r\n\t\tbtnConsultar.setFont(new Font(\"Arial Black\", Font.PLAIN, 20));\r\n\t\tbtnConsultar.setBackground(new Color(255, 128, 0));\r\n\t\tbtnConsultar.setFocusable(false);\r\n\t\tbtnConsultar.setBounds(0, 280, 217, 60);\r\n\t\tbtnConsultar.addActionListener(new ActionListener() {\r\n\t\t\t@Override\r\n\t\t\tpublic void actionPerformed(ActionEvent e) {\r\n\t\t\t\tremove(Clientes);\r\n\t\t\t\tadd(ConsultaClientes);\r\n\t\t\t\trepaint();\r\n\t\t\t\trevalidate();\r\n\r\n\t\t\t}\r\n\t\t});\r\n\t\tpanelMini.add(btnConsultar);\r\n\r\n\t\tJButton btnEditarClientes = new JButton(\"Editar\");\r\n\t\tbtnEditarClientes.setFont(new Font(\"Arial Black\", Font.PLAIN, 20));\r\n\t\tbtnEditarClientes.setBackground(new Color(255, 128, 0));\r\n\t\tbtnEditarClientes.setFocusable(false);\r\n\t\tbtnEditarClientes.setBounds(230, 280, 217, 60);\r\n\t\tbtnEditarClientes.addActionListener(new ActionListener() {\r\n\t\t\t@Override\r\n\t\t\tpublic void actionPerformed(ActionEvent e) {\r\n\t\t\t\tremove(Clientes);\r\n\t\t\t\tadd(EditarTabla);\r\n\t\t\t\trepaint();\r\n\t\t\t\trevalidate();\r\n\r\n\t\t\t}\r\n\t\t});\r\n\t\tpanelMini.add(btnEditarClientes);\r\n\r\n\t\tJButton btnEliminar = new JButton(\"Eliminar\");\r\n\t\tbtnEliminar.setFont(new Font(\"Arial Black\", Font.PLAIN, 20));\r\n\t\tbtnEliminar.setBackground(new Color(255, 128, 0));\r\n\t\tbtnEliminar.setFocusable(false);\r\n\t\tbtnEliminar.setBounds(460, 280, 217, 60);\r\n\t\tbtnEliminar.addActionListener(new ActionListener() {\r\n\t\t\t@Override\r\n\t\t\tpublic void actionPerformed(ActionEvent e) {\r\n\t\t\t\tremove(Clientes);\r\n\t\t\t\tadd(EliminarClientes);\r\n\t\t\t\trepaint();\r\n\t\t\t\trevalidate();\r\n\r\n\t\t\t}\r\n\t\t});\r\n\t\tpanelMini.add(btnEliminar);\r\n\r\n\t\tJButton btnCrearClientes = new JButton(\"Crear\");\r\n\t\tbtnCrearClientes.setFont(new Font(\"Arial Black\", Font.PLAIN, 20));\r\n\t\tbtnCrearClientes.setBackground(new Color(255, 128, 0));\r\n\t\tbtnCrearClientes.setFocusable(false);\r\n\t\tbtnCrearClientes.setBounds(690, 280, 207, 60);\r\n\t\tpanelMini.add(btnCrearClientes);\r\n\r\n\t\tbtnCrearClientes.addActionListener(new ActionListener() {\r\n\t\t\t@Override\r\n\t\t\tpublic void actionPerformed(ActionEvent e) {\r\n\t\t\t\tremove(Clientes);\r\n\t\t\t\tadd(CrearClientes);\r\n\t\t\t\trepaint();\r\n\t\t\t\trevalidate();\r\n\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\tJButton backClientes = new JButton(new ImageIcon(\"BotonRetroceder.png\"));\r\n\t\tbackClientes.setBounds(10, 11, 35, 33);\r\n\t\tbackClientes.repaint();\r\n\t\tbackClientes.setFocusable(false);\r\n\t\tbackClientes.revalidate();\r\n\t\tbackClientes.addActionListener(new ActionListener() {\r\n\t\t\t@Override\r\n\t\t\tpublic void actionPerformed(ActionEvent e) {\r\n\t\t\t\tremove(Clientes);\r\n\t\t\t\tadd(Inicio);\r\n\t\t\t\trepaint();\r\n\t\t\t\trevalidate();\r\n\t\t\t}\r\n\t\t});\r\n\t\tclienteIcon.add(backClientes);\r\n\r\n\r\n\r\n\r\n\t\tString[] columnNamesFuera = {\"Nombre\", \"Apellidos\", \"Tel√©fono\", \"Direcci√≥n\"};\r\n\t\tDefaultTableModel tableModelFuera = new DefaultTableModel(columnNamesFuera, 0);\r\n\t\tJTable tablaFuera = new JTable(tableModelFuera);\r\n\r\n\t\ttablaFuera.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);\r\n\r\n\t\tJScrollPane scrollPaneFuera = new JScrollPane(tablaFuera);\r\n\t\tscrollPaneFuera.setBounds(171, 207, 606, 300);\r\n\t\tclienteIcon.add(scrollPaneFuera);\r\n\r\n\t\ttry {\r\n\t\t\tConnection connection = DriverManager.getConnection(\"jdbc:mysql://localhost:3306/clientes\", \"root\", \"\");\r\n\r\n\t\t\tStatement statement = connection.createStatement();\r\n\r\n\t\t\t// EJecutar query fetch\r\n\t\t\tString queryConsulta = \"SELECT * FROM clientes\";\r\n\t\t\tResultSet resultSetConsulta = statement.executeQuery(queryConsulta);\r\n\r\n\t\t\ttableModelFuera.setRowCount(0);\r\n\r\n\r\n\r\n\t\t\twhile (resultSetConsulta.next()) {\r\n\t\t\t\tString nombre = resultSetConsulta.getString(\"Nombre\");\r\n\t\t\t\tString apellidos = resultSetConsulta.getString(\"Apellidos\");\r\n\t\t\t\tString telefono = resultSetConsulta.getString(\"Tel√©fono\");\r\n\t\t\t\tString direccion = resultSetConsulta.getString(\"Direcci√≥n\");\r\n\r\n\t\t\t\tObject[] rowData = {nombre, apellidos, telefono, direccion};\r\n\r\n\t\t\t\ttableModelFuera.addRow(rowData);\r\n\r\n\r\n\t\t\t}\r\n\r\n\t\t\tresultSetConsulta.close();\r\n\t\t\tstatement.close();\r\n\t\t\tconnection.close();\r\n\t\t} catch (SQLException ex) {\r\n\t\t\tex.printStackTrace();\r\n\t\t}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\t\t//-----pantalla creacion clientes-----\r\n\t\tCrearClientes.setLayout(null);\r\n\r\n\t\tJLabel crearCliente = new JLabel(\"Crear Cliente\");\r\n\t\tcrearCliente.setFont(new Font(\"Arial Black\", Font.PLAIN, 30));\r\n\t\tcrearCliente.setBounds(380, 89, 311, 50);\r\n\t\tCrearClientes.add(crearCliente);\r\n\r\n\t\tJPanel FondoCrear = new JPanel();\r\n\t\tFondoCrear.setBounds(0, 0, 977, 681);\r\n\t\tFondoCrear.setBackground(new Color(255, 128, 0));\r\n\t\tFondoCrear.setLayout(null);\r\n\t\tCrearClientes.add(FondoCrear);\r\n\r\n\r\n\t\tJPanel panelCrearCliente = new JPanel();\r\n\t\tpanelCrearCliente.setBounds(180, 150, 610, 406);\r\n\r\n\t\tFondoCrear.add(panelCrearCliente);\r\n\t\tpanelCrearCliente.setLayout(null);\r\n\r\n\t\tJLabel name = new JLabel(\"Nombre\");\r\n\t\tname.setFont(new Font(\"Arial Black\", Font.PLAIN, 16));\r\n\t\tname.setBounds(10, 11, 121, 14);\r\n\t\tpanelCrearCliente.add(name);\r\n\r\n\t\tJTextField nametxt = new JTextField();\r\n\t\tnametxt.setColumns(10);\r\n\t\tnametxt.setBounds(10, 36, 454, 27);\r\n\t\tnametxt.setDocument(new PlainDocument() {\r\n\t\t\t@Override\r\n\t\t\tpublic void insertString(int offset, String str, AttributeSet attr) throws BadLocationException {\r\n\t\t\t\tif (str == null)\r\n\t\t\t\t\treturn;\r\n\r\n\t\t\t\tfor (char c : str.toCharArray()) {\r\n\t\t\t\t\tif (!Character.isLetter(c)) {\r\n\t\t\t\t\t\treturn; // Ignora la inserci√≥n de caracteres no alfab√©ticos\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tsuper.insertString(offset, str, attr);\r\n\t\t\t}\r\n\t\t});\r\n\t\tnametxt.addKeyListener(new KeyListener() {\r\n\t\t\t@Override\r\n\t\t\tpublic void keyTyped(KeyEvent e) {\r\n\t\t\t\tchar c = e.getKeyChar();\r\n\t\t\t\tif (!Character.isLetter(c)) {\r\n\t\t\t\t\te.consume(); // Ignora la entrada de caracteres no alfab√©ticos\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t@Override\r\n\t\t\tpublic void keyPressed(KeyEvent e) {\r\n\t\t\t\t// No se requiere ninguna acci√≥n en este m√©todo\r\n\t\t\t}\r\n\r\n\t\t\t@Override\r\n\t\t\tpublic void keyReleased(KeyEvent e) {\r\n\t\t\t\t// No se requiere ninguna acci√≥n en este m√©todo\r\n\t\t\t}\r\n\t\t});\r\n\t\tpanelCrearCliente.add(nametxt);\r\n\r\n\t\tJTextField apellidotxt = new JTextField();\r\n\t\tapellidotxt.setColumns(10);\r\n\t\tapellidotxt.setBounds(10, 129, 454, 27);\r\n\t\tapellidotxt.setDocument(new PlainDocument() {\r\n\t\t\t@Override\r\n\t\t\tpublic void insertString(int offset, String str, AttributeSet attr) throws BadLocationException {\r\n\t\t\t\tif (str == null)\r\n\t\t\t\t\treturn;\r\n\r\n\t\t\t\tfor (char c : str.toCharArray()) {\r\n\t\t\t\t\tif (!Character.isLetter(c)) {\r\n\t\t\t\t\t\treturn; // Ignora la inserci√≥n de caracteres no alfab√©ticos\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tsuper.insertString(offset, str, attr);\r\n\t\t\t}\r\n\t\t});\r\n\t\tapellidotxt.addKeyListener(new KeyListener() {\r\n\t\t\t@Override\r\n\t\t\tpublic void keyTyped(KeyEvent e) {\r\n\t\t\t\tchar c = e.getKeyChar();\r\n\t\t\t\tif (!Character.isLetter(c)) {\r\n\t\t\t\t\te.consume(); // Ignora la entrada de caracteres no alfab√©ticos\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t@Override\r\n\t\t\tpublic void keyPressed(KeyEvent e) {\r\n\t\t\t\t// No se requiere ninguna acci√≥n en este m√©todo\r\n\t\t\t}\r\n\r\n\t\t\t@Override\r\n\t\t\tpublic void keyReleased(KeyEvent e) {\r\n\t\t\t\t// No se requiere ninguna acci√≥n en este m√©todo\r\n\t\t\t}\r\n\t\t});\r\n\t\tpanelCrearCliente.add(apellidotxt);\r\n\r\n\t\tJTextField celtxt = new JTextField();\r\n\t\tceltxt.setColumns(10);\r\n\t\tceltxt.setBounds(10, 238, 454, 27);\r\n\t\tceltxt.setDocument(new PlainDocument() {\r\n\t\t\t@Override\r\n\t\t\tpublic void insertString(int offset, String str, AttributeSet attr) throws BadLocationException {\r\n\t\t\t\tif (str == null)\r\n\t\t\t\t\treturn;\r\n\r\n\t\t\t\tfor (char c : str.toCharArray()) {\r\n\t\t\t\t\tif (!Character.isDigit(c)) {\r\n\t\t\t\t\t\treturn; // Ignora la inserci√≥n de caracteres no num√©ricos\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tsuper.insertString(offset, str, attr);\r\n\t\t\t}\r\n\t\t});\r\n\t\tceltxt.addKeyListener(new KeyListener() {\r\n\t\t\t@Override\r\n\t\t\tpublic void keyTyped(KeyEvent e) {\r\n\t\t\t\tchar c = e.getKeyChar();\r\n\t\t\t\tif (!Character.isDigit(c)) {\r\n\t\t\t\t\te.consume(); // Ignora la entrada de caracteres no num√©ricos\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t@Override\r\n\t\t\tpublic void keyPressed(KeyEvent e) {\r\n\t\t\t\t// No se requiere ninguna acci√≥n en este m√©todo\r\n\t\t\t}\r\n\r\n\t\t\t@Override\r\n\t\t\tpublic void keyReleased(KeyEvent e) {\r\n\t\t\t\t// No se requiere ninguna acci√≥n en este m√©todo\r\n\t\t\t}\r\n\t\t});\r\n\t\tpanelCrearCliente.add(celtxt);\r\n\r\n\t\tJTextField direcciontxt = new JTextField();\r\n\t\tdirecciontxt.setColumns(10);\r\n\t\tdirecciontxt.setBounds(10, 337, 454, 27);\r\n\t\tpanelCrearCliente.add(direcciontxt);\r\n\r\n\t\tJLabel lblApellidos = new JLabel(\"Apellidos\");\r\n\t\tlblApellidos.setFont(new Font(\"Arial Black\", Font.PLAIN, 16));\r\n\t\tlblApellidos.setBounds(10, 104, 121, 14);\r\n\t\tpanelCrearCliente.add(lblApellidos);\r\n\r\n\t\tJLabel lblTelefono = new JLabel(\"Telefono\");\r\n\t\tlblTelefono.setFont(new Font(\"Arial Black\", Font.PLAIN, 16));\r\n\t\tlblTelefono.setBounds(10, 213, 121, 14);\r\n\t\tpanelCrearCliente.add(lblTelefono);\r\n\r\n\t\tJLabel lblDireccion = new JLabel(\"Direccion\");\r\n\t\tlblDireccion.setFont(new Font(\"Arial Black\", Font.PLAIN, 16));\r\n\t\tlblDireccion.setBounds(10, 312, 121, 14);\r\n\t\tpanelCrearCliente.add(lblDireccion);\r\n\r\n\t\tJButton btnCrearCliente = new JButton(\"Crear Cliente\");\r\n\t\tbtnCrearCliente.setFont(new Font(\"Arial Black\", Font.PLAIN, 16));\r\n\t\tbtnCrearCliente.setBounds(380, 580, 190, 44);\r\n\t\tbtnCrearCliente.setFocusable(false);\r\n\t\tFondoCrear.add(btnCrearCliente);\r\n\r\n\t\tFondoCrear.add(btnCrearCliente);\r\n\t\tbtnCrearCliente.addActionListener(new ActionListener() {\r\n\t\t\t@Override\r\n\t\t\tpublic void actionPerformed(ActionEvent e) {\r\n\t\t\t\tint option = JOptionPane.showConfirmDialog(null, \"¬øDesea crear un nuevo cliente?\", \"Confirmar\", JOptionPane.OK_CANCEL_OPTION);\r\n\t\t\t\tif (option == JOptionPane.OK_OPTION) {\r\n\t\t\t\t\tString nombre = nametxt.getText();\r\n\t\t\t\t\tString apellidos = apellidotxt.getText();\r\n\t\t\t\t\tString telefono = celtxt.getText();\r\n\t\t\t\t\tString direccion = direcciontxt.getText();\r\n\r\n\t\t\t\t\t// Validate if any text field is empty\r\n\t\t\t\t\tif (nombre.isEmpty() || apellidos.isEmpty() || telefono.isEmpty() || direccion.isEmpty()) {\r\n\t\t\t\t\t\tJOptionPane.showMessageDialog(null, \"Por favor, complete todos los campos.\", \"Campos incompletos\", JOptionPane.ERROR_MESSAGE);\r\n\t\t\t\t\t\treturn;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t// Insertar valores en base de datos\r\n\t\t\t\t\ttry {\r\n\t\t\t\t\t\t// Conexion con base de datos\r\n\t\t\t\t\t\tConnection connection = DriverManager.getConnection(\"jdbc:mysql://localhost:3306/clientes\", \"root\", \"\");\r\n\r\n\t\t\t\t\t\t// Crear un statement con parametros de query\r\n\t\t\t\t\t\tString query = \"INSERT INTO clientes (Nombre, Apellidos, Tel√©fono, Direcci√≥n) VALUES (?, ?, ?, ?)\";\r\n\t\t\t\t\t\tPreparedStatement statement = connection.prepareStatement(query);\r\n\r\n\t\t\t\t\t\t// Crear los parametros para los valores\r\n\t\t\t\t\t\tstatement.setString(1, nombre);\r\n\t\t\t\t\t\tstatement.setString(2, apellidos);\r\n\t\t\t\t\t\tstatement.setString(3, telefono);\r\n\t\t\t\t\t\tstatement.setString(4, direccion);\r\n\r\n\t\t\t\t\t\t// Ejecutar el query\r\n\t\t\t\t\t\tint rowsAffected = statement.executeUpdate();\r\n\r\n\t\t\t\t\t\tif (rowsAffected > 0) {\r\n\t\t\t\t\t\t\tSystem.out.println(\"Fila insertada\");\r\n\t\t\t\t\t\t\t// Limpiar los JTextFields despues de a√±adir nuevo\r\n\t\t\t\t\t\t\tnametxt.setText(\"\");\r\n\t\t\t\t\t\t\tapellidotxt.setText(\"\");\r\n\t\t\t\t\t\t\tceltxt.setText(\"\");\r\n\t\t\t\t\t\t\tdirecciontxt.setText(\"\");\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t// Cerrar statement y conexion\r\n\t\t\t\t\t\tstatement.close();\r\n\t\t\t\t\t\tconnection.close();\r\n\t\t\t\t\t} catch (SQLException ex) {\r\n\t\t\t\t\t\tex.printStackTrace();\r\n\t\t\t\t\t}\r\n\t\t\t\t} else {\r\n\t\t\t\t\tnametxt.setText(\"\");\r\n\t\t\t\t\tapellidotxt.setText(\"\");\r\n\t\t\t\t\tceltxt.setText(\"\");\r\n\t\t\t\t\tdirecciontxt.setText(\"\");\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\r\n\r\n\t\tJButton backCC = new JButton(new ImageIcon(\"BotonRetroceder.png\"));\r\n\t\tbackCC.setFocusable(false);\r\n\t\tbackCC.setBounds(10, 11, 35, 33);\r\n\t\tbackCC.addActionListener(new ActionListener() {\r\n\t\t\t@Override\r\n\t\t\tpublic void actionPerformed(ActionEvent e) {\r\n\t\t\t\tremove(CrearClientes);\r\n\t\t\t\tadd(Clientes);\r\n\t\t\t\trepaint();\r\n\t\t\t\trevalidate();\r\n\t\t\t}\r\n\t\t});\r\n\t\tFondoCrear.add(backCC);\r\n\r\n\r\n\r\n\r\n\t\t//------pantalla edicion de cliente------\r\n\r\n\t\tEditarTabla.setLayout(null);\r\n\r\n\t\tJPanel editarTablaCliente = new JPanel();\r\n\t\teditarTablaCliente.setBounds(0, 0, 977, 681);\r\n\t\teditarTablaCliente.setBackground(new Color(255, 128, 0));\r\n\t\teditarTablaCliente.setLayout(null);\r\n\t\tEditarTabla.add(editarTablaCliente);\r\n\r\n\t\tString[] columnNamesEdicion = {\"Nombre\", \"Apellidos\", \"Tel√©fono\", \"Direcci√≥n\"};\r\n\t\tDefaultTableModel tableModelEdicion = new DefaultTableModel(columnNamesEdicion, 0);\r\n\t\tJTable tablaEdicion = new JTable(tableModelEdicion);\r\n\r\n\t\ttablaEdicion.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);\r\n\r\n\t\tJScrollPane scrollPaneEdicion = new JScrollPane(tablaEdicion);\r\n\t\tscrollPaneEdicion.setBounds(131, 257, 606, 300);\r\n\t\teditarTablaCliente.add(scrollPaneEdicion);\r\n\r\n\t\tJPanel panelEditar = new JPanel();\r\n\t\tpanelEditar.setBackground(Color.GRAY);\r\n\t\tpanelEditar.setBounds(131, 215, 606, 42);\r\n\t\teditarTablaCliente.add(panelEditar);\r\n\t\tpanelEditar.setLayout(null);\r\n\r\n\t\tJLabel clienteAEditar = new JLabel(\"Cliente a Editar\");\r\n\t\tclienteAEditar.setFont(new Font(\"Arial Black\", Font.PLAIN, 16));\r\n\t\tclienteAEditar.setBounds(220, 11, 182, 20);\r\n\t\tpanelEditar.add(clienteAEditar);\r\n\r\n\t\tJLabel consultar_clientes = new JLabel(\"Editar Clientes\");\r\n\t\tconsultar_clientes.setFont(new Font(\"Arial Black\", Font.PLAIN, 30));\r\n\t\tconsultar_clientes.setBounds(300, 137, 350, 50);\r\n\t\teditarTablaCliente.add(consultar_clientes);\r\n\r\n\t\tJComboBox<String> comboBox2 = new JComboBox<>();\r\n\t\tcomboBox2.setBounds(760, 245, 156, 29);\r\n\t\teditarTablaCliente.add(comboBox2);\r\n\r\n\t\tJButton btnEdit1 = new JButton(\"Editar Cliente\");\r\n\t\tbtnEdit1.setBounds(760, 295, 156, 30);\r\n\t\tbtnEdit1.addActionListener(new ActionListener() {\r\n\t\t\t@Override\r\n\t\t\tpublic void actionPerformed(ActionEvent e) {\r\n\t\t\t\tremove(EditarTabla);\r\n\t\t\t\tadd(EditarClientes);\r\n\t\t\t\trepaint();\r\n\t\t\t\trevalidate();\r\n\t\t\t}\r\n\t\t});\r\n\t\teditarTablaCliente.add(btnEdit1);\r\n\r\n\t\tJButton backET = new JButton(new ImageIcon(\"BotonRetroceder.png\"));\r\n\t\tbackET.setBounds(10, 11, 35, 33);\r\n\t\tbackET.addActionListener(new ActionListener() {\r\n\t\t\t@Override\r\n\t\t\tpublic void actionPerformed(ActionEvent e) {\r\n\t\t\t\tremove(EditarTabla);\r\n\t\t\t\tadd(Clientes);\r\n\t\t\t\trepaint();\r\n\t\t\t\trevalidate();\r\n\t\t\t}\r\n\t\t});\r\n\t\teditarTablaCliente.add(backET);\r\n\r\n\t\ttry {\r\n\t\t\t// Conectar a base de datos\r\n\t\t\tString url = \"jdbc:mysql://localhost:3306/clientes\";\r\n\t\t\tString username = \"root\";\r\n\t\t\tString password = \"\";\r\n\t\t\tConnection connection = DriverManager.getConnection(url, username, password);\r\n\r\n\t\t\tStatement statement = connection.createStatement();\r\n\r\n\t\t\tString query = \"SELECT Nombre, Apellidos, Tel√©fono, Direcci√≥n FROM clientes\";\r\n\t\t\tResultSet resultSet = statement.executeQuery(query);\r\n\r\n\t\t\twhile (resultSet.next()) {\r\n\t\t\t\tString nombre = resultSet.getString(\"Nombre\");\r\n\t\t\t\tString apellidos = resultSet.getString(\"Apellidos\");\r\n\t\t\t\tString telefono = resultSet.getString(\"Tel√©fono\");\r\n\t\t\t\tString direccion = resultSet.getString(\"Direcci√≥n\");\r\n\r\n\t\t\t\t// a√±adir fila\r\n\t\t\t\tObject[] rowData = {nombre, apellidos, telefono, direccion};\r\n\t\t\t\ttableModelEdicion.addRow(rowData);\r\n\r\n\t\t\t\t// valor combinado para el combobox\r\n\t\t\t\tString nameAndLastname = nombre + \" \" + apellidos;\r\n\r\n\t\t\t\t// a√±ade valores al combobox\r\n\t\t\t\tcomboBox2.addItem(nameAndLastname);\r\n\t\t\t}\r\n\r\n\t\t\t// cierra set, statement y conexion\r\n\t\t\tstatement.close();\r\n\t\t\tresultSet.close();\r\n\t\t\tconnection.close();\r\n\t\t} catch (SQLException ex) {\r\n\t\t\tex.printStackTrace();\r\n\t\t}\r\n\r\n\r\n\r\n\r\n\t\t//-----pantalla seleccion editar cliente-----\r\n\t\tEditarClientes.setLayout(null);\r\n\r\n\t\tJPanel editarCliente = new JPanel();\r\n\t\tsetDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\r\n\t\teditarCliente.setBounds(0, 0, 977, 681);\r\n\t\teditarCliente.setBackground(new Color(255, 128, 0));\r\n\t\teditarCliente.setBorder(new EmptyBorder(5, 5, 5, 5));\r\n\t\teditarCliente.setLayout(null);\r\n\t\tEditarClientes.add(editarCliente);\r\n\r\n\t\tJLabel lblClienteNum = new JLabel(\"Editar Informacion\");\r\n\t\tlblClienteNum.setFont(new Font(\"Arial Black\", Font.PLAIN, 30));\r\n\t\tlblClienteNum.setBounds(428, 89, 351, 50);\r\n\t\teditarCliente.add(lblClienteNum);\r\n\r\n\t\tJPanel paneleditar2 = new JPanel();\r\n\t\tpaneleditar2.setBounds(180, 150, 610, 426);\r\n\t\teditarCliente.add(paneleditar2);\r\n\t\tpaneleditar2.setLayout(null);\r\n\r\n\t\tJLabel lblNameEdit = new JLabel(\"Nombre\");\r\n\t\tlblNameEdit.setFont(new Font(\"Arial Black\", Font.PLAIN, 16));\r\n\t\tlblNameEdit.setBounds(10, 11, 121, 14);\r\n\t\tpaneleditar2.add(lblNameEdit);\r\n\r\n\r\n\r\n\t\tJTextField textoEdit1 = new JTextField();\r\n\t\ttextoEdit1.setColumns(10);\r\n\t\ttextoEdit1.setBounds(10, 36, 454, 27);\r\n\t\ttextoEdit1.setDocument(new PlainDocument() {\r\n\t\t\t@Override\r\n\t\t\tpublic void insertString(int offset, String str, AttributeSet attr) throws BadLocationException {\r\n\t\t\t\tif (str == null)\r\n\t\t\t\t\treturn;\r\n\r\n\t\t\t\tfor (char c : str.toCharArray()) {\r\n\t\t\t\t\tif (!Character.isLetter(c)) {\r\n\t\t\t\t\t\treturn; // Ignorar la inserci√≥n de caracteres no alfab√©ticos\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tsuper.insertString(offset, str, attr);\r\n\t\t\t}\r\n\t\t});\r\n\t\ttextoEdit1.addKeyListener(new KeyListener() {\r\n\t\t\t@Override\r\n\t\t\tpublic void keyTyped(KeyEvent e) {\r\n\t\t\t\tchar c = e.getKeyChar();\r\n\t\t\t\tif (!Character.isLetter(c)) {\r\n\t\t\t\t\te.consume(); // Ignorar la entrada de caracteres no alfab√©ticos\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t@Override\r\n\t\t\tpublic void keyPressed(KeyEvent e) {\r\n\t\t\t\t// No se requiere ninguna acci√≥n en este m√©todo\r\n\t\t\t}\r\n\r\n\t\t\t@Override\r\n\t\t\tpublic void keyReleased(KeyEvent e) {\r\n\t\t\t\t// No se requiere ninguna acci√≥n en este m√©todo\r\n\t\t\t}\r\n\t\t});\r\n\t\tpaneleditar2.add(textoEdit1);\r\n\r\n\t\tJTextField textoEdit2 = new JTextField();\r\n\t\ttextoEdit2.setColumns(10);\r\n\t\ttextoEdit2.setBounds(10, 129, 454, 27);\r\n\t\ttextoEdit2.setDocument(new PlainDocument() {\r\n\t\t\t@Override\r\n\t\t\tpublic void insertString(int offset, String str, AttributeSet attr) throws BadLocationException {\r\n\t\t\t\tif (str == null)\r\n\t\t\t\t\treturn;\r\n\r\n\t\t\t\tfor (char c : str.toCharArray()) {\r\n\t\t\t\t\tif (!Character.isLetter(c)) {\r\n\t\t\t\t\t\treturn; // Ignorar la inserci√≥n de caracteres no alfab√©ticos\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tsuper.insertString(offset, str, attr);\r\n\t\t\t}\r\n\t\t});\r\n\t\ttextoEdit2.addKeyListener(new KeyListener() {\r\n\t\t\t@Override\r\n\t\t\tpublic void keyTyped(KeyEvent e) {\r\n\t\t\t\tchar c = e.getKeyChar();\r\n\t\t\t\tif (!Character.isLetter(c)) {\r\n\t\t\t\t\te.consume(); // Ignorar la entrada de caracteres no alfab√©ticos\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t@Override\r\n\t\t\tpublic void keyPressed(KeyEvent e) {\r\n\t\t\t\t// No se requiere ninguna acci√≥n en este m√©todo\r\n\t\t\t}\r\n\r\n\t\t\t@Override\r\n\t\t\tpublic void keyReleased(KeyEvent e) {\r\n\t\t\t\t// No se requiere ninguna acci√≥n en este m√©todo\r\n\t\t\t}\r\n\t\t});\r\n\t\tpaneleditar2.add(textoEdit2);\r\n\r\n\r\n\t\tJTextField textoEdit3 = new JTextField();\r\n\t\ttextoEdit3.setColumns(10);\r\n\t\ttextoEdit3.setBounds(10, 238, 276, 27);\r\n\t\ttextoEdit3.setDocument(new PlainDocument() {\r\n\t\t\t@Override\r\n\t\t\tpublic void insertString(int offset, String str, AttributeSet attr) throws BadLocationException {\r\n\t\t\t\tif (str == null)\r\n\t\t\t\t\treturn;\r\n\r\n\t\t\t\ttry {\r\n\t\t\t\t\tInteger.parseInt(str);\r\n\t\t\t\t\tsuper.insertString(offset, str, attr);\r\n\t\t\t\t} catch (NumberFormatException e) {\r\n\t\t\t\t\t// Ignorar la inserci√≥n de caracteres no num√©ricos\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\t\ttextoEdit3.addKeyListener(new KeyListener() {\r\n\t\t\t@Override\r\n\t\t\tpublic void keyTyped(KeyEvent e) {\r\n\t\t\t\tchar c = e.getKeyChar();\r\n\t\t\t\tif (!Character.isDigit(c)) {\r\n\t\t\t\t\te.consume();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t@Override\r\n\t\t\tpublic void keyPressed(KeyEvent e) {\r\n\t\t\t\t// No se requiere ninguna acci√≥n en este m√©todo\r\n\t\t\t}\r\n\r\n\t\t\t@Override\r\n\t\t\tpublic void keyReleased(KeyEvent e) {\r\n\t\t\t\t// No se requiere ninguna acci√≥n en este m√©todo\r\n\t\t\t}\r\n\t\t});\r\n\t\tpaneleditar2.add(textoEdit3);\r\n\r\n\t\tJTextField textoEdit4 = new JTextField();\r\n\t\ttextoEdit4.setColumns(10);\r\n\t\ttextoEdit4.setBounds(10, 337, 454, 27);\r\n\t\tpaneleditar2.add(textoEdit4);\r\n\r\n\r\n\r\n\r\n\t\tJLabel apellidoEdit = new JLabel(\"Apellidos\");\r\n\t\tapellidoEdit.setFont(new Font(\"Arial Black\", Font.PLAIN, 16));\r\n\t\tapellidoEdit.setBounds(10, 104, 121, 14);\r\n\t\tpaneleditar2.add(apellidoEdit);\r\n\r\n\t\tJLabel telefonoEdit = new JLabel(\"Telefono\");\r\n\t\ttelefonoEdit.setFont(new Font(\"Arial Black\", Font.PLAIN, 16));\r\n\t\ttelefonoEdit.setBounds(10, 213, 121, 14);\r\n\t\tpaneleditar2.add(telefonoEdit);\r\n\r\n\t\tJLabel direccionEdit = new JLabel(\"Direccion\");\r\n\t\tdireccionEdit.setFont(new Font(\"Arial Black\", Font.PLAIN, 16));\r\n\t\tdireccionEdit.setBounds(10, 312, 121, 14);\r\n\t\tpaneleditar2.add(direccionEdit);\r\n\r\n\t\tJButton btnEditarCliente = new JButton(\"Editar Cliente\");\r\n\t\tbtnEditarCliente.setFont(new Font(\"Arial Black\", Font.PLAIN, 15));\r\n\t\tbtnEditarCliente.setBounds(444, 587, 147, 44);\r\n\t\teditarCliente.add(btnEditarCliente);\r\n\r\n\r\n\r\n\t\teditarCliente.add(btnEditarCliente);\r\n\r\n\t\tbtnEditarCliente.addActionListener(new ActionListener() {\r\n\t\t\t@Override\r\n\t\t\tpublic void actionPerformed(ActionEvent e) {\r\n\t\t\t\tint option = JOptionPane.showConfirmDialog(null, \"¬øDesea editar la informaci√≥n del cliente?\", \"Confirmar\", JOptionPane.OK_CANCEL_OPTION);\r\n\t\t\t\tif (option == JOptionPane.OK_OPTION) {\r\n\t\t\t\t\tString selectedClient = (String) comboBox2.getSelectedItem();\r\n\t\t\t\t\tString[] nameAndLastname = selectedClient.split(\" \");\r\n\t\t\t\t\tString nombre = textoEdit1.getText();\r\n\t\t\t\t\tString apellidos = textoEdit2.getText();\r\n\t\t\t\t\tString telefono = textoEdit3.getText();\r\n\t\t\t\t\tString direccion = textoEdit4.getText();\r\n\r\n\t\t\t\t\ttry {\r\n\t\t\t\t\t\tConnection connection = DriverManager.getConnection(\"jdbc:mysql://localhost:3306/clientes\", \"root\", \"root\");\r\n\r\n\t\t\t\t\t\tString query = \"UPDATE clientes SET Nombre = ?, Apellidos = ?, Tel√©fono = ?, Direcci√≥n = ? WHERE Nombre = ? AND Apellidos = ?\";\r\n\t\t\t\t\t\tPreparedStatement statement = connection.prepareStatement(query);\r\n\r\n\t\t\t\t\t\tstatement.setString(1, nombre);\r\n\t\t\t\t\t\tstatement.setString(2, apellidos);\r\n\t\t\t\t\t\tstatement.setString(3, telefono);\r\n\t\t\t\t\t\tstatement.setString(4, direccion);\r\n\t\t\t\t\t\tstatement.setString(5, nameAndLastname[0]);\r\n\t\t\t\t\t\tstatement.setString(6, nameAndLastname[1]);\r\n\r\n\t\t\t\t\t\tint rowsAffected = statement.executeUpdate();\r\n\r\n\t\t\t\t\t\tif (rowsAffected > 0) {\r\n\t\t\t\t\t\t\tSystem.out.println(\"Fila actualizada\");\r\n\t\t\t\t\t\t\ttextoEdit1.setText(\"\");\r\n\t\t\t\t\t\t\ttextoEdit2.setText(\"\");\r\n\t\t\t\t\t\t\ttextoEdit3.setText(\"\");\r\n\t\t\t\t\t\t\ttextoEdit4.setText(\"\");\r\n\r\n\t\t\t\t\t\t\t// Update the table model if a row is selected\r\n\t\t\t\t\t\t\tint selectedRow = tablaEdicion.getSelectedRow();\r\n\t\t\t\t\t\t\tif (selectedRow >= 0) {\r\n\t\t\t\t\t\t\t\ttableModelEdicion.setValueAt(nombre, selectedRow, 0);\r\n\t\t\t\t\t\t\t\ttableModelEdicion.setValueAt(apellidos, selectedRow, 1);\r\n\t\t\t\t\t\t\t\ttableModelEdicion.setValueAt(telefono, selectedRow, 2);\r\n\t\t\t\t\t\t\t\ttableModelEdicion.setValueAt(direccion, selectedRow, 3);\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t// Update the JTable data from the database\r\n\t\t\t\t\t\t\ttableModelEdicion.setRowCount(0);\r\n\t\t\t\t\t\t\tstatement = connection.prepareStatement(\"SELECT Nombre, Apellidos, Tel√©fono, Direcci√≥n FROM clientes\");\r\n\t\t\t\t\t\t\tResultSet resultSet = statement.executeQuery();\r\n\r\n\t\t\t\t\t\t\twhile (resultSet.next()) {\r\n\t\t\t\t\t\t\t\tString updatedNombre = resultSet.getString(\"Nombre\");\r\n\t\t\t\t\t\t\t\tString updatedApellidos = resultSet.getString(\"Apellidos\");\r\n\t\t\t\t\t\t\t\tString updatedTelefono = resultSet.getString(\"Tel√©fono\");\r\n\t\t\t\t\t\t\t\tString updatedDireccion = resultSet.getString(\"Direcci√≥n\");\r\n\r\n\t\t\t\t\t\t\t\tObject[] rowData = {updatedNombre, updatedApellidos, updatedTelefono, updatedDireccion};\r\n\t\t\t\t\t\t\t\ttableModelEdicion.addRow(rowData);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t// Close the statement and connection\r\n\t\t\t\t\t\tstatement.close();\r\n\t\t\t\t\t\tconnection.close();\r\n\t\t\t\t\t} catch (SQLException ex) {\r\n\t\t\t\t\t\tex.printStackTrace();\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\r\n\r\n\r\n\r\n// ...\r\n\r\n\t\tJButton backEC = new JButton(new ImageIcon(\"BotonRetroceder.png\"));\r\n\t\tbackEC.setBounds(10, 11, 35, 33);\r\n\t\tbackEC.addActionListener(new ActionListener() {\r\n\t\t\t@Override\r\n\t\t\tpublic void actionPerformed(ActionEvent e) {\r\n\t\t\t\tremove(EditarClientes);\r\n\t\t\t\tadd(EditarTabla);\r\n\t\t\t\trepaint();\r\n\t\t\t\trevalidate();\r\n\t\t\t}\r\n\t\t});\r\n\t\teditarCliente.add(backEC);\r\n\r\n\r\n\r\n\r\n\t\t//-----pantalla consulta de clientes-----\r\n\t\tConsultaClientes.setLayout(null);\r\n\r\n\t\tJPanel consultarClientes = new JPanel();\r\n\t\tconsultarClientes.setBounds(0, 0, 977, 681);\r\n\t\tconsultarClientes.setBackground(new Color(255, 128, 0));\r\n\t\tconsultarClientes.setLayout(null);\r\n\t\tConsultaClientes.add(consultarClientes);\r\n\r\n\t\tString[] columnNamesConsulta = {\"Nombre\", \"Apellidos\", \"Tel√©fono\", \"Direcci√≥n\"};\r\n\t\tDefaultTableModel tableModelConsulta = new DefaultTableModel(columnNamesConsulta, 0);\r\n\t\tJTable tablaConsulta = new JTable(tableModelConsulta);\r\n\r\n\t\ttablaConsulta.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);\r\n\r\n\t\tJScrollPane scrollPaneConsulta = new JScrollPane(tablaConsulta);\r\n\t\tscrollPaneConsulta.setBounds(131, 257, 606, 300);\r\n\t\tconsultarClientes.add(scrollPaneConsulta);\r\n\r\n\t\tDefaultComboBoxModel<String> comboBoxModelConsulta = new DefaultComboBoxModel<>();\r\n\t\tJComboBox<String> comboBoxConsulta = new JComboBox<>(comboBoxModelConsulta);\r\n\t\tcomboBoxConsulta.setBounds(757, 257, 140, 30);\r\n\t\tconsultarClientes.add(comboBoxConsulta);\r\n\r\n\t\tJButton btnConsultaTabla = new JButton(\"Consultar Cliente\");\r\n\t\tbtnConsultaTabla.setFocusable(false);\r\n\t\tbtnConsultaTabla.setBounds(757, 297, 160, 30);\r\n\r\n\t\tJButton btnConsultaDireccion = new JButton(\"Consultar Direcci√≥n\");\r\n\t\tbtnConsultaDireccion.setFocusable(false);\r\n\t\tbtnConsultaDireccion.setBounds(757, 337, 160, 30);\r\n\r\n\t\tconsultarClientes.add(btnConsultaDireccion);\r\n\r\n\t\ttry {\r\n\t\t\tConnection connection = DriverManager.getConnection(\"jdbc:mysql://localhost:3306/clientes\", \"root\", \"\");\r\n\r\n\t\t\tStatement statement = connection.createStatement();\r\n\r\n\t\t\t// EJecutar query fetch\r\n\t\t\tString queryConsulta = \"SELECT * FROM clientes\";\r\n\t\t\tResultSet resultSetConsulta = statement.executeQuery(queryConsulta);\r\n\r\n\t\t\ttableModelConsulta.setRowCount(0);\r\n\r\n\t\t\tcomboBoxModelConsulta.removeAllElements();\r\n\r\n\t\t\twhile (resultSetConsulta.next()) {\r\n\t\t\t\tString nombre = resultSetConsulta.getString(\"Nombre\");\r\n\t\t\t\tString apellidos = resultSetConsulta.getString(\"Apellidos\");\r\n\t\t\t\tString telefono = resultSetConsulta.getString(\"Tel√©fono\");\r\n\t\t\t\tString direccion = resultSetConsulta.getString(\"Direcci√≥n\");\r\n\r\n\t\t\t\tObject[] rowData = {nombre, apellidos, telefono, direccion};\r\n\r\n\t\t\t\ttableModelConsulta.addRow(rowData);\r\n\r\n\t\t\t\tcomboBoxModelConsulta.addElement(nombre + \" \" + apellidos);\r\n\t\t\t}\r\n\r\n\t\t\tresultSetConsulta.close();\r\n\t\t\tstatement.close();\r\n\t\t\tconnection.close();\r\n\t\t} catch (SQLException ex) {\r\n\t\t\tex.printStackTrace();\r\n\t\t}\r\n\r\n\t\tbtnConsultaTabla.addActionListener(new ActionListener() {\r\n\t\t\t@Override\r\n\t\t\tpublic void actionPerformed(ActionEvent e) {\r\n\t\t\t\tremove(ConsultaClientes);\r\n\t\t\t\tadd(InfoCliente);\r\n\t\t\t\trepaint();\r\n\t\t\t\trevalidate();\r\n\t\t\t}\r\n\t\t});\r\n\t\tconsultarClientes.add(btnConsultaTabla);\r\n\r\n\t\tbtnConsultaDireccion.addActionListener(new ActionListener() {\r\n\t\t\t@Override\r\n\t\t\tpublic void actionPerformed(ActionEvent e) {\r\n\t\t\t\ttableModelConsulta.setColumnIdentifiers(new String[]{\"Nombre\", \"Apellidos\", \"Direcci√≥n\"});\r\n\r\n\t\t\t\ttablaConsulta.repaint();\r\n\t\t\t}\r\n\t\t});\r\n\t\tconsultarClientes.add(btnConsultaDireccion);\r\n\r\n\t\tJPanel panelConsulta2 = new JPanel();\r\n\t\tpanelConsulta2.setBackground(Color.GRAY);\r\n\t\tpanelConsulta2.setBounds(131, 215, 606, 42);\r\n\t\tconsultarClientes.add(panelConsulta2);\r\n\t\tpanelConsulta2.setLayout(null);\r\n\r\n\t\tJLabel historiallbl = new JLabel(\"Cliente a Consultar\");\r\n\t\thistoriallbl.setFont(new Font(\"Arial Black\", Font.PLAIN, 16));\r\n\t\thistoriallbl.setBounds(210, 11, 190, 20);\r\n\t\tpanelConsulta2.add(historiallbl);\r\n\r\n\t\tJLabel clientes = new JLabel(\"Consultar Clientes\");\r\n\t\tclientes.setFont(new Font(\"Arial Black\", Font.PLAIN, 30));\r\n\t\tclientes.setBounds(280, 137, 320, 50);\r\n\t\tconsultarClientes.add(clientes);\r\n\r\n\t\tJButton backConsulta = new JButton(new ImageIcon(\"BotonRetroceder.png\"));\r\n\t\tbackConsulta.setFocusable(false);\r\n\t\tbackConsulta.setBounds(10, 11, 35, 33);\r\n\t\tbackConsulta.addActionListener(new ActionListener() {\r\n\t\t\t@Override\r\n\t\t\tpublic void actionPerformed(ActionEvent e) {\r\n\t\t\t\tremove(ConsultaClientes);\r\n\t\t\t\tadd(Clientes);\r\n\t\t\t\trepaint();\r\n\t\t\t\trevalidate();\r\n\t\t\t}\r\n\t\t});\r\n\t\tconsultarClientes.add(backConsulta);\r\n\r\n\r\n\r\n\r\n\r\n\t\t//-------Informacion de Cliente--------\r\n//-------Informacion de Cliente--------\r\n\r\n\t\tInfoCliente.setLayout(null);\r\n\r\n\t\tJPanel infoCliente = new JPanel();\r\n\t\tinfoCliente.setBounds(0,0,977,681);\r\n\t\tinfoCliente.setBackground(new Color(255, 128, 0));\r\n\t\tinfoCliente.setLayout(null);\r\n\t\tInfoCliente.add(infoCliente);\r\n\r\n\t\tJLabel infoTitulo = new JLabel(\"Informacion del Cliente\");\r\n\t\tinfoTitulo.setBounds(270,70,400,50);\r\n\t\tinfoTitulo.setFont(new Font(\"Arial Black\", Font.PLAIN, 30));\r\n\t\tinfoCliente.add(infoTitulo);\r\n\r\n\t\tJPanel sobreFondoInfo = new JPanel();\r\n\t\tsobreFondoInfo.setBounds(150,120,620,470);\r\n\t\tsobreFondoInfo.setLayout(null);\r\n\t\tinfoCliente.add(sobreFondoInfo);\r\n\r\n\t\tString[] columnNamesInfo = {\"Historial\", \"Orden\"};\r\n\t\tDefaultTableModel tableModelInfo = new DefaultTableModel(columnNamesInfo, 0);\r\n\t\tJTable tablaInfo = new JTable(tableModelInfo);\r\n\r\n\t\ttablaInfo.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);\r\n\r\n\t\tJScrollPane scrollPaneInfo = new JScrollPane(tablaInfo);\r\n\t\tscrollPaneInfo.setBounds(0, 20, 620, 230);\r\n\t\tsobreFondoInfo.add(scrollPaneInfo);\r\n\r\n\t\ttry {\r\n\t\t\tConnection connection = DriverManager.getConnection(\"jdbc:mysql://localhost:3306/clientes\", \"root\", \"\");\r\n\r\n\t\t\tStatement statement = connection.createStatement();\r\n\r\n\t\t\tString queryInfo = \"SELECT * FROM historial\";\r\n\t\t\tResultSet resultSetInfo = statement.executeQuery(queryInfo);\r\n\r\n\t\t\ttableModelInfo.setRowCount(0);\r\n\r\n\t\t\twhile (resultSetInfo.next()) {\r\n\t\t\t\tString historial = resultSetInfo.getString(\"Historial\");\r\n\t\t\t\tString orden = resultSetInfo.getString(\"Orden\");\r\n\r\n\t\t\t\tObject[] rowData = {historial, orden};\r\n\r\n\t\t\t\ttableModelInfo.addRow(rowData);\r\n\t\t\t}\r\n\r\n\t\t\tresultSetInfo.close();\r\n\t\t\tstatement.close();\r\n\t\t\tconnection.close();\r\n\t\t} catch (SQLException ex) {\r\n\t\t\tex.printStackTrace();\r\n\t\t}\r\n\r\n\r\n\r\n\t\tJButton backInfoConsulta = new JButton(new ImageIcon(\"BotonRetroceder.png\"));\r\n\t\tbackInfoConsulta.setFocusable(false);\r\n\t\tbackInfoConsulta.setBounds(10, 11, 35, 33);\r\n\t\tbackInfoConsulta.addActionListener(new ActionListener() {\r\n\t\t\t@Override\r\n\t\t\tpublic void actionPerformed(ActionEvent e) {\r\n\t\t\t\tremove(InfoCliente);\r\n\t\t\t\tadd(ConsultaClientes);\r\n\t\t\t\trepaint();\r\n\t\t\t\trevalidate();\r\n\t\t\t}\r\n\t\t});\r\n\t\tinfoCliente.add(backInfoConsulta);\r\n\r\n\r\n\r\n\r\n\r\n\r\n\t\t//----pantalla eliminar clientes----\r\n\r\n\t\tEliminarClientes.setLayout(null);\r\n\r\n\t\tJPanel eliminarClientes = new JPanel();\r\n\t\teliminarClientes.setBounds(0, 0, 977, 681);\r\n\t\teliminarClientes.setBackground(new Color(255, 128, 0));\r\n\t\teliminarClientes.setLayout(null);\r\n\t\tEliminarClientes.add(eliminarClientes);\r\n\r\n\r\n\r\n\t\tJComboBox<String> comboBox1 = new JComboBox<>();\r\n\t\tcomboBox1.setBounds(757, 257, 140, 30);\r\n\t\teliminarClientes.add(comboBox1);\r\n\r\n\t\tJButton eliminarcliente = new JButton(\"Eliminar cliente\");\r\n\t\teliminarcliente.setBounds(757, 297, 140, 30);\r\n\t\teliminarClientes.add(eliminarcliente);\r\n\r\n\t\tJPanel panelsito = new JPanel();\r\n\t\tpanelsito.setBackground(Color.GRAY);\r\n\t\tpanelsito.setBounds(131, 215, 606, 42);\r\n\t\tpanelsito.setLayout(null);\r\n\t\teliminarClientes.add(panelsito);\r\n\r\n\t\tJLabel lblTitulo = new JLabel(\"Cliente a Eliminar\");\r\n\t\tlblTitulo.setFont(new Font(\"Arial Black\", Font.PLAIN, 16));\r\n\t\tlblTitulo.setBounds(225, 11, 182, 20);\r\n\t\tpanelsito.add(lblTitulo);\r\n\r\n\t\tJLabel lblEliminar = new JLabel(\"Eliminar Clientes\");\r\n\t\tlblEliminar.setFont(new Font(\"Arial Black\", Font.PLAIN, 30));\r\n\t\tlblEliminar.setBounds(280, 137, 350, 50);\r\n\t\teliminarClientes.add(lblEliminar);\r\n\r\n\t\tJButton backEliminar = new JButton(new ImageIcon(\"BotonRetroceder.png\"));\r\n\t\tbackEliminar.setFocusable(false);\r\n\t\tbackEliminar.setBounds(10, 11, 35, 33);\r\n\t\tbackEliminar.addActionListener(new ActionListener() {\r\n\t\t\t@Override\r\n\t\t\tpublic void actionPerformed(ActionEvent e) {\r\n\t\t\t\tremove(EliminarClientes);\r\n\t\t\t\tadd(Clientes);\r\n\t\t\t\trepaint();\r\n\t\t\t\trevalidate();\r\n\t\t\t}\r\n\t\t});\r\n\t\teliminarClientes.add(backEliminar);\r\n\r\n\r\n\t\tString[] columnNames = {\"Nombre\", \"Apellidos\", \"Tel√©fono\", \"Direcci√≥n\"};\r\n\t\tDefaultTableModel tableModel1 = new DefaultTableModel(columnNames, 0);\r\n\t\tJTable tablaEliminar = new JTable(tableModel1);\r\n\r\n\t\ttablaEliminar.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);\r\n\r\n\t\tJScrollPane scrollpanetablainvconsulta = new JScrollPane(tablaEliminar);\r\n\t\tscrollpanetablainvconsulta.setBounds(131, 257, 606, 300);\r\n\t\teliminarClientes.add(scrollpanetablainvconsulta);\r\n\r\n\r\n\r\n\t\ttry {\r\n\r\n\t\t\tString url = \"jdbc:mysql://localhost:3306/clientes\";\r\n\t\t\tString username = \"root\";\r\n\t\t\tString password = \"\";\r\n\t\t\tConnection connection = DriverManager.getConnection(url, username, password);\r\n\r\n\t\t\tStatement statement = connection.createStatement();\r\n\r\n\t\t\tString query = \"SELECT Nombre, Apellidos, Tel√©fono, Direcci√≥n FROM clientes\";\r\n\t\t\tResultSet resultSet = statement.executeQuery(query);\r\n\r\n\t\t\twhile (resultSet.next()) {\r\n\t\t\t\tString nombre = resultSet.getString(\"Nombre\");\r\n\t\t\t\tString apellidos = resultSet.getString(\"Apellidos\");\r\n\t\t\t\tString telefono = resultSet.getString(\"Tel√©fono\");\r\n\t\t\t\tString direccion = resultSet.getString(\"Direcci√≥n\");\r\n\r\n\r\n\t\t\t\tObject[] rowData = {nombre, apellidos, telefono, direccion};\r\n\t\t\t\ttableModel1.addRow(rowData);\r\n\r\n\t\t\t\tString nameAndLastname = nombre + \" \" + apellidos;\r\n\r\n\t\t\t\t// a√±adir valores a combobox\r\n\t\t\t\tcomboBox1.addItem(nameAndLastname);\r\n\t\t\t}\r\n\t\t\trepaint();\r\n\r\n\t\t\tstatement.close();\r\n\t\t\tresultSet.close();\r\n\t\t\tconnection.close();\r\n\t\t} catch (SQLException ex) {\r\n\t\t\tex.printStackTrace();\r\n\t\t}\r\n\r\n\r\n\r\n\t\teliminarcliente.addActionListener(new ActionListener() {\r\n\t\t\t@Override\r\n\t\t\tpublic void actionPerformed(ActionEvent e) {\r\n\t\t\t\tString selectedClient = (String) comboBox1.getSelectedItem();\r\n\t\t\t\tString[] nameAndLastname = selectedClient.split(\" \");\r\n\t\t\t\tString nombre = nameAndLastname[0];\r\n\t\t\t\tString apellidos = nameAndLastname[1];\r\n\r\n\t\t\t\tint option = JOptionPane.showConfirmDialog(null, \"¬øDesea eliminar el cliente seleccionado?\", \"Confirmar\", JOptionPane.OK_CANCEL_OPTION);\r\n\t\t\t\tif (option == JOptionPane.OK_OPTION) {\r\n\t\t\t\t\ttry {\r\n\t\t\t\t\t\tString url = \"jdbc:mysql://localhost:3306/clientes\";\r\n\t\t\t\t\t\tString username = \"root\";\r\n\t\t\t\t\t\tString password = \"\";\r\n\t\t\t\t\t\tConnection connection = DriverManager.getConnection(url, username, password);\r\n\r\n\t\t\t\t\t\tStatement statement = connection.createStatement();\r\n\r\n\t\t\t\t\t\tString deleteQuery = \"DELETE FROM clientes WHERE Nombre='\" + nombre + \"' AND Apellidos='\" + apellidos + \"'\";\r\n\t\t\t\t\t\tstatement.executeUpdate(deleteQuery);\r\n\t\t\t\t\t\tSystem.out.println(\"Linea elminada\");\r\n\r\n\t\t\t\t\t\tint rowCount = tableModel1.getRowCount();\r\n\t\t\t\t\t\tfor (int i = 0; i < rowCount; i++) {\r\n\t\t\t\t\t\t\tString tableNombre = (String) tableModel1.getValueAt(i, 0);\r\n\t\t\t\t\t\t\tString tableApellidos = (String) tableModel1.getValueAt(i, 1);\r\n\t\t\t\t\t\t\tif (tableNombre.equals(nombre) && tableApellidos.equals(apellidos)) {\r\n\t\t\t\t\t\t\t\ttableModel1.removeRow(i);\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tcomboBox1.removeItem(selectedClient);\r\n\r\n\t\t\t\t\t\tcomboBox1.setSelectedIndex(-1);\r\n\r\n\t\t\t\t\t\tstatement.close();\r\n\t\t\t\t\t\tconnection.close();\r\n\t\t\t\t\t} catch (SQLException ex) {\r\n\t\t\t\t\t\tex.printStackTrace();\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\r\n\r\n\r\n\r\n\t\tupdateTimer = new Timer(5000, new ActionListener() {\r\n\t\t\t@Override\r\n\t\t\tpublic void actionPerformed(ActionEvent e) {\r\n\t\t\t\tupdateComponents(tableModel1, tableModelInfo, tableModelEdicion, tableModelConsulta, comboBox1, comboBoxConsulta, comboBox2);\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\tupdateTimer.start();\r\n\r\n\t\tupdateTimer = new Timer(5000, new ActionListener() {\r\n\t\t\t@Override\r\n\t\t\tpublic void actionPerformed(ActionEvent e) {\r\n\t\t\t\tupdateComponents(tablamodelinvconsulta, tableModel, modelo, editarartbox, eliminarartbox);\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\tupdateTimer.start();\r\n\r\n\r\n\r\n\t}\r\n\r\n\r\n\r\n\tpublic void updateComponents(DefaultTableModel tableModel1, DefaultTableModel tableModelInfo, DefaultTableModel tableModelEdicion, DefaultTableModel tableModelConsulta, JComboBox<String> comboBox1, JComboBox<String> comboBoxConsulta, JComboBox<String> comboBox2) {\r\n\t\ttry {\r\n\t\t\tConnection connection = DriverManager.getConnection(\"jdbc:mysql://localhost:3306/clientes\", \"root\", \"root\");\r\n\r\n\t\t\t// actualiza ptabla  1\r\n\t\t\tStatement statement1 = connection.createStatement();\r\n\t\t\tString query1 = \"SELECT Nombre, Apellidos, Tel√©fono, Direcci√≥n FROM clientes\";\r\n\t\t\tResultSet resultSet1 = statement1.executeQuery(query1);\r\n\t\t\ttableModel1.setRowCount(0);\r\n\r\n\t\t\t// limpia combobox para que no se empiece a duplicar\r\n\t\t\tDefaultComboBoxModel<String> comboBoxModel = (DefaultComboBoxModel<String>) comboBox1.getModel();\r\n\t\t\tcomboBoxModel.removeAllElements();\r\n\r\n\t\t\t// limpia comboBoxConsulta para que no se empiece a duplicar\r\n\t\t\tDefaultComboBoxModel<String> comboBoxModelConsulta = (DefaultComboBoxModel<String>) comboBoxConsulta.getModel();\r\n\t\t\tcomboBoxModelConsulta.removeAllElements();\r\n\r\n\t\t\t// limpia comboBox2 para que no se empiece a duplicar\r\n\t\t\tDefaultComboBoxModel<String> comboBoxModel2 = (DefaultComboBoxModel<String>) comboBox2.getModel();\r\n\t\t\tcomboBoxModel2.removeAllElements();\r\n\r\n\r\n\r\n\t\t\t//actualiza combobox1\r\n\t\t\twhile (resultSet1.next()) {\r\n\t\t\t\tString nombre = resultSet1.getString(\"Nombre\");\r\n\t\t\t\tString apellidos = resultSet1.getString(\"Apellidos\");\r\n\t\t\t\tString telefono = resultSet1.getString(\"Tel√©fono\");\r\n\t\t\t\tString direccion = resultSet1.getString(\"Direcci√≥n\");\r\n\r\n\t\t\t\tObject[] rowData = {nombre, apellidos, telefono, direccion};\r\n\t\t\t\ttableModel1.addRow(rowData);\r\n\r\n\t\t\t\tString nameAndLastname = nombre + \" \" + apellidos;\r\n\t\t\t\tcomboBox1.addItem(nameAndLastname);\r\n\t\t\t\tcomboBoxConsulta.addItem(nameAndLastname);\r\n\t\t\t\tcomboBox2.addItem(nameAndLastname);\r\n\t\t\t}\r\n\r\n\t\t\tresultSet1.close();\r\n\t\t\tstatement1.close();\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\t\t\t// actualiza tabla informacion\r\n\t\t\tStatement statement2 = connection.createStatement();\r\n\t\t\tString query2 = \"SELECT * FROM historial\";\r\n\t\t\tResultSet resultSet2 = statement2.executeQuery(query2);\r\n\t\t\ttableModelInfo.setRowCount(0);\r\n\r\n\t\t\twhile (resultSet2.next()) {\r\n\t\t\t\tString historial = resultSet2.getString(\"Historial\");\r\n\t\t\t\tString orden = resultSet2.getString(\"Orden\");\r\n\r\n\t\t\t\tObject[] rowData = {historial, orden};\r\n\t\t\t\ttableModelInfo.addRow(rowData);\r\n\t\t\t}\r\n\r\n\t\t\tresultSet2.close();\r\n\t\t\tstatement2.close();\r\n\r\n\r\n\t\t\t//actualiza tabla afuera clientes\r\n\r\n\r\n\t\t\t// actualiza tabla edicion\r\n\t\t\tStatement statement3 = connection.createStatement();\r\n\t\t\tString query3 = \"SELECT Nombre, Apellidos, Tel√©fono, Direcci√≥n FROM clientes\";\r\n\t\t\tResultSet resultSet3 = statement3.executeQuery(query3);\r\n\t\t\ttableModelEdicion.setRowCount(0);\r\n\r\n\t\t\twhile (resultSet3.next()) {\r\n\t\t\t\tString nombre = resultSet3.getString(\"Nombre\");\r\n\t\t\t\tString apellidos = resultSet3.getString(\"Apellidos\");\r\n\t\t\t\tString telefono = resultSet3.getString(\"Tel√©fono\");\r\n\t\t\t\tString direccion = resultSet3.getString(\"Direcci√≥n\");\r\n\r\n\t\t\t\tObject[] rowData = {nombre, apellidos, telefono, direccion};\r\n\t\t\t\ttableModelEdicion.addRow(rowData);\r\n\t\t\t}\r\n\r\n\t\t\tresultSet3.close();\r\n\t\t\tstatement3.close();\r\n\r\n\t\t\t//  actualiza tabla consulta\r\n\t\t\tStatement statementConsulta = connection.createStatement();\r\n\t\t\tString queryConsulta = \"SELECT * FROM clientes\";\r\n\t\t\tResultSet resultSetConsulta = statementConsulta.executeQuery(queryConsulta);\r\n\t\t\ttableModelConsulta.setRowCount(0);\r\n\r\n\t\t\twhile (resultSetConsulta.next()) {\r\n\t\t\t\tString nombre = resultSetConsulta.getString(\"Nombre\");\r\n\t\t\t\tString apellidos = resultSetConsulta.getString(\"Apellidos\");\r\n\t\t\t\tString telefono = resultSetConsulta.getString(\"Tel√©fono\");\r\n\t\t\t\tString direccion = resultSetConsulta.getString(\"Direcci√≥n\");\r\n\r\n\t\t\t\tObject[] rowData = {nombre, apellidos, telefono, direccion};\r\n\t\t\t\ttableModelConsulta.addRow(rowData);\r\n\t\t\t}\r\n\r\n\t\t\tresultSetConsulta.close();\r\n\t\t\tstatementConsulta.close();\r\n\r\n\t\t\tconnection.close();\r\n\t\t} catch (SQLException ex) {\r\n\t\t\tex.printStackTrace();\r\n\t\t}\r\n\t}\r\n\r\n\r\n\r\n\r\n\tpublic void updateComponents(DefaultTableModel tablamodelinvconsulta, DefaultTableModel tableModel, DefaultTableModel eliminartableModel, JComboBox<String> editarartComboBox, JComboBox<String> eliminarartComboBox) {\r\n\t\ttry {\r\n\t\t\tConnection connection = DriverManager.getConnection(\"jdbc:mysql://localhost:3306/clientes\", \"root\", \"root\");\r\n\r\n\r\n\r\n\t\t\t// Update tablaeditarart\r\n\r\n\t\t\tStatement statementInv = connection.createStatement();\r\n\t\t\tString queryInv = \"SELECT Nombre, Unidad, Color ,Cantidad FROM inventario\";\r\n\t\t\tResultSet resultSetInv = statementInv.executeQuery(queryInv);\r\n\t\t\ttablamodelinvconsulta.setRowCount(0);\r\n\r\n\t\t\twhile (resultSetInv.next()) {\r\n\t\t\t\tString nombre = resultSetInv.getString(\"Nombre\");\r\n\t\t\t\tString unidad = resultSetInv.getString(\"Unidad\");\r\n\t\t\t\tString color = resultSetInv.getString(\"Color\");\r\n\t\t\t\tint cantidad = resultSetInv.getInt(\"Cantidad\");\r\n\r\n\t\t\t\tObject[] rowData = {nombre, unidad, color, cantidad};\r\n\t\t\t\ttablamodelinvconsulta.addRow(rowData);\r\n\t\t\t}\r\n\r\n\t\t\tresultSetInv.close();\r\n\t\t\tstatementInv.close();\r\n\r\n\t\t\t// Update consultainvtable\r\n\r\n\t\t\tStatement statementEdit = connection.createStatement();\r\n\t\t\tString queryEdit = \"SELECT Nombre, Unidad, Cantidad FROM inventario\";\r\n\t\t\tResultSet resultSetEdit = statementEdit.executeQuery(queryEdit);\r\n\t\t\ttableModel.setRowCount(0);\r\n\r\n\t\t\twhile (resultSetEdit.next()) {\r\n\t\t\t\tString nombre = resultSetEdit.getString(\"Nombre\");\r\n\t\t\t\tString unidad = resultSetEdit.getString(\"Unidad\");\r\n\t\t\t\tint cantidad = resultSetEdit.getInt(\"Cantidad\");\r\n\r\n\t\t\t\tObject[] rowData = {nombre, unidad, cantidad};\r\n\t\t\t\ttableModel.addRow(rowData);\r\n\t\t\t}\r\n\r\n\t\t\tresultSetEdit.close();\r\n\t\t\tstatementEdit.close();\r\n\r\n// Update tablaeliminventario\r\n\t\t\tStatement statementDelete = connection.createStatement();\r\n\t\t\tString queryDelete = \"SELECT Nombre, Unidad, Color, Cantidad FROM inventario\";\r\n\t\t\tResultSet resultSetDelete = statementDelete.executeQuery(queryDelete);\r\n\t\t\teliminartableModel.setRowCount(0);\r\n\r\n\t\t\twhile (resultSetDelete.next()) {\r\n\t\t\t\tString nombre = resultSetDelete.getString(\"Nombre\");\r\n\t\t\t\tString unidad = resultSetDelete.getString(\"Unidad\");\r\n\t\t\t\tString color = resultSetDelete.getString(\"Color\");\r\n\t\t\t\tint cantidad = resultSetDelete.getInt(\"Cantidad\");\r\n\r\n\t\t\t\tObject[] rowData = {nombre, unidad, color, cantidad};\r\n\t\t\t\teliminartableModel.addRow(rowData);\r\n\t\t\t}\r\n\r\n\t\t\tresultSetDelete.close();\r\n\t\t\tstatementDelete.close();\r\n\r\n\r\n\t\t\t// Update editarartbox combo box\r\n\t\t\tDefaultComboBoxModel<String> editarartComboBoxModel = (DefaultComboBoxModel<String>) editarartComboBox.getModel();\r\n\t\t\teditarartComboBoxModel.removeAllElements();\r\n\r\n\t\t\tStatement statementCombo = connection.createStatement();\r\n\t\t\tString queryCombo = \"SELECT Nombre FROM inventario\";\r\n\t\t\tResultSet resultSetCombo = statementCombo.executeQuery(queryCombo);\r\n\r\n\t\t\twhile (resultSetCombo.next()) {\r\n\t\t\t\tString nombre = resultSetCombo.getString(\"Nombre\");\r\n\t\t\t\teditarartComboBoxModel.addElement(nombre);\r\n\t\t\t}\r\n\r\n\t\t\tresultSetCombo.close();\r\n\t\t\tstatementCombo.close();\r\n\r\n\t\t\t// Update eliminarartbox combo box\r\n\t\t\tDefaultComboBoxModel<String> eliminarartComboBoxModel = (DefaultComboBoxModel<String>) eliminarartComboBox.getModel();\r\n\t\t\teliminarartComboBoxModel.removeAllElements();\r\n\r\n\t\t\tStatement statementCombo2 = connection.createStatement();\r\n\t\t\tString queryCombo2 = \"SELECT Nombre FROM inventario\";\r\n\t\t\tResultSet resultSetCombo2 = statementCombo2.executeQuery(queryCombo2);\r\n\r\n\t\t\twhile (resultSetCombo2.next()) {\r\n\t\t\t\tString nombre = resultSetCombo2.getString(\"Nombre\");\r\n\t\t\t\teliminarartComboBoxModel.addElement(nombre);\r\n\t\t\t}\r\n\r\n\t\t\tresultSetCombo2.close();\r\n\t\t\tstatementCombo2.close();\r\n\r\n\t\t\tconnection.close();\r\n\t\t} catch (SQLException ex) {\r\n\t\t\tex.printStackTrace();\r\n\t\t}\r\n\t}\r\n\r\n\r\n\tpublic static void migrateTables() {\r\n\t\ttry {\r\n\t\t\t// Connect to the source database\r\n\r\n\t\t\tConnection sourceConnection = DriverManager.getConnection(\"jdbc:mysql://localhost:3306/ordenes\", \"root\", \"root\");\r\n\t\t\tDatabaseMetaData metaData = sourceConnection.getMetaData();\r\n\r\n\t\t\t// Get the list of tables in the source database\r\n\t\t\tResultSet tables = metaData.getTables(\"ordenes\", null, null, new String[]{\"TABLE\"});\r\n\r\n\t\t\t// Connect to the target database\r\n\t\t\tConnection targetConnection = DriverManager.getConnection(\"jdbc:mysql://localhost:3306/ordenes\", \"root\", \"root\");\r\n\t\t\tStatement targetStatement = targetConnection.createStatement();\r\n\r\n\t\t\t// Clear the existing data in the target table\r\n\t\t\ttargetStatement.executeUpdate(\"DELETE FROM historialbueno\");\r\n\r\n\t\t\t// Get the next auto-increment ID value\r\n\t\t\tResultSet idResult = targetStatement.executeQuery(\"SELECT MAX(ID) FROM historialbueno\");\r\n\t\t\tint nextId = 1;\r\n\t\t\tif (idResult.next()) {\r\n\t\t\t\tnextId = idResult.getInt(1) + 1;\r\n\t\t\t}\r\n\r\n\t\t\t// Iterate over the tables\r\n\t\t\twhile (tables.next()) {\r\n\t\t\t\tString tableName = tables.getString(\"TABLE_NAME\");\r\n\r\n\t\t\t\t// Skip the \"historialbueno\" table\r\n\t\t\t\tif (!tableName.equals(\"historialbueno\")) {\r\n\t\t\t\t\t// Fetch specific columns from the table\r\n\t\t\t\t\tString columnNames = \"Nombre, Platillos, Total\";\r\n\t\t\t\t\tString selectQuery = \"SELECT \" + columnNames + \" FROM \" + tableName;\r\n\t\t\t\t\tResultSet resultSet = sourceConnection.createStatement().executeQuery(selectQuery);\r\n\r\n\t\t\t\t\t// Insert the fetched data into the target table\r\n\t\t\t\t\twhile (resultSet.next()) {\r\n\t\t\t\t\t\tStringBuilder insertQuery = new StringBuilder(\"INSERT INTO historialbueno (ID, \");\r\n\t\t\t\t\t\tStringBuilder values = new StringBuilder(\"VALUES (\");\r\n\t\t\t\t\t\tinsertQuery.append(columnNames.replace(\",\", \", \")).append(\") \");\r\n\t\t\t\t\t\tvalues.append(\"'\").append(nextId++).append(\"', \");\r\n\t\t\t\t\t\tvalues.append(\"'\").append(resultSet.getString(\"Nombre\")).append(\"', \");\r\n\t\t\t\t\t\tvalues.append(\"'\").append(resultSet.getString(\"Platillos\")).append(\"', \");\r\n\t\t\t\t\t\tvalues.append(resultSet.getDouble(\"Total\")).append(\")\");\r\n\r\n\t\t\t\t\t\t// Complete the insert query\r\n\t\t\t\t\t\tinsertQuery.append(values);\r\n\r\n\t\t\t\t\t\t// Execute the insert query\r\n\t\t\t\t\t\ttargetStatement.executeUpdate(insertQuery.toString());\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t// Close connections and statements\r\n\t\t\ttables.close();\r\n\t\t\tsourceConnection.close();\r\n\t\t\ttargetStatement.close();\r\n\t\t\ttargetConnection.close();\r\n\t\t} catch (SQLException ex) {\r\n\t\t\tex.printStackTrace();\r\n\t\t}\r\n\t}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\tprivate boolean ingredientExists(String tableName, String ingredient) {\r\n\t\tString url = \"jdbc:mysql://localhost:3306/platillos\";\r\n\t\tString username = \"your-username\";\r\n\t\tString password = \"your-password\";\r\n\r\n\t\ttry (Connection connection = DriverManager.getConnection(url, username, password)) {\r\n\t\t\tStatement statement = connection.createStatement();\r\n\r\n\t\t\tString checkIngredientQuery = \"SELECT COUNT(*) FROM \" + tableName + \" WHERE Ingrediente = ?\";\r\n\t\t\tPreparedStatement preparedStatement = connection.prepareStatement(checkIngredientQuery);\r\n\t\t\tpreparedStatement.setString(1, ingredient);\r\n\t\t\tResultSet resultSet = preparedStatement.executeQuery();\r\n\r\n\t\t\tif (resultSet.next()) {\r\n\t\t\t\tint count = resultSet.getInt(1);\r\n\t\t\t\treturn count > 0;\r\n\t\t\t}\r\n\t\t} catch (SQLException ex) {\r\n\t\t\tex.printStackTrace();\r\n\t\t}\r\n\r\n\t\treturn false;\r\n\t}\r\n\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/Restaurante.java b/src/Restaurante.java
--- a/src/Restaurante.java	(revision 5cafbde7abb5c1e9f3c992a9433fe23895a07db7)
+++ b/src/Restaurante.java	(date 1686828828300)
@@ -161,7 +161,7 @@
 
 				// Establish a database connection
 				try {
-					Connection connection = DriverManager.getConnection("jdbc:mysql://localhost:3306/credenciales", "root", "root");
+					Connection connection = DriverManager.getConnection("jdbc:mysql://localhost:3306/credenciales", "root", "");
 					String query = "SELECT * FROM iniciosesion LIMIT 1";
 					PreparedStatement preparedStatement = connection.prepareStatement(query);
 					ResultSet resultSet = preparedStatement.executeQuery();
@@ -495,7 +495,7 @@
 		DefaultTableModel tablemodelconsultaplat = new DefaultTableModel(data, nombrecolumns);
 
 		try {
-			Connection connection = DriverManager.getConnection("jdbc:mysql://localhost:3306/platillos", "root", "root");
+			Connection connection = DriverManager.getConnection("jdbc:mysql://localhost:3306/platillos", "root", "");
 			Statement statement = connection.createStatement();
 			ResultSet tableResultSet = statement.executeQuery("SHOW TABLES");
 
@@ -551,7 +551,7 @@
 					String tableName = tablemodelconsultaplat.getValueAt(rowIndex, 0).toString();
 
 					try {
-						Connection connection = DriverManager.getConnection("jdbc:mysql://localhost:3306/platillos", "root", "root");
+						Connection connection = DriverManager.getConnection("jdbc:mysql://localhost:3306/platillos", "root", "");
 						Statement statement = connection.createStatement();
 						ResultSet resultSet = statement.executeQuery("SELECT * FROM " + tableName);
 
@@ -583,7 +583,7 @@
 					String tableName = tablemodelconsultaplat.getValueAt(selectedRowIndex, 0).toString();
 
 					try {
-						Connection connection = DriverManager.getConnection("jdbc:mysql://localhost:3306/platillos", "root", "root");
+						Connection connection = DriverManager.getConnection("jdbc:mysql://localhost:3306/platillos", "root", "");
 						Statement statement = connection.createStatement();
 						ResultSet resultSet = statement.executeQuery("SELECT * FROM " + tableName);
 
@@ -638,7 +638,7 @@
 				tablemodelconsultaplat.setRowCount(0);
 
 				try {
-					Connection connection = DriverManager.getConnection("jdbc:mysql://localhost:3306/platillos", "root", "root");
+					Connection connection = DriverManager.getConnection("jdbc:mysql://localhost:3306/platillos", "root", "");
 					Statement statement = connection.createStatement();
 					ResultSet tableResultSet = statement.executeQuery("SHOW TABLES");
 
@@ -772,11 +772,6 @@
 		btnCrearPlat.setBounds(434, 526, 150, 43);
 		panelcrearplat.add(btnCrearPlat);
 
-		JButton btnadjuntarimagen = new JButton("Adjuntar Imagen\r\n");
-		btnadjuntarimagen.setFont(new Font("Arial Black", Font.PLAIN, 16));
-		btnadjuntarimagen.setBackground(new Color(254, 211, 122));
-		btnadjuntarimagen.setBounds(704, 444, 211, 43);
-		panelcrearplat.add(btnadjuntarimagen);
 
 		JTextField cantidadingrediente2 = new JTextField();
 		cantidadingrediente2.setColumns(10);
@@ -802,12 +797,6 @@
 		panelcrearplat.add(btncrearplat2);
 
 
-		JButton btnAdjuntarImagen2 = new JButton("Adjuntar Imagen\r\n");
-		btnAdjuntarImagen2.setFont(new Font("Arial Black", Font.PLAIN, 16));
-		btnAdjuntarImagen2.setBackground(new Color(254, 211, 122));
-		btnAdjuntarImagen2.setBounds(704, 444, 211, 43);
-		panelcrearplat.add(btnAdjuntarImagen2);
-
 		JLabel Crearplatlbl = new JLabel("Crear Platillo");
 		Crearplatlbl.setFont(new Font("Arial Black", Font.PLAIN, 26));
 		Crearplatlbl.setBounds(387, 0, 227, 40);
@@ -830,7 +819,7 @@
 				} else {
 					String url = "jdbc:mysql://localhost:3306/platillos";
 					String username = "root";
-					String password = "root";
+					String password = "";
 
 					try (Connection connection = DriverManager.getConnection(url, username, password)) {
 						DatabaseMetaData metaData = connection.getMetaData();
@@ -886,8 +875,8 @@
 
 				if (!ingredientExists(tableName, ingrediente)) {
 					String url = "jdbc:mysql://localhost:3306/platillos";
-					String username = "your-username";
-					String password = "your-password";
+					String username = "root";
+					String password = "";
 
 					try (Connection connection = DriverManager.getConnection(url, username, password)) {
 						Statement statement = connection.createStatement();
@@ -931,8 +920,8 @@
 
 
 		String url2 = "jdbc:mysql://localhost:3306/clientes";
-		String username2 = "your-username";
-		String password2 = "your-password";
+		String username2 = "root";
+		String password2 = "";
 
 		try (Connection connection = DriverManager.getConnection(url2, username2, password2)) {
 			Statement statement = connection.createStatement();
@@ -1057,11 +1046,6 @@
 		btnEditarPlat.setBounds(404, 536, 150, 33);
 		paneledplat.add(btnEditarPlat);
 
-		JButton btnAdjuntarImagen = new JButton("Adjuntar Imagen\r\n");
-		btnAdjuntarImagen.setFont(new Font("Arial Black", Font.PLAIN, 16));
-		btnAdjuntarImagen.setBackground(new Color(254, 211, 122));
-		btnAdjuntarImagen.setBounds(553, 391, 211, 43);
-		paneledplat.add(btnAdjuntarImagen);
 
 		JComboBox Platilloaeditarbox = new JComboBox();
 		Platilloaeditarbox.setBounds(23, 48, 372, 33);
@@ -1126,7 +1110,7 @@
 
 				if (confirm == JOptionPane.YES_OPTION) {
 					try {
-						Connection connection = DriverManager.getConnection("jdbc:mysql://localhost/platillos", "root", "root");
+						Connection connection = DriverManager.getConnection("jdbc:mysql://localhost/platillos", "root", "");
 
 						String selectedTable = (String) Platilloaeditarbox.getSelectedItem();
 
@@ -1150,7 +1134,7 @@
 			@Override
 			public void actionPerformed(ActionEvent e) {
 				try {
-					Connection connection = DriverManager.getConnection("jdbc:mysql://localhost/clientes", "username", "password");
+					Connection connection = DriverManager.getConnection("jdbc:mysql://localhost/clientes", "root", "");
 
 					Statement statement = connection.createStatement();
 
@@ -1184,7 +1168,7 @@
 				try {
 					String selectedTable = (String) Platilloaeditarbox.getSelectedItem();
 					if (selectedTable != null && !selectedTable.isEmpty()) {
-						Connection connection = DriverManager.getConnection("jdbc:mysql://localhost/platillos", "username", "password");
+						Connection connection = DriverManager.getConnection("jdbc:mysql://localhost/platillos", "root", "");
 						Statement statement = connection.createStatement();
 
 						ResultSet resultSet = statement.executeQuery("SELECT Ingrediente, Unidad, Cantidad, Precio, Descripcion FROM " + selectedTable);
@@ -1216,7 +1200,7 @@
 			@Override
 			public void actionPerformed(ActionEvent e) {
 				try {
-					Connection connection = DriverManager.getConnection("jdbc:mysql://localhost/platillos", "root", "root");
+					Connection connection = DriverManager.getConnection("jdbc:mysql://localhost/platillos", "root", "");
 					Statement statement = connection.createStatement();
 
 					ResultSet resultSet = statement.executeQuery("SHOW TABLES");
@@ -1240,7 +1224,7 @@
 		timer2.start();
 
 		try {
-			Connection connection = DriverManager.getConnection("jdbc:mysql://localhost/platillos", "username", "password");
+			Connection connection = DriverManager.getConnection("jdbc:mysql://localhost/platillos", "root", "");
 
 			Statement statement = connection.createStatement();
 
@@ -1265,7 +1249,7 @@
 				try {
 					String selectedTable = (String) Platilloaeditarbox.getSelectedItem();
 					if (selectedTable != null && !selectedTable.isEmpty()) {
-						Connection connection = DriverManager.getConnection("jdbc:mysql://localhost/platillos", "username", "password");
+						Connection connection = DriverManager.getConnection("jdbc:mysql://localhost/platillos", "root", "");
 						Statement statement = connection.createStatement();
 
 						ResultSet resultSet = statement.executeQuery("SELECT Ingrediente, Unidad, Cantidad, Precio, Descripcion FROM " + selectedTable);
@@ -1301,7 +1285,7 @@
 			@Override
 			public void actionPerformed(ActionEvent e) {
 				try {
-					Connection connection = DriverManager.getConnection("jdbc:mysql://localhost/platillos", "root", "root");
+					Connection connection = DriverManager.getConnection("jdbc:mysql://localhost/platillos", "root", "");
 
 					String selectedTable = (String) Platilloaeditarbox.getSelectedItem();
 
@@ -1334,7 +1318,7 @@
 			@Override
 			public void actionPerformed(ActionEvent e) {
 				try {
-					Connection connection = DriverManager.getConnection("jdbc:mysql://localhost/platillos", "root", "root");
+					Connection connection = DriverManager.getConnection("jdbc:mysql://localhost/platillos", "root", "");
 
 					String selectedTable = (String) Platilloaeditarbox.getSelectedItem();
 					String selectedIngredient = (String) ingredientebox.getSelectedItem();
@@ -1376,7 +1360,7 @@
 			@Override
 			public void actionPerformed(ActionEvent e) {
 				try {
-					Connection connection = DriverManager.getConnection("jdbc:mysql://localhost/platillos", "root", "root");
+					Connection connection = DriverManager.getConnection("jdbc:mysql://localhost/platillos", "root", "");
 
 					String selectedTable = (String) Platilloaeditarbox.getSelectedItem();
 					String newTableName = NombrePlatEdField.getText();
@@ -1496,7 +1480,7 @@
 
 
 		try {
-			Connection connection = DriverManager.getConnection("jdbc:mysql://localhost:3306/clientes", "root", "root");
+			Connection connection = DriverManager.getConnection("jdbc:mysql://localhost:3306/clientes", "root", "");
 			Statement statement = connection.createStatement();
 			ResultSet resultSet = statement.executeQuery("SELECT Nombre FROM inventario");
 
@@ -1530,7 +1514,7 @@
 					StringBuilder matchingTables = new StringBuilder();
 
 					try {
-						Connection connection = DriverManager.getConnection("jdbc:mysql://localhost:3306/platillos", "root", "root");
+						Connection connection = DriverManager.getConnection("jdbc:mysql://localhost:3306/platillos", "root", "");
 						Statement statement = connection.createStatement();
 						ResultSet resultSet = statement.executeQuery("SHOW TABLES");
 
@@ -1577,7 +1561,7 @@
 			@Override
 			public void actionPerformed(ActionEvent e) {
 				try {
-					Connection connection = DriverManager.getConnection("jdbc:mysql://localhost:3306/clientes", "root", "root");
+					Connection connection = DriverManager.getConnection("jdbc:mysql://localhost:3306/clientes", "root", "");
 					Statement statement = connection.createStatement();
 					ResultSet resultSet = statement.executeQuery("SELECT Nombre FROM inventario");
 
@@ -1744,11 +1728,11 @@
 		IconOrden.add(logoOrdenes);
 
 
-		JButton btnEditarOrdenes = new JButton("Editar");
+		JButton btnEditarOrdenes = new JButton("Eliminar");
 		btnEditarOrdenes.setFont(new Font("Arial Black", Font.PLAIN, 20));
 		btnEditarOrdenes.setBackground(new Color(255, 128, 0));
 		btnEditarOrdenes.setFocusable(false);
-		btnEditarOrdenes.setBounds(112, 198, 217, 60);
+		btnEditarOrdenes.setBounds(112, 95, 217, 60);
 		btnEditarOrdenes.addActionListener(new ActionListener() {
 			@Override
 			public void actionPerformed(ActionEvent e) {
@@ -1761,22 +1745,6 @@
 		});
 		panelMiniOrden.add(btnEditarOrdenes);
 
-		JButton btnEliminarOrden = new JButton("Eliminar");
-		btnEliminarOrden.setFont(new Font("Arial Black", Font.PLAIN, 20));
-		btnEliminarOrden.setBackground(new Color(255, 128, 0));
-		btnEliminarOrden.setFocusable(false);
-		btnEliminarOrden.setBounds(490, 198, 217, 60);
-		btnEliminarOrden.addActionListener(new ActionListener() {
-			@Override
-			public void actionPerformed(ActionEvent e) {
-				remove(Ordenes);
-				add(EliminarOrden);
-				repaint();
-				revalidate();
-
-			}
-		});
-		panelMiniOrden.add(btnEliminarOrden);
 
 		JButton btnCrearOrden = new JButton("Crear");
 		btnCrearOrden.setFont(new Font("Arial Black", Font.PLAIN, 20));
@@ -1921,7 +1889,7 @@
 		panelCrearOrden.add(platillosenordentable);
 
 		try {
-			Connection connection = DriverManager.getConnection("jdbc:mysql://localhost:3306/clientes", "root", "root");
+			Connection connection = DriverManager.getConnection("jdbc:mysql://localhost:3306/clientes", "root", "");
 			Statement statement = connection.createStatement();
 			String query = "SELECT Nombre, Apellidos FROM clientes";
 			ResultSet resultSet = statement.executeQuery(query);
@@ -1942,34 +1910,102 @@
 
 
 		try {
-			Connection connection = DriverManager.getConnection("jdbc:mysql://localhost:3306/platillos", "root", "root");
+			Connection connection = DriverManager.getConnection("jdbc:mysql://localhost:3306/platillos", "root", "");
 			Statement statement = connection.createStatement();
 			String query = "SHOW TABLES";
 			ResultSet resultSet = statement.executeQuery(query);
+
+			while (resultSet.next()) {
+				String tableName = resultSet.getString(1);
+
+				String price = "";
+				String getPriceQuery = "SELECT Precio FROM " + tableName + " LIMIT 1";
+				Statement getPriceStatement = connection.createStatement();
+				ResultSet getPriceResult = getPriceStatement.executeQuery(getPriceQuery);
+				if (getPriceResult.next()) {
+					price = getPriceResult.getString("Precio");
+				}
+				getPriceResult.close();
+				getPriceStatement.close();
+
+				String itemData = tableName + " - Precio: " + price;
+				platilloaelegirlbox.addItem(itemData);
+			}
+
+			resultSet.close();
+			statement.close();
+			connection.close();
+		} catch (SQLException ex) {
+			ex.printStackTrace();
+		}
+
+		Timer platilloTimer = new Timer(15000, e -> {
+			platilloaelegirlbox.removeAllItems();
+			try {
+				Connection connection = DriverManager.getConnection("jdbc:mysql://localhost:3306/platillos", "root", "");
+				Statement statement = connection.createStatement();
+				String query = "SHOW TABLES";
+				ResultSet resultSet = statement.executeQuery(query);
 
-			while (resultSet.next()) {
-				String tableName = resultSet.getString(1);
+				while (resultSet.next()) {
+					String tableName = resultSet.getString(1);
 
-				String price = "";
-				String getPriceQuery = "SELECT Precio FROM " + tableName + " LIMIT 1";
-				Statement getPriceStatement = connection.createStatement();
-				ResultSet getPriceResult = getPriceStatement.executeQuery(getPriceQuery);
-				if (getPriceResult.next()) {
-					price = getPriceResult.getString("Precio");
-				}
-				getPriceResult.close();
-				getPriceStatement.close();
+					String price = "";
+					String getPriceQuery = "SELECT Precio FROM " + tableName + " LIMIT 1";
+					Statement getPriceStatement = connection.createStatement();
+					ResultSet getPriceResult = getPriceStatement.executeQuery(getPriceQuery);
+					if (getPriceResult.next()) {
+						price = getPriceResult.getString("Precio");
+					}
+					getPriceResult.close();
+					getPriceStatement.close();
 
-				String itemData = tableName + " - Precio: " + price;
-				platilloaelegirlbox.addItem(itemData);
-			}
+					String itemData = tableName + " - Precio: " + price;
+					platilloaelegirlbox.addItem(itemData);
+				}
 
-			resultSet.close();
-			statement.close();
-			connection.close();
-		} catch (SQLException ex) {
-			ex.printStackTrace();
-		}
+				resultSet.close();
+				statement.close();
+				connection.close();
+			} catch (SQLException ex) {
+				ex.printStackTrace();
+			}
+		});
+
+		platilloTimer.start();
+
+
+
+
+
+
+		Timer clienteTimer = new Timer(15000, e -> {
+			clienteaelegirbox.removeAllItems(); // Clear the combo box
+
+			try {
+				Connection connection = DriverManager.getConnection("jdbc:mysql://localhost:3306/clientes", "root", "");
+				Statement statement = connection.createStatement();
+				String query = "SELECT Nombre, Apellidos FROM clientes";
+				ResultSet resultSet = statement.executeQuery(query);
+
+				while (resultSet.next()) {
+					String nombre = resultSet.getString("Nombre");
+					String apellidos = resultSet.getString("Apellidos");
+					String clienteData = nombre + " " + apellidos;
+					clienteaelegirbox.addItem(clienteData);
+				}
+
+				resultSet.close();
+				statement.close();
+				connection.close();
+			} catch (SQLException ex) {
+				ex.printStackTrace();
+			}
+		});
+
+		clienteTimer.start();
+
+
 
 
 
@@ -1991,7 +2027,7 @@
 				double price = 0.0;
 
 				try {
-					Connection connection = DriverManager.getConnection("jdbc:mysql://localhost:3306/platillos", "root", "root");
+					Connection connection = DriverManager.getConnection("jdbc:mysql://localhost:3306/platillos", "root", "");
 					Statement statement = connection.createStatement();
 					String getPriceQuery = "SELECT Precio FROM " + tableName + " LIMIT 1";
 					ResultSet getPriceResult = statement.executeQuery(getPriceQuery);
@@ -2074,7 +2110,7 @@
 				Map<String, Float> ingredientesCantidadMap = new HashMap<>();
 
 				try {
-					Connection connection = DriverManager.getConnection("jdbc:mysql://localhost:3306/platillos", "root", "root");
+					Connection connection = DriverManager.getConnection("jdbc:mysql://localhost:3306/platillos", "root", "");
 					Statement statement = connection.createStatement();
 
 					String tableName = selectedPlatillo;
@@ -2098,7 +2134,7 @@
 				}
 
 				try {
-					Connection connection = DriverManager.getConnection("jdbc:mysql://localhost:3306/clientes", "root", "root");
+					Connection connection = DriverManager.getConnection("jdbc:mysql://localhost:3306/clientes", "root", "");
 					Statement statement = connection.createStatement();
 
 					String tableName = "inventario";
@@ -2123,7 +2159,7 @@
 					String selectedDireccion = "";
 
 					try {
-						Connection connection = DriverManager.getConnection("jdbc:mysql://localhost:3306/clientes", "root", "root");
+						Connection connection = DriverManager.getConnection("jdbc:mysql://localhost:3306/clientes", "root", "");
 						Statement statement = connection.createStatement();
 
 						String query = "SELECT Direcci√≥n FROM clientes WHERE Nombre = '" + selectedCliente + "'";
@@ -2163,7 +2199,7 @@
 
 					int orderId = 1;
 					try {
-						Connection connection = DriverManager.getConnection("jdbc:mysql://localhost:3306/ordenes", "root", "root");
+						Connection connection = DriverManager.getConnection("jdbc:mysql://localhost:3306/ordenes", "root", "");
 						Statement statement = connection.createStatement();
 
 						String tableName = "ordenes";
@@ -2184,10 +2220,11 @@
 					String tableName = orderId + "_" + selectedCliente.replace(" ", "_");
 
 					try {
-						Connection connection = DriverManager.getConnection("jdbc:mysql://localhost:3306/ordenes", "root", "root");
+						Connection connection = DriverManager.getConnection("jdbc:mysql://localhost:3306/ordenes", "root", "");
 						Statement statement = connection.createStatement();
 
-						String createTableQuery = "CREATE TABLE IF NOT EXISTS ordenes " +
+						// Create the table
+						String createTableQuery = "CREATE TABLE IF NOT EXISTS " + tableName + " " +
 								"(ID INT AUTO_INCREMENT, Nombre VARCHAR(255), Direccion VARCHAR(255), Platillos VARCHAR(255), Precio VARCHAR(255), Total DOUBLE, PRIMARY KEY (ID))";
 						statement.executeUpdate(createTableQuery);
 
@@ -2225,6 +2262,7 @@
 
 
 
+
 		JButton backCCord = new JButton(new ImageIcon("BotonRetroceder.png"));
 		backCCord.setBounds(10, 11, 35, 33);
 		backCCord.addActionListener(new ActionListener() {
@@ -2290,20 +2328,11 @@
 
 
 
-		JButton btnEditarTablaOrd = new JButton("Editar Orden");
+		JButton btnEditarTablaOrd = new JButton("Eliminar Orden");
 		btnEditarTablaOrd.setFocusable(false);
 		btnEditarTablaOrd.setBounds(757, 383, 160, 32);
 		EditarOrdenes.add(btnEditarTablaOrd);
-		btnEditarTablaOrd.addActionListener(new ActionListener() {
-			@Override
-			public void actionPerformed(ActionEvent e) {
-				remove(EditarOrden);
-				add(PanelEditarOrden);
-				repaint();
-				revalidate();
-			}
-		});
-		EditarOrdenes.add(btnEditarTablaOrd);
+
 
 
 
@@ -2339,8 +2368,8 @@
 
 
 //tabla conecta base de datos
-			try {
-			Connection connection = DriverManager.getConnection("jdbc:mysql://localhost:3306/ordenes", "root", "root");
+		try {
+			Connection connection = DriverManager.getConnection("jdbc:mysql://localhost:3306/ordenes", "root", "");
 			Statement statement = connection.createStatement();
 
 			String selectQuery = "SELECT ID, Nombre, Platillos, Total FROM historialbueno";
@@ -2366,10 +2395,12 @@
 		}
 
 //conecta el combobox con la base de datos
+
+
 		comboBoxModelEditarOrd.removeAllElements();
 
 		try {
-			Connection connection = DriverManager.getConnection("jdbc:mysql://localhost:3306/ordenes", "root", "root");
+			Connection connection = DriverManager.getConnection("jdbc:mysql://localhost:3306/ordenes", "root", "");
 			Statement statement = connection.createStatement();
 
 			String selectQuery = "SELECT ID, Nombre FROM historialbueno";
@@ -2390,14 +2421,51 @@
 			ex.printStackTrace();
 		}
 
-
-
-
-
-
-
-
+		btnEditarTablaOrd.addActionListener(new ActionListener() {
+			@Override
+			public void actionPerformed(ActionEvent e) {
+				int selectedIndex = comboBoxEditarOrd.getSelectedIndex();
+				if (selectedIndex != -1) {
+
+					int confirm = JOptionPane.showConfirmDialog(null, "¬øEst√° seguro de eliminar la orden?", "Confirmar eliminaci√≥n", JOptionPane.YES_NO_OPTION);
+					if (confirm == JOptionPane.YES_OPTION) {
+						String selectedItem = comboBoxEditarOrd.getItemAt(selectedIndex);
+						String[] parts = selectedItem.split(" - ");
+						int selectedItemId = Integer.parseInt(parts[0]);
+
+						try {
+							Connection connection = DriverManager.getConnection("jdbc:mysql://localhost:3306/ordenes", "root", "");
+							String deleteQuery = "DELETE FROM historialbueno WHERE ID=?";
+							PreparedStatement statement = connection.prepareStatement(deleteQuery);
+							statement.setInt(1, selectedItemId);
+
+							int rowsDeleted = statement.executeUpdate();
+							if (rowsDeleted > 0) {
+
+								JOptionPane.showMessageDialog(null, "Orden eliminada correctamente", "Eliminaci√≥n exitosa", JOptionPane.INFORMATION_MESSAGE);
+								System.out.println("Row deleted successfully.");
+
+								// Remove item from combo box
+								comboBoxEditarOrd.removeItemAt(selectedIndex);
+							} else {
+								System.out.println("Failed to delete the row.");
+							}
+
+							statement.close();
+							connection.close();
+						} catch (SQLException ex) {
+							ex.printStackTrace();
+						}
+
+						DefaultTableModel model = (DefaultTableModel) tablaEditarOrd.getModel();
+						model.removeRow(selectedIndex);
+					}
+				}
 
+				repaint();
+				revalidate();
+			}
+		});
 
 
 
@@ -2414,8 +2482,7 @@
 
 
 
-
-		//-----panel editar Ordenes-----
+		//---------------parte final-----------------------------------------------------panel editar Ordenes-----
 		PanelEditarOrden.setLayout(null);
 
 		JPanel EditOrdenes1 = new JPanel();
@@ -2467,11 +2534,11 @@
 		Agregarplatilloaordenbtn2.setFont(new Font("Tahoma", Font.BOLD, 17));
 		EditOrdenes2.add(Agregarplatilloaordenbtn2);
 
-		JButton CrearOrdenn2 = new JButton("Editar Orden");
-		CrearOrdenn2.setForeground(new Color(0, 0, 0));
-		CrearOrdenn2.setFont(new Font("Tahoma", Font.BOLD, 11));
-		CrearOrdenn2.setBounds(350, 383, 113, 32);
-		EditOrdenes2.add(CrearOrdenn2);
+		JButton editarOrdenbtn = new JButton("Editar Orden");
+		editarOrdenbtn.setForeground(new Color(0, 0, 0));
+		editarOrdenbtn.setFont(new Font("Tahoma", Font.BOLD, 11));
+		editarOrdenbtn.setBounds(350, 383, 113, 32);
+		EditOrdenes2.add(editarOrdenbtn);
 
 		JButton cancelarordenbtn2 = new JButton("Cancelar orden");
 		cancelarordenbtn2.setForeground(new Color(0, 0, 0));
@@ -2508,72 +2575,12 @@
 
 
 
-/*
-		btnEditarTablaOrd.addActionListener(new ActionListener() {
-			@Override
-			public void actionPerformed(ActionEvent e) {
-				String selectedRow = (String) comboBoxEditarOrd.getSelectedItem();
-				if (selectedRow != null) {
-					String[] rowParts = selectedRow.split(" - ");
-					int id = Integer.parseInt(rowParts[0]);
-					String nombre = rowParts[1];
-
-					// Retrieve values from the database for the selected row
-					try {
-						Connection connection = DriverManager.getConnection("jdbc:mysql://localhost:3306/ordenes", "root", "root");
-						Statement statement = connection.createStatement();
-
-						String selectQuery = "SELECT Nombre, Platillos, Total FROM historialbueno WHERE ID = " + id;
-						ResultSet resultSet = statement.executeQuery(selectQuery);
-
-						if (resultSet.next()) {
-							String nombreDB = resultSet.getString("Nombre");
-							String platillos = resultSet.getString("Platillos");
-							double total = resultSet.getDouble("Total");
-
-							// Update the combobox and labels with the retrieved values
-							clienteaelegirbox2.setSelectedItem(nombreDB);
-
-							// Clear the existing items in the platilloaelegirbox2 combobox
-							platilloaelegirlbox2.removeAllItems();
-
-							// Retrieve the values from the "platillos" table and add them to the combobox
-							String selectPlatillosQuery = "SELECT Nombre FROM platillos";
-							ResultSet platillosResultSet = statement.executeQuery(selectPlatillosQuery);
-							while (platillosResultSet.next()) {
-								String platillo = platillosResultSet.getString("Nombre");
-								platilloaelegirlbox2.addItem(platillo);
-							}
-							platillosResultSet.close();
-
-							platilloaremoverbox2.removeAllItems();
-							platilloaremoverbox2.addItem(platillos);
-							Totalporcompralbl2.setText("Total: " + total);
-						}
-
-						resultSet.close();
-						statement.close();
-						connection.close();
-					} catch (SQLException ex) {
-						ex.printStackTrace();
-					}
-				}
-
-				remove(EditarOrden);
-				add(PanelEditarOrden);
-				repaint();
-				revalidate();
-			}
-		});
-
-*/
-
 
 		//CONECTORES
 
 
 		try {
-			Connection connection = DriverManager.getConnection("jdbc:mysql://localhost:3306/clientes", "root", "root");
+			Connection connection = DriverManager.getConnection("jdbc:mysql://localhost:3306/clientes", "root", "");
 			Statement statement = connection.createStatement();
 			String query = "SELECT Nombre, Apellidos FROM clientes";
 			ResultSet resultSet = statement.executeQuery(query);
@@ -2594,7 +2601,7 @@
 
 
 		try {
-			Connection connection = DriverManager.getConnection("jdbc:mysql://localhost:3306/platillos", "root", "root");
+			Connection connection = DriverManager.getConnection("jdbc:mysql://localhost:3306/platillos", "root", "");
 			Statement statement = connection.createStatement();
 			String query = "SHOW TABLES";
 			ResultSet resultSet = statement.executeQuery(query);
@@ -2648,7 +2655,7 @@
 				double price = 0.0;
 
 				try {
-					Connection connection = DriverManager.getConnection("jdbc:mysql://localhost:3306/platillos", "root", "root");
+					Connection connection = DriverManager.getConnection("jdbc:mysql://localhost:3306/platillos", "root", "");
 					Statement statement = connection.createStatement();
 					String getPriceQuery = "SELECT Precio FROM " + tableName + " LIMIT 1";
 					ResultSet getPriceResult = statement.executeQuery(getPriceQuery);
@@ -2704,15 +2711,6 @@
 			}
 		});
 
-
-
-
-
-
-
-
-
-
 		JButton backEditOrd = new JButton(new ImageIcon("BotonRetroceder.png"));
 		backEditOrd .setBounds(10, 11, 35, 33);
 		backEditOrd .addActionListener(new ActionListener() {
@@ -2727,6 +2725,108 @@
 		EditOrdenes1.add(backEditOrd);
 
 
+		editarOrdenbtn.addActionListener(new ActionListener() {
+			public void actionPerformed(ActionEvent e) {
+				int selectedRow = platillosenordentable2.getSelectedRow();
+				if (selectedRow != -1) {
+					String selectedCliente = clienteaelegirbox2.getSelectedItem().toString();
+					String selectedPlatillo = platillosenordentable2.getValueAt(selectedRow, 0).toString();
+					double total = Double.parseDouble(Totalporcompralbl2.getText().substring(7));
+
+					try {
+						Connection connection = DriverManager.getConnection("jdbc:mysql://localhost:3306/ordenes", "root", "");
+						String updateQuery = "UPDATE historialbueno SET Nombre=?, Platillos=?, Total=? WHERE ID=?";
+						PreparedStatement statement = connection.prepareStatement(updateQuery);
+						statement.setString(1, selectedCliente);
+						statement.setString(2, selectedPlatillo);
+						statement.setDouble(3, total);
+						statement.setInt(4, selectedRow + 1); // Assuming ID starts from 1
+
+						int rowsUpdated = statement.executeUpdate();
+						if (rowsUpdated > 0) {
+							System.out.println("Row updated successfully.");
+						} else {
+							System.out.println("Failed to update the row.");
+						}
+
+						statement.close();
+						connection.close();
+					} catch (SQLException ex) {
+						ex.printStackTrace();
+					}
+
+					DefaultTableModel model = (DefaultTableModel) platillosenordentable2.getModel();
+					model.setValueAt(selectedCliente, selectedRow, 1);
+					model.setValueAt(selectedPlatillo, selectedRow, 2);
+					model.setValueAt(total, selectedRow, 3);
+
+					model.fireTableDataChanged();
+					platillosenordentable2.repaint();
+				}
+			}
+		});
+
+		Timer timercomboboxtabla = new Timer(20000, new ActionListener() {
+			@Override
+			public void actionPerformed(ActionEvent e) {
+
+				try {
+					Connection connection = DriverManager.getConnection("jdbc:mysql://localhost:3306/ordenes", "root", "");
+					Statement statement = connection.createStatement();
+
+					String selectQuery = "SELECT ID, Nombre, Platillos, Total FROM historialbueno";
+					ResultSet resultSet = statement.executeQuery(selectQuery);
+
+					tableModelEditarOrd.setRowCount(0);
+
+					while (resultSet.next()) {
+						int id = resultSet.getInt("ID");
+						String nombre = resultSet.getString("Nombre");
+						String platillos = resultSet.getString("Platillos");
+						double total = resultSet.getDouble("Total");
+
+						Object[] rowData = {id, nombre, platillos, total};
+						tableModelEditarOrd.addRow(rowData);
+					}
+
+					resultSet.close();
+					statement.close();
+					connection.close();
+				} catch (SQLException ex) {
+					ex.printStackTrace();
+				}
+
+				// actualiza JComboBox
+				comboBoxModelEditarOrd.removeAllElements();
+
+				try {
+					Connection connection = DriverManager.getConnection("jdbc:mysql://localhost:3306/ordenes", "root", "");
+					Statement statement = connection.createStatement();
+
+					String selectQuery = "SELECT ID, Nombre FROM historialbueno";
+					ResultSet resultSet = statement.executeQuery(selectQuery);
+
+					while (resultSet.next()) {
+						int id = resultSet.getInt("ID");
+						String nombre = resultSet.getString("Nombre");
+
+						String item = id + " - " + nombre;
+						comboBoxModelEditarOrd.addElement(item);
+					}
+
+					resultSet.close();
+					statement.close();
+					connection.close();
+				} catch (SQLException ex) {
+					ex.printStackTrace();
+				}
+			}
+		});
+
+
+		timercomboboxtabla.start();
+
+
 
 
 
@@ -3045,8 +3145,8 @@
 
 		try {
 			String url = "jdbc:mysql://localhost:3306/clientes";
-			String username = "your-username";
-			String password = "your-password";
+			String username = "root";
+			String password = "";
 			Connection connection = DriverManager.getConnection(url, username, password);
 
 			Statement statement = connection.createStatement();
@@ -3226,6 +3326,50 @@
 
 
 
+		//Combobox
+		try {
+			Connection connection = DriverManager.getConnection("jdbc:mysql://localhost:3306/clientes", "root", "");
+
+			Statement statement = connection.createStatement();
+			ResultSet resultSet = statement.executeQuery("SELECT Nombre, Unidad, Color, Cantidad FROM inventario");
+
+			while (resultSet.next()) {
+				String nombre = resultSet.getString("Nombre");
+				editarartbox.addItem(nombre);
+			}
+
+			statement.close();
+			connection.close();
+		} catch (SQLException ex) {
+			ex.printStackTrace();
+		}
+
+
+
+		//tabla
+
+		try {
+			Connection connection = DriverManager.getConnection("jdbc:mysql://localhost:3306/clientes", "root", "");
+
+			Statement statement = connection.createStatement();
+			ResultSet resultSet = statement.executeQuery("SELECT Nombre, Unidad, Color, Cantidad FROM inventario");
+
+			while (resultSet.next()) {
+				String nombre = resultSet.getString("Nombre");
+				String unidad = resultSet.getString("Unidad");
+				String color = resultSet.getString("Color");
+				String cantidad = resultSet.getString("Cantidad");
+
+				Object[] rowData = {nombre, unidad, color, cantidad};
+				tablamodelinvconsulta.addRow(rowData);
+			}
+
+			statement.close();
+			connection.close();
+		} catch (SQLException ex) {
+			ex.printStackTrace();
+		}
+
 		editararticulobtn.addActionListener(new ActionListener() {
 			@Override
 			public void actionPerformed(ActionEvent e) {
@@ -3255,39 +3399,32 @@
 							statement.close();
 							connection.close();
 
-							tablamodelinvconsulta.setRowCount(0);
+							// Find the row index in the table model with the matching Nombre
+							int rowCount = tablamodelinvconsulta.getRowCount();
+							int rowIndex = -1;
+							for (int i = 0; i < rowCount; i++) {
+								String rowNombre = (String) tablamodelinvconsulta.getValueAt(i, 0);
+								if (rowNombre.equals(nombre)) {
+									rowIndex = i;
+									break;
+								}
+							}
 
-							connection = DriverManager.getConnection("jdbc:mysql://localhost:3306/clientes", "root", "");
-							statement = connection.prepareStatement("SELECT Nombre, Unidad, Color, Cantidad FROM inventario");
-							ResultSet resultSet = statement.executeQuery();
+							if (rowIndex != -1) {
+								// Remove the row from the table model
+								tablamodelinvconsulta.removeRow(rowIndex);
 
-							while (resultSet.next()) {
-								String updatedNombre = resultSet.getString("Nombre");
-								String unidad = resultSet.getString("Unidad");
-								String color = resultSet.getString("Color");
-								String cantidad = resultSet.getString("Cantidad");
-
-								Object[] rowData = {updatedNombre, unidad, color, cantidad};
-								tablamodelinvconsulta.addRow(rowData);
+								// Insert the updated row at the same position
+								Object[] rowData = {nuevoNombre, nuevaUnidad, nuevoColor, nuevaCantidad};
+								tablamodelinvconsulta.insertRow(rowIndex, rowData);
 							}
 
-							statement.close();
-							connection.close();
+							// Remove the selected item from the combobox
+							editarartbox.removeItem(selectedArticulo);
+							editarartbox.setSelectedIndex(-1);
 						} catch (SQLException ex) {
 							ex.printStackTrace();
 						}
-
-						int selectedRow = tablaeditarart.getSelectedRow();
-
-						editarartbox.removeItem(selectedArticulo);
-						editarartbox.setSelectedIndex(-1);
-
-						if (selectedRow != -1) {
-							tablaeditarart.setValueAt(textField3.getText(), selectedRow, 0);
-							tablaeditarart.setValueAt(comboBoxunidad2.getSelectedItem(), selectedRow, 1);
-							tablaeditarart.setValueAt(comboboxcolor2.getSelectedItem(), selectedRow, 2);
-							tablaeditarart.setValueAt(textField_21.getText(), selectedRow, 3);
-						}
 					}
 				}
 			}
@@ -3323,50 +3460,6 @@
 
 
 
-		//Combobox
-		try {
-			Connection connection = DriverManager.getConnection("jdbc:mysql://localhost:3306/clientes", "root", "");
-
-			Statement statement = connection.createStatement();
-			ResultSet resultSet = statement.executeQuery("SELECT Nombre, Unidad, Color, Cantidad FROM inventario");
-
-			while (resultSet.next()) {
-				String nombre = resultSet.getString("Nombre");
-				editarartbox.addItem(nombre);
-			}
-
-			statement.close();
-			connection.close();
-		} catch (SQLException ex) {
-			ex.printStackTrace();
-		}
-
-
-
-		//tabla
-
-		try {
-			Connection connection = DriverManager.getConnection("jdbc:mysql://localhost:3306/clientes", "root", "");
-
-			Statement statement = connection.createStatement();
-			ResultSet resultSet = statement.executeQuery("SELECT Nombre, Unidad, Color, Cantidad FROM inventario");
-
-			while (resultSet.next()) {
-				String nombre = resultSet.getString("Nombre");
-				String unidad = resultSet.getString("Unidad");
-				String color = resultSet.getString("Color");
-				String cantidad = resultSet.getString("Cantidad");
-
-				Object[] rowData = {nombre, unidad, color, cantidad};
-				tablamodelinvconsulta.addRow(rowData);
-			}
-
-			statement.close();
-			connection.close();
-		} catch (SQLException ex) {
-			ex.printStackTrace();
-		}
-
 
 
 		btnbackeditarinv.addActionListener(new ActionListener() {
@@ -3635,7 +3728,7 @@
 					}
 
 					try {
-						Connection connection = DriverManager.getConnection("jdbc:mysql://localhost:3306/clientes", "root", "root");
+						Connection connection = DriverManager.getConnection("jdbc:mysql://localhost:3306/clientes", "root", "");
 
 						String query = "INSERT INTO inventario (Nombre, Unidad, Color, Cantidad) VALUES (?, ?, ?, ?)";
 						PreparedStatement statement = connection.prepareStatement(query);
@@ -3844,21 +3937,51 @@
 				String apellidos = resultSetConsulta.getString("Apellidos");
 				String telefono = resultSetConsulta.getString("Tel√©fono");
 				String direccion = resultSetConsulta.getString("Direcci√≥n");
+
+				Object[] rowData = {nombre, apellidos, telefono, direccion};
+
+				tableModelFuera.addRow(rowData);
+
+
+			}
+
+			resultSetConsulta.close();
+			statement.close();
+			connection.close();
+		} catch (SQLException ex) {
+			ex.printStackTrace();
+		}
+
+		Timer timer20 = new Timer(5000, e -> {
+			try {
+				Connection connection = DriverManager.getConnection("jdbc:mysql://localhost:3306/clientes", "root", "");
+				Statement statement = connection.createStatement();
+
+				String queryConsulta = "SELECT * FROM clientes";
+				ResultSet resultSetConsulta = statement.executeQuery(queryConsulta);
+
+				tableModelFuera.setRowCount(0);
+
+				while (resultSetConsulta.next()) {
+					String nombre = resultSetConsulta.getString("Nombre");
+					String apellidos = resultSetConsulta.getString("Apellidos");
+					String telefono = resultSetConsulta.getString("Tel√©fono");
+					String direccion = resultSetConsulta.getString("Direcci√≥n");
 
-				Object[] rowData = {nombre, apellidos, telefono, direccion};
+					Object[] rowData = {nombre, apellidos, telefono, direccion};
 
-				tableModelFuera.addRow(rowData);
-
-
-			}
+					tableModelFuera.addRow(rowData);
+				}
 
-			resultSetConsulta.close();
-			statement.close();
-			connection.close();
-		} catch (SQLException ex) {
-			ex.printStackTrace();
-		}
+				resultSetConsulta.close();
+				statement.close();
+				connection.close();
+			} catch (SQLException ex) {
+				ex.printStackTrace();
+			}
+		});
 
+		timer20.start();
 
 
 
@@ -4407,7 +4530,7 @@
 					String direccion = textoEdit4.getText();
 
 					try {
-						Connection connection = DriverManager.getConnection("jdbc:mysql://localhost:3306/clientes", "root", "root");
+						Connection connection = DriverManager.getConnection("jdbc:mysql://localhost:3306/clientes", "root", "");
 
 						String query = "UPDATE clientes SET Nombre = ?, Apellidos = ?, Tel√©fono = ?, Direcci√≥n = ? WHERE Nombre = ? AND Apellidos = ?";
 						PreparedStatement statement = connection.prepareStatement(query);
@@ -4437,7 +4560,6 @@
 								tableModelEdicion.setValueAt(direccion, selectedRow, 3);
 							}
 
-							// Update the JTable data from the database
 							tableModelEdicion.setRowCount(0);
 							statement = connection.prepareStatement("SELECT Nombre, Apellidos, Tel√©fono, Direcci√≥n FROM clientes");
 							ResultSet resultSet = statement.executeQuery();
@@ -4859,7 +4981,7 @@
 
 	public void updateComponents(DefaultTableModel tableModel1, DefaultTableModel tableModelInfo, DefaultTableModel tableModelEdicion, DefaultTableModel tableModelConsulta, JComboBox<String> comboBox1, JComboBox<String> comboBoxConsulta, JComboBox<String> comboBox2) {
 		try {
-			Connection connection = DriverManager.getConnection("jdbc:mysql://localhost:3306/clientes", "root", "root");
+			Connection connection = DriverManager.getConnection("jdbc:mysql://localhost:3306/clientes", "root", "");
 
 			// actualiza ptabla  1
 			Statement statement1 = connection.createStatement();
@@ -4976,7 +5098,7 @@
 
 	public void updateComponents(DefaultTableModel tablamodelinvconsulta, DefaultTableModel tableModel, DefaultTableModel eliminartableModel, JComboBox<String> editarartComboBox, JComboBox<String> eliminarartComboBox) {
 		try {
-			Connection connection = DriverManager.getConnection("jdbc:mysql://localhost:3306/clientes", "root", "root");
+			Connection connection = DriverManager.getConnection("jdbc:mysql://localhost:3306/clientes", "root", "");
 
 
 
@@ -5079,67 +5201,64 @@
 
 
 	public static void migrateTables() {
-		try {
-			// Connect to the source database
-
-			Connection sourceConnection = DriverManager.getConnection("jdbc:mysql://localhost:3306/ordenes", "root", "root");
-			DatabaseMetaData metaData = sourceConnection.getMetaData();
+
+		Timer timer = new Timer(10000, new ActionListener() {
+			@Override
+			public void actionPerformed(ActionEvent e) {
+				try {
+					Connection sourceConnection = DriverManager.getConnection("jdbc:mysql://localhost:3306/ordenes", "root", "");
+					DatabaseMetaData metaData = sourceConnection.getMetaData();
 
-			// Get the list of tables in the source database
-			ResultSet tables = metaData.getTables("ordenes", null, null, new String[]{"TABLE"});
+					ResultSet tables = metaData.getTables("ordenes", null, null, new String[]{"TABLE"});
 
-			// Connect to the target database
-			Connection targetConnection = DriverManager.getConnection("jdbc:mysql://localhost:3306/ordenes", "root", "root");
-			Statement targetStatement = targetConnection.createStatement();
+					Connection targetConnection = DriverManager.getConnection("jdbc:mysql://localhost:3306/ordenes", "root", "");
+					Statement targetStatement = targetConnection.createStatement();
 
-			// Clear the existing data in the target table
-			targetStatement.executeUpdate("DELETE FROM historialbueno");
+					targetStatement.executeUpdate("DELETE FROM historialbueno");
 
-			// Get the next auto-increment ID value
-			ResultSet idResult = targetStatement.executeQuery("SELECT MAX(ID) FROM historialbueno");
-			int nextId = 1;
-			if (idResult.next()) {
-				nextId = idResult.getInt(1) + 1;
-			}
+					ResultSet idResult = targetStatement.executeQuery("SELECT MAX(ID) FROM historialbueno");
+					int nextId = 1;
+					if (idResult.next()) {
+						nextId = idResult.getInt(1) + 1;
+					}
 
-			// Iterate over the tables
-			while (tables.next()) {
-				String tableName = tables.getString("TABLE_NAME");
+					while (tables.next()) {
+						String tableName = tables.getString("TABLE_NAME");
 
-				// Skip the "historialbueno" table
-				if (!tableName.equals("historialbueno")) {
-					// Fetch specific columns from the table
-					String columnNames = "Nombre, Platillos, Total";
-					String selectQuery = "SELECT " + columnNames + " FROM " + tableName;
-					ResultSet resultSet = sourceConnection.createStatement().executeQuery(selectQuery);
+						if (!tableName.equals("historialbueno")) {
+							String columnNames = "Nombre, Platillos, Total";
+							String selectQuery = "SELECT " + columnNames + " FROM " + tableName;
+							ResultSet resultSet = sourceConnection.createStatement().executeQuery(selectQuery);
 
-					// Insert the fetched data into the target table
-					while (resultSet.next()) {
-						StringBuilder insertQuery = new StringBuilder("INSERT INTO historialbueno (ID, ");
-						StringBuilder values = new StringBuilder("VALUES (");
-						insertQuery.append(columnNames.replace(",", ", ")).append(") ");
-						values.append("'").append(nextId++).append("', ");
-						values.append("'").append(resultSet.getString("Nombre")).append("', ");
-						values.append("'").append(resultSet.getString("Platillos")).append("', ");
-						values.append(resultSet.getDouble("Total")).append(")");
+							while (resultSet.next()) {
+								StringBuilder insertQuery = new StringBuilder("INSERT INTO historialbueno (ID, ");
+								StringBuilder values = new StringBuilder("VALUES (");
+								insertQuery.append(columnNames.replace(",", ", ")).append(") ");
+								values.append("'").append(nextId++).append("', ");
+								values.append("'").append(resultSet.getString("Nombre")).append("', ");
+								values.append("'").append(resultSet.getString("Platillos")).append("', ");
+								values.append(resultSet.getDouble("Total")).append(")");
 
-						// Complete the insert query
-						insertQuery.append(values);
+								insertQuery.append(values);
 
-						// Execute the insert query
-						targetStatement.executeUpdate(insertQuery.toString());
-					}
-				}
-			}
+								targetStatement.executeUpdate(insertQuery.toString());
+							}
+						}
+					}
 
-			// Close connections and statements
-			tables.close();
-			sourceConnection.close();
-			targetStatement.close();
-			targetConnection.close();
-		} catch (SQLException ex) {
-			ex.printStackTrace();
-		}
+					tables.close();
+					sourceConnection.close();
+					targetStatement.close();
+					targetConnection.close();
+				} catch (SQLException ex) {
+					ex.printStackTrace();
+				}
+			}
+		});
+
+
+		timer.start();
+
 	}
 
 
@@ -5169,8 +5288,8 @@
 
 	private boolean ingredientExists(String tableName, String ingredient) {
 		String url = "jdbc:mysql://localhost:3306/platillos";
-		String username = "your-username";
-		String password = "your-password";
+		String username = "root";
+		String password = "";
 
 		try (Connection connection = DriverManager.getConnection(url, username, password)) {
 			Statement statement = connection.createStatement();
Index: RestauranteFinal.iml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<module type=\"JAVA_MODULE\" version=\"4\">\r\n  <component name=\"NewModuleRootManager\" inherit-compiler-output=\"true\">\r\n    <exclude-output />\r\n    <content url=\"file://$MODULE_DIR$\">\r\n      <sourceFolder url=\"file://$MODULE_DIR$/src\" isTestSource=\"false\" />\r\n    </content>\r\n    <orderEntry type=\"inheritedJdk\" />\r\n    <orderEntry type=\"sourceFolder\" forTests=\"false\" />\r\n    <orderEntry type=\"module-library\" exported=\"\">\r\n      <library>\r\n        <CLASSES>\r\n          <root url=\"jar://$USER_HOME$/Documents/mysql/mysql-connector-j-8.0.33/mysql-connector-j-8.0.33.jar!/\" />\r\n        </CLASSES>\r\n        <JAVADOC />\r\n        <SOURCES />\r\n      </library>\r\n    </orderEntry>\r\n  </component>\r\n</module>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/RestauranteFinal.iml b/RestauranteFinal.iml
--- a/RestauranteFinal.iml	(revision 5cafbde7abb5c1e9f3c992a9433fe23895a07db7)
+++ b/RestauranteFinal.iml	(date 1686816940792)
@@ -10,7 +10,7 @@
     <orderEntry type="module-library" exported="">
       <library>
         <CLASSES>
-          <root url="jar://$USER_HOME$/Documents/mysql/mysql-connector-j-8.0.33/mysql-connector-j-8.0.33.jar!/" />
+          <root url="jar://$USER_HOME$/Desktop/mysql-connector-j-8.0.33/mysql-connector-j-8.0.33.jar!/" />
         </CLASSES>
         <JAVADOC />
         <SOURCES />
Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"AutoImportSettings\">\r\n    <option name=\"autoReloadType\" value=\"SELECTIVE\" />\r\n  </component>\r\n  <component name=\"ChangeListManager\">\r\n    <list default=\"true\" id=\"af21f6bf-8a8b-4129-80b5-cb47f863551b\" name=\"Changes\" comment=\"Se puede y requiere hacer login con credenciales dentro de la base de datos\">\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/workspace.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/workspace.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/Restaurante.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/Restaurante.java\" afterDir=\"false\" />\r\n    </list>\r\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\r\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\r\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\r\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\r\n  </component>\r\n  <component name=\"Git.Settings\">\r\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$\" />\r\n  </component>\r\n  <component name=\"MarkdownSettingsMigration\">\r\n    <option name=\"stateVersion\" value=\"1\" />\r\n  </component>\r\n  <component name=\"ProjectId\" id=\"2QoBJCHRVxP8u9rlTrYjBafCgIH\" />\r\n  <component name=\"ProjectLevelVcsManager\" settingsEditedManually=\"true\" />\r\n  <component name=\"ProjectViewState\">\r\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\r\n    <option name=\"showLibraryContents\" value=\"true\" />\r\n  </component>\r\n  <component name=\"PropertiesComponent\">{\r\n  &quot;keyToString&quot;: {\r\n    &quot;RunOnceActivity.OpenProjectViewOnStart&quot;: &quot;true&quot;,\r\n    &quot;RunOnceActivity.ShowReadmeOnStart&quot;: &quot;true&quot;,\r\n    &quot;last_opened_file_path&quot;: &quot;C:/Users/Gamer/Documents/GitHub/RestauranteFinal&quot;,\r\n    &quot;project.structure.last.edited&quot;: &quot;Modules&quot;,\r\n    &quot;project.structure.proportion&quot;: &quot;0.0&quot;,\r\n    &quot;project.structure.side.proportion&quot;: &quot;0.20574713&quot;\r\n  }\r\n}</component>\r\n  <component name=\"RecentsManager\">\r\n    <key name=\"CopyFile.RECENT_KEYS\">\r\n      <recent name=\"C:\\Users\\Gamer\\Documents\\GitHub\\RestauranteFinal\" />\r\n    </key>\r\n  </component>\r\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\r\n  <component name=\"TaskManager\">\r\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\r\n      <changelist id=\"af21f6bf-8a8b-4129-80b5-cb47f863551b\" name=\"Changes\" comment=\"\" />\r\n      <created>1686009980795</created>\r\n      <option name=\"number\" value=\"Default\" />\r\n      <option name=\"presentableId\" value=\"Default\" />\r\n      <updated>1686009980795</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00001\" summary=\"Se a√±aden base de datos en consultar, el consultar solo direccion y nombre de usuario, y option pane de confirmacion en todas las funciones\">\r\n      <created>1686023660495</created>\r\n      <option name=\"number\" value=\"00001\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00001\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1686023660495</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00002\" summary=\"Se conecta a tabla inventario en base de dato clientes, y se permite agregar o eliminar inventario\">\r\n      <created>1686098278544</created>\r\n      <option name=\"number\" value=\"00002\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00002\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1686098278544</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00003\" summary=\"Menu clientes actualizado\">\r\n      <created>1686688949876</created>\r\n      <option name=\"number\" value=\"00003\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00003\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1686688949876</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00004\" summary=\"Menu platillos actualizado ramses tu cambia el boton pues chamaco\">\r\n      <created>1686698782189</created>\r\n      <option name=\"number\" value=\"00004\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00004\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1686698782189</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00005\" summary=\"Menu Ordenes actualizado jijija\">\r\n      <created>1686701772218</created>\r\n      <option name=\"number\" value=\"00005\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00005\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1686701772218</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00006\" summary=\"Mas validaciones, para combobox de platillos, y que al crear una orden se reste del inventario el material usado\">\r\n      <created>1686727241700</created>\r\n      <option name=\"number\" value=\"00006\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00006\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1686727241700</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00007\" summary=\"Penultima validacion del crearorden lista, permite el crear la tabla de orden y reducir inventario, y ademas que si se pide mas 1 item se reduce acorde a cuantos se pidieron\">\r\n      <created>1686735241088</created>\r\n      <option name=\"number\" value=\"00007\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00007\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1686735241088</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00008\" summary=\"ultima validacion, si el inventario se acaba no se peude crear orden a no ser que se remueva el platillo\">\r\n      <created>1686766048763</created>\r\n      <option name=\"number\" value=\"00008\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00008\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1686766048763</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00009\" summary=\"push de respaldo,\">\r\n      <created>1686783965241</created>\r\n      <option name=\"number\" value=\"00009\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00009\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1686783965241</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00010\" summary=\"se a√±ade metodo para que la tabla de &quot;historialbueno&quot; se actualize cada vez que el codigo corra\">\r\n      <created>1686796666651</created>\r\n      <option name=\"number\" value=\"00010\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00010\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1686796666651</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00011\" summary=\"Se puede y requiere hacer login con credenciales dentro de la base de datos\">\r\n      <created>1686801729401</created>\r\n      <option name=\"number\" value=\"00011\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00011\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1686801729401</updated>\r\n    </task>\r\n    <option name=\"localTasksCounter\" value=\"12\" />\r\n    <servers />\r\n  </component>\r\n  <component name=\"Vcs.Log.Tabs.Properties\">\r\n    <option name=\"TAB_STATES\">\r\n      <map>\r\n        <entry key=\"MAIN\">\r\n          <value>\r\n            <State />\r\n          </value>\r\n        </entry>\r\n      </map>\r\n    </option>\r\n  </component>\r\n  <component name=\"VcsManagerConfiguration\">\r\n    <MESSAGE value=\"Se a√±aden base de datos en consultar, el consultar solo direccion y nombre de usuario, y option pane de confirmacion en todas las funciones\" />\r\n    <MESSAGE value=\"Se conecta a tabla inventario en base de dato clientes, y se permite agregar o eliminar inventario\" />\r\n    <MESSAGE value=\"Menu clientes actualizado\" />\r\n    <MESSAGE value=\"Menu platillos actualizado ramses tu cambia el boton pues chamaco\" />\r\n    <MESSAGE value=\"Menu Ordenes actualizado jijija\" />\r\n    <MESSAGE value=\"Mas validaciones, para combobox de platillos, y que al crear una orden se reste del inventario el material usado\" />\r\n    <MESSAGE value=\"Penultima validacion del crearorden lista, permite el crear la tabla de orden y reducir inventario, y ademas que si se pide mas 1 item se reduce acorde a cuantos se pidieron\" />\r\n    <MESSAGE value=\"ultima validacion, si el inventario se acaba no se peude crear orden a no ser que se remueva el platillo\" />\r\n    <MESSAGE value=\"push de respaldo,\" />\r\n    <MESSAGE value=\"se a√±ade metodo para que la tabla de &quot;historialbueno&quot; se actualize cada vez que el codigo corra\" />\r\n    <MESSAGE value=\"Se puede y requiere hacer login con credenciales dentro de la base de datos\" />\r\n    <option name=\"LAST_COMMIT_MESSAGE\" value=\"Se puede y requiere hacer login con credenciales dentro de la base de datos\" />\r\n  </component>\r\n  <component name=\"com.intellij.coverage.CoverageDataManagerImpl\">\r\n    <SUITE FILE_PATH=\"coverage/RestauranteFinal$Restaurante.ic\" NAME=\"Restaurante Coverage Results\" MODIFIED=\"1685939229711\" SOURCE_PROVIDER=\"com.intellij.coverage.DefaultCoverageFileProvider\" RUNNER=\"idea\" COVERAGE_BY_TEST_ENABLED=\"false\" COVERAGE_TRACING_ENABLED=\"false\" />\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/workspace.xml b/.idea/workspace.xml
--- a/.idea/workspace.xml	(revision 5cafbde7abb5c1e9f3c992a9433fe23895a07db7)
+++ b/.idea/workspace.xml	(date 1686823998343)
@@ -4,8 +4,17 @@
     <option name="autoReloadType" value="SELECTIVE" />
   </component>
   <component name="ChangeListManager">
-    <list default="true" id="af21f6bf-8a8b-4129-80b5-cb47f863551b" name="Changes" comment="Se puede y requiere hacer login con credenciales dentro de la base de datos">
+    <list default="true" id="af21f6bf-8a8b-4129-80b5-cb47f863551b" name="Changes" comment="Se conecta a tabla inventario en base de dato clientes, y se permite agregar o eliminar inventario">
+      <change beforePath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_6_11_2023_9_01_PM__Changes_.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_6_11_2023_9_01_PM__Changes_.xml" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_6_12_2023_3_57_AM__Changes_.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_6_12_2023_3_57_AM__Changes_.xml" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_6_12_2023_8_45_PM__Changes_.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_6_12_2023_8_45_PM__Changes_.xml" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_6_13_2023_3_18_PM__Changes_.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_6_13_2023_3_18_PM__Changes_.xml" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_6_13_2023_5_28_PM__Changes_.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_6_13_2023_5_28_PM__Changes_.xml" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_6_13_2023_6_44_PM__Changes_.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_6_13_2023_6_44_PM__Changes_.xml" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_6_14_2023_12_45_AM__Changes_.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_6_14_2023_12_45_AM__Changes_.xml" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_6_9_2023_4_54_PM__Changes_.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_6_9_2023_4_54_PM__Changes_.xml" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/RestauranteFinal.iml" beforeDir="false" afterPath="$PROJECT_DIR$/RestauranteFinal.iml" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/src/Restaurante.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/Restaurante.java" afterDir="false" />
     </list>
     <option name="SHOW_DIALOG" value="false" />
@@ -25,21 +34,16 @@
     <option name="hideEmptyMiddlePackages" value="true" />
     <option name="showLibraryContents" value="true" />
   </component>
-  <component name="PropertiesComponent">{
-  &quot;keyToString&quot;: {
-    &quot;RunOnceActivity.OpenProjectViewOnStart&quot;: &quot;true&quot;,
-    &quot;RunOnceActivity.ShowReadmeOnStart&quot;: &quot;true&quot;,
-    &quot;last_opened_file_path&quot;: &quot;C:/Users/Gamer/Documents/GitHub/RestauranteFinal&quot;,
-    &quot;project.structure.last.edited&quot;: &quot;Modules&quot;,
-    &quot;project.structure.proportion&quot;: &quot;0.0&quot;,
-    &quot;project.structure.side.proportion&quot;: &quot;0.20574713&quot;
-  }
-}</component>
-  <component name="RecentsManager">
-    <key name="CopyFile.RECENT_KEYS">
-      <recent name="C:\Users\Gamer\Documents\GitHub\RestauranteFinal" />
-    </key>
-  </component>
+  <component name="PropertiesComponent"><![CDATA[{
+  "keyToString": {
+    "RunOnceActivity.OpenProjectViewOnStart": "true",
+    "RunOnceActivity.ShowReadmeOnStart": "true",
+    "last_opened_file_path": "C:/Users/abaro/Desktop/mysql-connector-j-8.0.33/mysql-connector-j-8.0.33.jar",
+    "project.structure.last.edited": "Modules",
+    "project.structure.proportion": "0.15",
+    "project.structure.side.proportion": "0.20574713"
+  }
+}]]></component>
   <component name="SpellCheckerSettings" RuntimeDictionaries="0" Folders="0" CustomDictionaries="0" DefaultDictionary="application-level" UseSingleDictionary="true" transferred="true" />
   <component name="TaskManager">
     <task active="true" id="Default" summary="Default task">
@@ -63,96 +67,13 @@
       <option name="project" value="LOCAL" />
       <updated>1686098278544</updated>
     </task>
-    <task id="LOCAL-00003" summary="Menu clientes actualizado">
-      <created>1686688949876</created>
-      <option name="number" value="00003" />
-      <option name="presentableId" value="LOCAL-00003" />
-      <option name="project" value="LOCAL" />
-      <updated>1686688949876</updated>
-    </task>
-    <task id="LOCAL-00004" summary="Menu platillos actualizado ramses tu cambia el boton pues chamaco">
-      <created>1686698782189</created>
-      <option name="number" value="00004" />
-      <option name="presentableId" value="LOCAL-00004" />
-      <option name="project" value="LOCAL" />
-      <updated>1686698782189</updated>
-    </task>
-    <task id="LOCAL-00005" summary="Menu Ordenes actualizado jijija">
-      <created>1686701772218</created>
-      <option name="number" value="00005" />
-      <option name="presentableId" value="LOCAL-00005" />
-      <option name="project" value="LOCAL" />
-      <updated>1686701772218</updated>
-    </task>
-    <task id="LOCAL-00006" summary="Mas validaciones, para combobox de platillos, y que al crear una orden se reste del inventario el material usado">
-      <created>1686727241700</created>
-      <option name="number" value="00006" />
-      <option name="presentableId" value="LOCAL-00006" />
-      <option name="project" value="LOCAL" />
-      <updated>1686727241700</updated>
-    </task>
-    <task id="LOCAL-00007" summary="Penultima validacion del crearorden lista, permite el crear la tabla de orden y reducir inventario, y ademas que si se pide mas 1 item se reduce acorde a cuantos se pidieron">
-      <created>1686735241088</created>
-      <option name="number" value="00007" />
-      <option name="presentableId" value="LOCAL-00007" />
-      <option name="project" value="LOCAL" />
-      <updated>1686735241088</updated>
-    </task>
-    <task id="LOCAL-00008" summary="ultima validacion, si el inventario se acaba no se peude crear orden a no ser que se remueva el platillo">
-      <created>1686766048763</created>
-      <option name="number" value="00008" />
-      <option name="presentableId" value="LOCAL-00008" />
-      <option name="project" value="LOCAL" />
-      <updated>1686766048763</updated>
-    </task>
-    <task id="LOCAL-00009" summary="push de respaldo,">
-      <created>1686783965241</created>
-      <option name="number" value="00009" />
-      <option name="presentableId" value="LOCAL-00009" />
-      <option name="project" value="LOCAL" />
-      <updated>1686783965241</updated>
-    </task>
-    <task id="LOCAL-00010" summary="se a√±ade metodo para que la tabla de &quot;historialbueno&quot; se actualize cada vez que el codigo corra">
-      <created>1686796666651</created>
-      <option name="number" value="00010" />
-      <option name="presentableId" value="LOCAL-00010" />
-      <option name="project" value="LOCAL" />
-      <updated>1686796666651</updated>
-    </task>
-    <task id="LOCAL-00011" summary="Se puede y requiere hacer login con credenciales dentro de la base de datos">
-      <created>1686801729401</created>
-      <option name="number" value="00011" />
-      <option name="presentableId" value="LOCAL-00011" />
-      <option name="project" value="LOCAL" />
-      <updated>1686801729401</updated>
-    </task>
-    <option name="localTasksCounter" value="12" />
+    <option name="localTasksCounter" value="3" />
     <servers />
   </component>
-  <component name="Vcs.Log.Tabs.Properties">
-    <option name="TAB_STATES">
-      <map>
-        <entry key="MAIN">
-          <value>
-            <State />
-          </value>
-        </entry>
-      </map>
-    </option>
-  </component>
   <component name="VcsManagerConfiguration">
     <MESSAGE value="Se a√±aden base de datos en consultar, el consultar solo direccion y nombre de usuario, y option pane de confirmacion en todas las funciones" />
     <MESSAGE value="Se conecta a tabla inventario en base de dato clientes, y se permite agregar o eliminar inventario" />
-    <MESSAGE value="Menu clientes actualizado" />
-    <MESSAGE value="Menu platillos actualizado ramses tu cambia el boton pues chamaco" />
-    <MESSAGE value="Menu Ordenes actualizado jijija" />
-    <MESSAGE value="Mas validaciones, para combobox de platillos, y que al crear una orden se reste del inventario el material usado" />
-    <MESSAGE value="Penultima validacion del crearorden lista, permite el crear la tabla de orden y reducir inventario, y ademas que si se pide mas 1 item se reduce acorde a cuantos se pidieron" />
-    <MESSAGE value="ultima validacion, si el inventario se acaba no se peude crear orden a no ser que se remueva el platillo" />
-    <MESSAGE value="push de respaldo," />
-    <MESSAGE value="se a√±ade metodo para que la tabla de &quot;historialbueno&quot; se actualize cada vez que el codigo corra" />
-    <MESSAGE value="Se puede y requiere hacer login con credenciales dentro de la base de datos" />
-    <option name="LAST_COMMIT_MESSAGE" value="Se puede y requiere hacer login con credenciales dentro de la base de datos" />
+    <option name="LAST_COMMIT_MESSAGE" value="Se conecta a tabla inventario en base de dato clientes, y se permite agregar o eliminar inventario" />
   </component>
   <component name="com.intellij.coverage.CoverageDataManagerImpl">
     <SUITE FILE_PATH="coverage/RestauranteFinal$Restaurante.ic" NAME="Restaurante Coverage Results" MODIFIED="1685939229711" SOURCE_PROVIDER="com.intellij.coverage.DefaultCoverageFileProvider" RUNNER="idea" COVERAGE_BY_TEST_ENABLED="false" COVERAGE_TRACING_ENABLED="false" />
